
CanSat2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011334  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080114d8  080114d8  000214d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119bc  080119bc  000302cc  2**0
                  CONTENTS
  4 .ARM          00000008  080119bc  080119bc  000219bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119c4  080119c4  000302cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119c4  080119c4  000219c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119c8  080119c8  000219c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080119cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f08  200002cc  08011c98  000302cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021d4  08011c98  000321d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026666  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057b4  00000000  00000000  00056962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  0005c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  0005e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e665  00000000  00000000  00060070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028663  00000000  00000000  0007e6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eec7  00000000  00000000  000a6d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d4  00000000  00000000  00145c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080114bc 	.word	0x080114bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	080114bc 	.word	0x080114bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	//MPU_SPI_Write(&data, subAddress, 1);
	uint8_t pData[2] = {subAddress, data};
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	733b      	strb	r3, [r7, #12]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (_address << 0), pData, 2, 100);
 8000ed4:	23d0      	movs	r3, #208	; 0xd0
 8000ed6:	b299      	uxth	r1, r3
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <writeRegister+0x3c>)
 8000ee4:	f002 ffde 	bl	8003ea4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1, (_address << 0), &subAddress, 1,  100);
	//HAL_I2C_Master_Transmit(&hi2c1, (_address << 0), &data, 1,  100);
	HAL_Delay(10);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f002 f82f 	bl	8002f4c <HAL_Delay>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000354 	.word	0x20000354

08000efc <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4603      	mov	r3, r0
 8000f04:	603a      	str	r2, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	71bb      	strb	r3, [r7, #6]
	//MPU_SPI_Read(dest, subAddress, count);
	HAL_I2C_Master_Transmit(&hi2c1, (_address << 0), &subAddress, 1,  100);
 8000f0c:	23d0      	movs	r3, #208	; 0xd0
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	1dfa      	adds	r2, r7, #7
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <readRegisters+0x40>)
 8000f1a:	f002 ffc3 	bl	8003ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (_address << 0), dest, count, 100);
 8000f1e:	23d0      	movs	r3, #208	; 0xd0
 8000f20:	b299      	uxth	r1, r3
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2264      	movs	r2, #100	; 0x64
 8000f28:	9200      	str	r2, [sp, #0]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <readRegisters+0x40>)
 8000f2e:	f003 f8b7 	bl	80040a0 <HAL_I2C_Master_Receive>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000354 	.word	0x20000354

08000f40 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8000f50:	2325      	movs	r3, #37	; 0x25
 8000f52:	220c      	movs	r2, #12
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ffb0 	bl	8000ebc <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000f5c:	2226      	movs	r2, #38	; 0x26
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff ffaa 	bl	8000ebc <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8000f68:	2263      	movs	r2, #99	; 0x63
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f7ff ffa4 	bl	8000ebc <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000f74:	2227      	movs	r2, #39	; 0x27
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4610      	mov	r0, r2
 8000f82:	f7ff ff9b 	bl	8000ebc <writeRegister>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	603a      	str	r2, [r7, #0]
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8000f9e:	2025      	movs	r0, #37	; 0x25
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff ff87 	bl	8000ebc <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000fae:	2226      	movs	r2, #38	; 0x26
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	f7ff ff81 	bl	8000ebc <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000fba:	2027      	movs	r0, #39	; 0x27
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff ff79 	bl	8000ebc <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f001 ffbe 	bl	8002f4c <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8000fd0:	2049      	movs	r0, #73	; 0x49
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff ff90 	bl	8000efc <readRegisters>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8000fe8:	2375      	movs	r3, #117	; 0x75
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <whoAmI+0x24>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff84 	bl	8000efc <readRegisters>
	printf("%d\n", _buffer[0]);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <whoAmI+0x24>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <whoAmI+0x28>)
 8000ffc:	f00e f924 	bl	800f248 <iprintf>
	// return the register value
	return _buffer[0];
 8001000:	4b01      	ldr	r3, [pc, #4]	; (8001008 <whoAmI+0x24>)
 8001002:	781b      	ldrb	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002e8 	.word	0x200002e8
 800100c:	080114d8 	.word	0x080114d8

08001010 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001014:	2300      	movs	r3, #0
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <whoAmIAK8963+0x18>)
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ffb7 	bl	8000f8e <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <whoAmIAK8963+0x18>)
 8001022:	781b      	ldrb	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200002e8 	.word	0x200002e8

0800102c <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001032:	236b      	movs	r3, #107	; 0x6b
 8001034:	2201      	movs	r2, #1
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff3f 	bl	8000ebc <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 800103e:	236a      	movs	r3, #106	; 0x6a
 8001040:	2220      	movs	r2, #32
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff39 	bl	8000ebc <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 800104a:	2324      	movs	r3, #36	; 0x24
 800104c:	220d      	movs	r2, #13
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff33 	bl	8000ebc <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001056:	230a      	movs	r3, #10
 8001058:	2200      	movs	r2, #0
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff6f 	bl	8000f40 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8001062:	236b      	movs	r3, #107	; 0x6b
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff27 	bl	8000ebc <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f001 ff6c 	bl	8002f4c <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8001074:	230b      	movs	r3, #11
 8001076:	2201      	movs	r2, #1
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff60 	bl	8000f40 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001080:	236b      	movs	r3, #107	; 0x6b
 8001082:	2201      	movs	r2, #1
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff18 	bl	8000ebc <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 800108c:	f7ff ffaa 	bl	8000fe4 <whoAmI>
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b71      	cmp	r3, #113	; 0x71
 8001098:	d009      	beq.n	80010ae <MPU9250_Init+0x82>
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b73      	cmp	r3, #115	; 0x73
 800109e:	d006      	beq.n	80010ae <MPU9250_Init+0x82>
	{
		printf("whoAmI error pridurok %d\n", who);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4619      	mov	r1, r3
 80010a4:	483a      	ldr	r0, [pc, #232]	; (8001190 <MPU9250_Init+0x164>)
 80010a6:	f00e f8cf 	bl	800f248 <iprintf>
		return 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e06c      	b.n	8001188 <MPU9250_Init+0x15c>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 80010ae:	236c      	movs	r3, #108	; 0x6c
 80010b0:	2200      	movs	r2, #0
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff01 	bl	8000ebc <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_4G);
 80010ba:	231c      	movs	r3, #28
 80010bc:	2208      	movs	r2, #8
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fefb 	bl	8000ebc <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS);
 80010c6:	231b      	movs	r3, #27
 80010c8:	2218      	movs	r2, #24
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fef5 	bl	8000ebc <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 80010d2:	231d      	movs	r3, #29
 80010d4:	2201      	movs	r2, #1
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff feef 	bl	8000ebc <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 80010de:	231a      	movs	r3, #26
 80010e0:	2201      	movs	r2, #1
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fee9 	bl	8000ebc <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 80010ea:	2319      	movs	r3, #25
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fee4 	bl	8000ebc <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 80010f4:	236a      	movs	r3, #106	; 0x6a
 80010f6:	2220      	movs	r2, #32
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fede 	bl	8000ebc <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8001100:	2324      	movs	r3, #36	; 0x24
 8001102:	220d      	movs	r2, #13
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fed8 	bl	8000ebc <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800110c:	f7ff ff80 	bl	8001010 <whoAmIAK8963>
 8001110:	4603      	mov	r3, r0
 8001112:	2b48      	cmp	r3, #72	; 0x48
 8001114:	d001      	beq.n	800111a <MPU9250_Init+0xee>
	{
		return 1;
 8001116:	2301      	movs	r3, #1
 8001118:	e036      	b.n	8001188 <MPU9250_Init+0x15c>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800111a:	230a      	movs	r3, #10
 800111c:	2200      	movs	r2, #0
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff0d 	bl	8000f40 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f001 ff10 	bl	8002f4c <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800112c:	230a      	movs	r3, #10
 800112e:	220f      	movs	r2, #15
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff04 	bl	8000f40 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f001 ff07 	bl	8002f4c <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800113e:	2310      	movs	r3, #16
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <MPU9250_Init+0x168>)
 8001142:	2103      	movs	r1, #3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff22 	bl	8000f8e <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800114a:	230a      	movs	r3, #10
 800114c:	2200      	movs	r2, #0
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fef5 	bl	8000f40 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f001 fef8 	bl	8002f4c <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 800115c:	230a      	movs	r3, #10
 800115e:	2216      	movs	r2, #22
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff feec 	bl	8000f40 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f001 feef 	bl	8002f4c <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 800116e:	236b      	movs	r3, #107	; 0x6b
 8001170:	2201      	movs	r2, #1
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fea1 	bl	8000ebc <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 800117a:	2303      	movs	r3, #3
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <MPU9250_Init+0x16c>)
 800117e:	2107      	movs	r1, #7
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff04 	bl	8000f8e <readAK8963Registers>

	// successful init, return 0
	return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	080114dc 	.word	0x080114dc
 8001194:	20000300 	.word	0x20000300
 8001198:	200002e8 	.word	0x200002e8

0800119c <reset>:
	val += data[0] << 16;
	val += data[1] << 8;
	val += data[2];
	return val;
}
void reset(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	MSwriteRegister(MS5611_RESET, 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	201e      	movs	r0, #30
 80011a4:	f000 f8b6 	bl	8001314 <MSwriteRegister>
	HAL_Delay(4);
 80011a8:	2004      	movs	r0, #4
 80011aa:	f001 fecf 	bl	8002f4c <HAL_Delay>
	readProm();
 80011ae:	f000 f803 	bl	80011b8 <readProm>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <readProm>:
void readProm(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 8; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e01a      	b.n	80011fa <readProm+0x42>
	  MSreadRegisters(MS5611_PROM + 2 * i, 2, dataprom);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	3350      	adds	r3, #80	; 0x50
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <readProm+0x54>)
 80011d0:	2102      	movs	r1, #2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f8b3 	bl	800133e <MSreadRegisters>
	  printf("Data calib: %d, %d\n", dataprom[0], dataprom[1]);
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <readProm+0x54>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <readProm+0x54>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	461a      	mov	r2, r3
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <readProm+0x58>)
 80011e6:	f00e f82f 	bl	800f248 <iprintf>
	  coef[i] = (dataprom[0] << 8) + dataprom[1];
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <readProm+0x54>)
 80011ee:	7851      	ldrb	r1, [r2, #1]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <readProm+0x5c>)
 80011f2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	3301      	adds	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d9e1      	bls.n	80011c4 <readProm+0xc>
	}
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000304 	.word	0x20000304
 8001210:	080114f8 	.word	0x080114f8
 8001214:	20000324 	.word	0x20000324

08001218 <MS_Activate>:
	  //temp = Temp;
	  //bar = (int32_t)P;
	  return (int32_t)P;
}
static inline void MS_Activate()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MS5611_CS_GPIO, MS5611_CS_PIN, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4802      	ldr	r0, [pc, #8]	; (800122c <MS_Activate+0x14>)
 8001224:	f002 fce0 	bl	8003be8 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40020000 	.word	0x40020000

08001230 <MS_Deactivate>:

static inline void MS_Deactivate()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MS5611_CS_GPIO, MS5611_CS_PIN, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4802      	ldr	r0, [pc, #8]	; (8001244 <MS_Deactivate+0x14>)
 800123c:	f002 fcd4 	bl	8003be8 <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020000 	.word	0x40020000

08001248 <MSSPIx_WriteRead>:

uint8_t MSSPIx_WriteRead(uint8_t Byte)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&MS5611_SPI,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,10000)!=HAL_OK)
 8001256:	f107 020f 	add.w	r2, r7, #15
 800125a:	1df9      	adds	r1, r7, #7
 800125c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <MSSPIx_WriteRead+0x38>)
 8001266:	f006 ffa4 	bl	80081b2 <HAL_SPI_TransmitReceive>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MSSPIx_WriteRead+0x2c>
	{
		return -1;
 8001270:	23ff      	movs	r3, #255	; 0xff
 8001272:	e000      	b.n	8001276 <MSSPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000042c 	.word	0x2000042c

08001284 <MS_SPI_Write>:

void MS_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
 8001290:	4613      	mov	r3, r2
 8001292:	803b      	strh	r3, [r7, #0]
	MS_Activate();
 8001294:	f7ff ffc0 	bl	8001218 <MS_Activate>
	MSSPIx_WriteRead(WriteAddr);
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ffd4 	bl	8001248 <MSSPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 80012a0:	e00a      	b.n	80012b8 <MS_SPI_Write+0x34>
	{
		MSSPIx_WriteRead(*pBuffer);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffce 	bl	8001248 <MSSPIx_WriteRead>
		NumByteToWrite--;
 80012ac:	883b      	ldrh	r3, [r7, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3301      	adds	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f1      	bne.n	80012a2 <MS_SPI_Write+0x1e>
	}
	MS_Deactivate();
 80012be:	f7ff ffb7 	bl	8001230 <MS_Deactivate>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <MS_SPI_Read>:

void MS_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
 80012d8:	4613      	mov	r3, r2
 80012da:	803b      	strh	r3, [r7, #0]
	MS_Activate();
 80012dc:	f7ff ff9c 	bl	8001218 <MS_Activate>
	uint8_t data = ReadAddr;
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MS5611_SPI, &data, 1, 1000);
 80012e4:	f107 010f 	add.w	r1, r7, #15
 80012e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ec:	2201      	movs	r2, #1
 80012ee:	4808      	ldr	r0, [pc, #32]	; (8001310 <MS_SPI_Read+0x44>)
 80012f0:	f006 fd12 	bl	8007d18 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MS5611_SPI, pBuffer, NumByteToRead, 1000);
 80012f4:	883a      	ldrh	r2, [r7, #0]
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MS_SPI_Read+0x44>)
 80012fe:	f006 fe47 	bl	8007f90 <HAL_SPI_Receive>
	MS_Deactivate();
 8001302:	f7ff ff95 	bl	8001230 <MS_Deactivate>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000042c 	.word	0x2000042c

08001314 <MSwriteRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void MSwriteRegister(uint8_t subAddress, uint8_t data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	71bb      	strb	r3, [r7, #6]
	MS_SPI_Write(&data, subAddress, 1);
 8001324:	79f9      	ldrb	r1, [r7, #7]
 8001326:	1dbb      	adds	r3, r7, #6
 8001328:	2201      	movs	r2, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffaa 	bl	8001284 <MS_SPI_Write>
	HAL_Delay(10);
 8001330:	200a      	movs	r0, #10
 8001332:	f001 fe0b 	bl	8002f4c <HAL_Delay>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <MSreadRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void MSreadRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	603a      	str	r2, [r7, #0]
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	460b      	mov	r3, r1
 800134c:	71bb      	strb	r3, [r7, #6]
	MS_SPI_Read(dest, subAddress, count);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	b29a      	uxth	r2, r3
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4619      	mov	r1, r3
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	f7ff ffb8 	bl	80012cc <MS_SPI_Read>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else
bool	Ds18b20_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 800136a:	2305      	movs	r3, #5
 800136c:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 800136e:	2208      	movs	r2, #8
 8001370:	4937      	ldr	r1, [pc, #220]	; (8001450 <Ds18b20_Init+0xec>)
 8001372:	4838      	ldr	r0, [pc, #224]	; (8001454 <Ds18b20_Init+0xf0>)
 8001374:	f000 fec4 	bl	8002100 <OneWire_Init>
		TempSensorCount = 0;	
 8001378:	4b37      	ldr	r3, [pc, #220]	; (8001458 <Ds18b20_Init+0xf4>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 800137e:	e002      	b.n	8001386 <Ds18b20_Init+0x22>
			Ds18b20Delay(100);
 8001380:	2064      	movs	r0, #100	; 0x64
 8001382:	f001 fde3 	bl	8002f4c <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8001386:	f001 fdd5 	bl	8002f34 <HAL_GetTick>
 800138a:	4603      	mov	r3, r0
 800138c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001390:	4293      	cmp	r3, r2
 8001392:	d9f5      	bls.n	8001380 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8001394:	482f      	ldr	r0, [pc, #188]	; (8001454 <Ds18b20_Init+0xf0>)
 8001396:	f000 ffa6 	bl	80022e6 <OneWire_First>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <Ds18b20_Init+0xf8>)
 80013a0:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80013a2:	e019      	b.n	80013d8 <Ds18b20_Init+0x74>
		{
			Ds18b20Delay(100);
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f001 fdd1 	bl	8002f4c <HAL_Delay>
			TempSensorCount++;
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <Ds18b20_Init+0xf4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <Ds18b20_Init+0xf4>)
 80013b4:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <Ds18b20_Init+0xf4>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <Ds18b20_Init+0xfc>)
 80013c0:	4413      	add	r3, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <Ds18b20_Init+0xf0>)
 80013c6:	f001 f8a3 	bl	8002510 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80013ca:	4822      	ldr	r0, [pc, #136]	; (8001454 <Ds18b20_Init+0xf0>)
 80013cc:	f000 ff9b 	bl	8002306 <OneWire_Next>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <Ds18b20_Init+0xf8>)
 80013d6:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <Ds18b20_Init+0xf8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e1      	bne.n	80013a4 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <Ds18b20_Init+0xf4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d106      	bne.n	80013f6 <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1bc      	bne.n	800136e <Ds18b20_Init+0xa>
 80013f4:	e000      	b.n	80013f8 <Ds18b20_Init+0x94>
			break;
 80013f6:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <Ds18b20_Init+0x9e>
		return false;
 80013fe:	2300      	movs	r3, #0
 8001400:	e022      	b.n	8001448 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	e019      	b.n	800143c <Ds18b20_Init+0xd8>
	{
		Ds18b20Delay(50);
 8001408:	2032      	movs	r0, #50	; 0x32
 800140a:	f001 fd9f 	bl	8002f4c <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <Ds18b20_Init+0xfc>)
 8001414:	4413      	add	r3, r2
 8001416:	220c      	movs	r2, #12
 8001418:	4619      	mov	r1, r3
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <Ds18b20_Init+0xf0>)
 800141c:	f000 f822 	bl	8001464 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f001 fd93 	bl	8002f4c <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <Ds18b20_Init+0xfc>)
 800142c:	4413      	add	r3, r2
 800142e:	4619      	mov	r1, r3
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <Ds18b20_Init+0xf0>)
 8001432:	f000 f8b0 	bl	8001596 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	3301      	adds	r3, #1
 800143a:	71bb      	strb	r3, [r7, #6]
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <Ds18b20_Init+0xf4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	79ba      	ldrb	r2, [r7, #6]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3e0      	bcc.n	8001408 <Ds18b20_Init+0xa4>
  }
	return true;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020800 	.word	0x40020800
 8001454:	2000033c 	.word	0x2000033c
 8001458:	20000351 	.word	0x20000351
 800145c:	20000350 	.word	0x20000350
 8001460:	2000032c 	.word	0x2000032c

08001464 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	4613      	mov	r3, r2
 8001470:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f000 f87e 	bl	8001574 <DS18B20_Is>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <DS18B20_SetResolution+0x1e>
		return 0;
 800147e:	2300      	movs	r3, #0
 8001480:	e074      	b.n	800156c <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 fe6a 	bl	800215c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f001 f821 	bl	80024d2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001490:	21be      	movs	r1, #190	; 0xbe
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 fee8 	bl	8002268 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 ff03 	bl	80022a4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 ff00 	bl	80022a4 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fefd 	bl	80022a4 <OneWire_ReadByte>
 80014aa:	4603      	mov	r3, r0
 80014ac:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 fef8 	bl	80022a4 <OneWire_ReadByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 fef3 	bl	80022a4 <OneWire_ReadByte>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d108      	bne.n	80014da <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ce:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	f023 0320 	bic.w	r3, r3, #32
 80014d6:	75fb      	strb	r3, [r7, #23]
 80014d8:	e022      	b.n	8001520 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b0a      	cmp	r3, #10
 80014de:	d108      	bne.n	80014f2 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014e6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	75fb      	strb	r3, [r7, #23]
 80014f0:	e016      	b.n	8001520 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b0b      	cmp	r3, #11
 80014f6:	d108      	bne.n	800150a <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	f023 0320 	bic.w	r3, r3, #32
 8001506:	75fb      	strb	r3, [r7, #23]
 8001508:	e00a      	b.n	8001520 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d107      	bne.n	8001520 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001516:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fe1b 	bl	800215c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 ffd2 	bl	80024d2 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800152e:	214e      	movs	r1, #78	; 0x4e
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fe99 	bl	8002268 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001536:	7dbb      	ldrb	r3, [r7, #22]
 8001538:	4619      	mov	r1, r3
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 fe94 	bl	8002268 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001540:	7d7b      	ldrb	r3, [r7, #21]
 8001542:	4619      	mov	r1, r3
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fe8f 	bl	8002268 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	4619      	mov	r1, r3
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fe8a 	bl	8002268 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fe01 	bl	800215c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 ffb8 	bl	80024d2 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001562:	2148      	movs	r1, #72	; 0x48
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 fe7f 	bl	8002268 <OneWire_WriteByte>
	
	return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b28      	cmp	r3, #40	; 0x28
 8001582:	d101      	bne.n	8001588 <DS18B20_Is+0x14>
		return 1;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <DS18B20_Is+0x16>
	
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 80015a0:	6838      	ldr	r0, [r7, #0]
 80015a2:	f7ff ffe7 	bl	8001574 <DS18B20_Is>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e049      	b.n	8001644 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 fdd3 	bl	800215c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 ff8a 	bl	80024d2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80015be:	21be      	movs	r1, #190	; 0xbe
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fe51 	bl	8002268 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fe6c 	bl	80022a4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fe69 	bl	80022a4 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fe66 	bl	80022a4 <OneWire_ReadByte>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fe61 	bl	80022a4 <OneWire_ReadByte>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fe5c 	bl	80022a4 <OneWire_ReadByte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 80015f0:	237d      	movs	r3, #125	; 0x7d
 80015f2:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 80015f4:	23c9      	movs	r3, #201	; 0xc9
 80015f6:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fdaf 	bl	800215c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 ff66 	bl	80024d2 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001606:	214e      	movs	r1, #78	; 0x4e
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fe2d 	bl	8002268 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fe28 	bl	8002268 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fe23 	bl	8002268 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fe1e 	bl	8002268 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fd95 	bl	800215c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001632:	6839      	ldr	r1, [r7, #0]
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 ff4c 	bl	80024d2 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800163a:	2148      	movs	r1, #72	; 0x48
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fe13 	bl	8002268 <OneWire_WriteByte>
	
	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001662:	b2db      	uxtb	r3, r3
 8001664:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6858      	ldr	r0, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	8adb      	ldrh	r3, [r3, #22]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	f002 fab9 	bl	8003be8 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	1cf9      	adds	r1, r7, #3
 8001680:	2201      	movs	r2, #1
 8001682:	f006 fb49 	bl	8007d18 <HAL_SPI_Transmit>
 8001686:	4603      	mov	r3, r0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f107 010f 	add.w	r1, r7, #15
 8001696:	2201      	movs	r2, #1
 8001698:	f006 fc7a 	bl	8007f90 <HAL_SPI_Receive>
 800169c:	4603      	mov	r3, r0
 800169e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6858      	ldr	r0, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8adb      	ldrh	r3, [r3, #22]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	f002 fa9c 	bl	8003be8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	4613      	mov	r3, r2
 80016c8:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d0:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80016d2:	78bb      	ldrb	r3, [r7, #2]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21b      	sxth	r3, r3
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6858      	ldr	r0, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	8adb      	ldrh	r3, [r3, #22]
 80016ec:	2200      	movs	r2, #0
 80016ee:	4619      	mov	r1, r3
 80016f0:	f002 fa7a 	bl	8003be8 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f107 010a 	add.w	r1, r7, #10
 8001700:	2202      	movs	r2, #2
 8001702:	f006 fb09 	bl	8007d18 <HAL_SPI_Transmit>
 8001706:	4603      	mov	r3, r0
 8001708:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6858      	ldr	r0, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	8adb      	ldrh	r3, [r3, #22]
 8001712:	2201      	movs	r2, #1
 8001714:	4619      	mov	r1, r3
 8001716:	f002 fa67 	bl	8003be8 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffbd 	bl	80016ba <write_register>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b2c      	cmp	r3, #44	; 0x2c
 8001758:	d801      	bhi.n	800175e <set_OCP+0x16>
    imax = 45;
 800175a:	232d      	movs	r3, #45	; 0x2d
 800175c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	2bf0      	cmp	r3, #240	; 0xf0
 8001762:	d901      	bls.n	8001768 <set_OCP+0x20>
    imax = 240;
 8001764:	23f0      	movs	r3, #240	; 0xf0
 8001766:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2b81      	cmp	r3, #129	; 0x81
 800176c:	d809      	bhi.n	8001782 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	3b2d      	subs	r3, #45	; 0x2d
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <set_OCP+0x68>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	1052      	asrs	r2, r2, #1
 800177a:	17db      	asrs	r3, r3, #31
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e008      	b.n	8001794 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	331e      	adds	r3, #30
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <set_OCP+0x68>)
 8001788:	fb82 1203 	smull	r1, r2, r2, r3
 800178c:	1092      	asrs	r2, r2, #2
 800178e:	17db      	asrs	r3, r3, #31
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	f043 0320 	orr.w	r3, r3, #32
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	210b      	movs	r1, #11
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff8a 	bl	80016ba <write_register>
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	66666667 	.word	0x66666667

080017b4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80017bc:	211d      	movs	r1, #29
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff44 	bl	800164c <read_register>
 80017c4:	4603      	mov	r3, r0
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	461c      	mov	r4, r3
 80017d0:	4615      	mov	r5, r2
 80017d2:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80017d6:	211e      	movs	r1, #30
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff37 	bl	800164c <read_register>
 80017de:	4603      	mov	r3, r0
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80017e4:	2304      	movs	r3, #4
 80017e6:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d908      	bls.n	8001800 <set_low_data_rate_optimization+0x4c>
 80017ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017f2:	1fd1      	subs	r1, r2, #7
 80017f4:	430b      	orrs	r3, r1
 80017f6:	d103      	bne.n	8001800 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001800:	7ffb      	ldrb	r3, [r7, #31]
 8001802:	461a      	mov	r2, r3
 8001804:	2126      	movs	r1, #38	; 0x26
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff57 	bl	80016ba <write_register>
}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bdb0      	pop	{r4, r5, r7, pc}

08001814 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800181c:	2100      	movs	r1, #0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ff7f 	bl	8001722 <set_mode>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001834:	2101      	movs	r1, #1
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ff73 	bl	8001722 <set_mode>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800184c:	211d      	movs	r1, #29
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fefc 	bl	800164c <read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	461a      	mov	r2, r3
 8001864:	211d      	movs	r1, #29
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff27 	bl	80016ba <write_register>
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10e      	bne.n	80018a6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	d901      	bls.n	8001892 <lora_set_tx_power+0x1e>
      level = 15;
 800188e:	230f      	movs	r3, #15
 8001890:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	2109      	movs	r1, #9
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff0b 	bl	80016ba <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80018a4:	e02e      	b.n	8001904 <lora_set_tx_power+0x90>
    if (level > 20) {
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b14      	cmp	r3, #20
 80018aa:	d901      	bls.n	80018b0 <lora_set_tx_power+0x3c>
      level = 20;
 80018ac:	2314      	movs	r3, #20
 80018ae:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d801      	bhi.n	80018ba <lora_set_tx_power+0x46>
      level = 2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	2b11      	cmp	r3, #17
 80018be:	d90c      	bls.n	80018da <lora_set_tx_power+0x66>
      level -= 3;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	3b03      	subs	r3, #3
 80018c4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80018c6:	2287      	movs	r2, #135	; 0x87
 80018c8:	214d      	movs	r1, #77	; 0x4d
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fef5 	bl	80016ba <write_register>
      set_OCP(lora, 140);
 80018d0:	218c      	movs	r1, #140	; 0x8c
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff38 	bl	8001748 <set_OCP>
 80018d8:	e008      	b.n	80018ec <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80018da:	2284      	movs	r2, #132	; 0x84
 80018dc:	214d      	movs	r1, #77	; 0x4d
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff feeb 	bl	80016ba <write_register>
      set_OCP(lora, 97);
 80018e4:	2161      	movs	r1, #97	; 0x61
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff2e 	bl	8001748 <set_OCP>
    level -= 2;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	3b02      	subs	r3, #2
 80018f0:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	2109      	movs	r1, #9
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fedb 	bl	80016ba <write_register>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	04d9      	lsls	r1, r3, #19
 8001926:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800192a:	04d0      	lsls	r0, r2, #19
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <lora_set_frequency+0x88>)
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f7ff f941 	bl	8000bb8 <__aeabi_uldivmod>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800193e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	0c02      	lsrs	r2, r0, #16
 800194c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001950:	0c0b      	lsrs	r3, r1, #16
 8001952:	b2d3      	uxtb	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	2106      	movs	r1, #6
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff feae 	bl	80016ba <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800195e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	0a02      	lsrs	r2, r0, #8
 800196c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001970:	0a0b      	lsrs	r3, r1, #8
 8001972:	b2d3      	uxtb	r3, r2
 8001974:	461a      	mov	r2, r3
 8001976:	2107      	movs	r1, #7
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f7ff fe9e 	bl	80016ba <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800197e:	7c3b      	ldrb	r3, [r7, #16]
 8001980:	461a      	mov	r2, r3
 8001982:	2108      	movs	r1, #8
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fe98 	bl	80016ba <write_register>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	01e84800 	.word	0x01e84800

08001998 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d802      	bhi.n	80019b0 <lora_set_spreading_factor+0x18>
    sf = 6;
 80019aa:	2306      	movs	r3, #6
 80019ac:	70fb      	strb	r3, [r7, #3]
 80019ae:	e004      	b.n	80019ba <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d901      	bls.n	80019ba <lora_set_spreading_factor+0x22>
    sf = 12;
 80019b6:	230c      	movs	r3, #12
 80019b8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	2b06      	cmp	r3, #6
 80019be:	d10a      	bne.n	80019d6 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80019c0:	22c5      	movs	r2, #197	; 0xc5
 80019c2:	2131      	movs	r1, #49	; 0x31
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fe78 	bl	80016ba <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80019ca:	220c      	movs	r2, #12
 80019cc:	2137      	movs	r1, #55	; 0x37
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fe73 	bl	80016ba <write_register>
 80019d4:	e009      	b.n	80019ea <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80019d6:	22c3      	movs	r2, #195	; 0xc3
 80019d8:	2131      	movs	r1, #49	; 0x31
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fe6d 	bl	80016ba <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80019e0:	220a      	movs	r2, #10
 80019e2:	2137      	movs	r1, #55	; 0x37
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fe68 	bl	80016ba <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 80019ea:	211e      	movs	r1, #30
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fe2d 	bl	800164c <read_register>
 80019f2:	4603      	mov	r3, r0
 80019f4:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	211e      	movs	r1, #30
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fe51 	bl	80016ba <write_register>

  set_low_data_rate_optimization(lora);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fecb 	bl	80017b4 <set_low_data_rate_optimization>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe3b 	bl	80016ba <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2121      	movs	r1, #33	; 0x21
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fe31 	bl	80016ba <write_register>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001a68:	2142      	movs	r1, #66	; 0x42
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fdee 	bl	800164c <read_register>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001a9a:	6a3a      	ldr	r2, [r7, #32]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab8:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ffd0 	bl	8001a60 <lora_version>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d001      	beq.n	8001ace <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8001aca:	2304      	movs	r3, #4
 8001acc:	e031      	b.n	8001b32 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff fea0 	bl	8001814 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff fe9d 	bl	8001814 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff ff14 	bl	800190c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8001ae4:	2107      	movs	r1, #7
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff56 	bl	8001998 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001aec:	210a      	movs	r1, #10
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff ff99 	bl	8001a26 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fea5 	bl	8001844 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001afa:	210c      	movs	r1, #12
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff fda5 	bl	800164c <read_register>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001b06:	7dbb      	ldrb	r3, [r7, #22]
 8001b08:	f043 0303 	orr.w	r3, r3, #3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	210c      	movs	r1, #12
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff fdd1 	bl	80016ba <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001b18:	2204      	movs	r2, #4
 8001b1a:	2126      	movs	r1, #38	; 0x26
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff fdcc 	bl	80016ba <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001b22:	2111      	movs	r1, #17
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fea5 	bl	8001874 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fe7e 	bl	800182c <lora_mode_standby>

  return LORA_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	0000      	movs	r0, r0
 8001b3c:	0000      	movs	r0, r0
	...

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b46:	f001 f98f 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4a:	f000 f849 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4e:	f000 f9a5 	bl	8001e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b52:	f000 f983 	bl	8001e5c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b56:	f000 f957 	bl	8001e08 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b5a:	f000 f8ab 	bl	8001cb4 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8001b5e:	f000 f8d7 	bl	8001d10 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001b62:	f000 f8f7 	bl	8001d54 <MX_SPI1_Init>
  MX_TIM10_Init();
 8001b66:	f000 f92b 	bl	8001dc0 <MX_TIM10_Init>
  MX_FATFS_Init();
 8001b6a:	f009 fff5 	bl	800bb58 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001b6e:	f00c f9b5 	bl	800dedc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET	);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2110      	movs	r1, #16
 8001b76:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <main+0x90>)
 8001b78:	f002 f836 	bl	8003be8 <HAL_GPIO_WritePin>
    reset();
 8001b7c:	f7ff fb0e 	bl	800119c <reset>
    //begin(915E6, 17);
    W25qxx_Init();
 8001b80:	f001 f876 	bl	8002c70 <W25qxx_Init>
    lora_sx1276 lora;
    uint8_t res = lora_init(&lora, &hspi1, GPIOA, GPIO_PIN_14, 915E6);
 8001b84:	1d38      	adds	r0, r7, #4
 8001b86:	a310      	add	r3, pc, #64	; (adr r3, 8001bc8 <main+0x88>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	e9cd 2300 	strd	r2, r3, [sp]
 8001b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <main+0x90>)
 8001b96:	490f      	ldr	r1, [pc, #60]	; (8001bd4 <main+0x94>)
 8001b98:	f7ff ff6f 	bl	8001a7a <lora_init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	77fb      	strb	r3, [r7, #31]
    if (res != LORA_OK) {
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <main+0x6c>
        printf("Lora ne podkluchilas T_T\n");
 8001ba6:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <main+0x98>)
 8001ba8:	f00d fbd4 	bl	800f354 <puts>
    }

    uint8_t statuss = MPU9250_Init();
 8001bac:	f7ff fa3e 	bl	800102c <MPU9250_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	77bb      	strb	r3, [r7, #30]
    printf("kabana ivanycha %d", statuss);
 8001bb4:	7fbb      	ldrb	r3, [r7, #30]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <main+0x9c>)
 8001bba:	f00d fb45 	bl	800f248 <iprintf>
    Ds18b20_Init();
 8001bbe:	f7ff fbd1 	bl	8001364 <Ds18b20_Init>
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <main+0x82>
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	3689cac0 	.word	0x3689cac0
 8001bcc:	00000000 	.word	0x00000000
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	2000042c 	.word	0x2000042c
 8001bd8:	0801150c 	.word	0x0801150c
 8001bdc:	08011528 	.word	0x08011528

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	2230      	movs	r2, #48	; 0x30
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00c feb8 	bl	800e964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <SystemClock_Config+0xcc>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <SystemClock_Config+0xcc>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <SystemClock_Config+0xcc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c2c:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c54:	2319      	movs	r3, #25
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001c58:	2390      	movs	r3, #144	; 0x90
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c60:	2303      	movs	r3, #3
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f9e9 	bl	8006040 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c74:	f000 f9d2 	bl	800201c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c78:	230f      	movs	r3, #15
 8001c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2102      	movs	r1, #2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fc4b 	bl	8006530 <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ca0:	f000 f9bc 	bl	800201c <Error_Handler>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cba:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <MX_I2C1_Init+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_I2C1_Init+0x58>)
 8001cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cf2:	f001 ff93 	bl	8003c1c <HAL_I2C_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cfc:	f000 f98e 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000354 	.word	0x20000354
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	000186a0 	.word	0x000186a0

08001d10 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <MX_SDIO_SD_Init+0x40>)
 8001d18:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d32:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200003a8 	.word	0x200003a8
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001da0:	220a      	movs	r2, #10
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001da6:	f005 ff2e 	bl	8007c06 <HAL_SPI_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001db0:	f000 f934 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000042c 	.word	0x2000042c
 8001dbc:	40013000 	.word	0x40013000

08001dc0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <MX_TIM10_Init+0x44>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001dcc:	2247      	movs	r2, #71	; 0x47
 8001dce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ddc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_TIM10_Init+0x40>)
 8001dec:	f006 fcb4 	bl	8008758 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001df6:	f000 f911 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000484 	.word	0x20000484
 8001e04:	40014400 	.word	0x40014400

08001e08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <MX_USART1_UART_Init+0x50>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e40:	f006 fdb4 	bl	80089ac <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e4a:	f000 f8e7 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200004cc 	.word	0x200004cc
 8001e58:	40011000 	.word	0x40011000

08001e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_DMA_Init+0x3c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <MX_DMA_Init+0x3c>)
 8001e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_DMA_Init+0x3c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	203a      	movs	r0, #58	; 0x3a
 8001e84:	f001 f961 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e88:	203a      	movs	r0, #58	; 0x3a
 8001e8a:	f001 f97a 	bl	8003182 <HAL_NVIC_EnableIRQ>

}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a44      	ldr	r2, [pc, #272]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a36      	ldr	r2, [pc, #216]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_GPIO_Init+0x130>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DS18B20_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2128      	movs	r1, #40	; 0x28
 8001f42:	4823      	ldr	r0, [pc, #140]	; (8001fd0 <MX_GPIO_Init+0x134>)
 8001f44:	f001 fe50 	bl	8003be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f244 0110 	movw	r1, #16400	; 0x4010
 8001f4e:	4821      	ldr	r0, [pc, #132]	; (8001fd4 <MX_GPIO_Init+0x138>)
 8001f50:	f001 fe4a 	bl	8003be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8001f54:	2308      	movs	r3, #8
 8001f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <MX_GPIO_Init+0x134>)
 8001f6c:	f001 fca0 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14;
 8001f70:	f244 0310 	movw	r3, #16400	; 0x4010
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <MX_GPIO_Init+0x138>)
 8001f8a:	f001 fc91 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <MX_GPIO_Init+0x134>)
 8001fa6:	f001 fc83 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CS_Pin */
  GPIO_InitStruct.Pin = SDIO_CS_Pin;
 8001faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CS_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_GPIO_Init+0x138>)
 8001fc0:	f001 fc76 	bl	80038b0 <HAL_GPIO_Init>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS((uint8_t*)ptr, len);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4619      	mov	r1, r3
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f00c f834 	bl	800e058 <CDC_Transmit_FS>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <_write+0x40>)
 8001ff6:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <_write+0x40>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d0f1      	beq.n	8001fe4 <_write+0xc>

    if (USBD_FAIL == rc) {
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <_write+0x40>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d101      	bne.n	800200c <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <_write+0x36>
    }
    return len;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000570 	.word	0x20000570

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	e7fe      	b.n	8002024 <Error_Handler+0x8>
	...

08002028 <ONEWIRE_DELAY>:
#include "onewire.h"
#include "ds18b20Config.h"
#include "tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <ONEWIRE_DELAY+0x30>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800203a:	bf00      	nop
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <ONEWIRE_DELAY+0x30>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	429a      	cmp	r2, r3
 8002046:	d9f9      	bls.n	800203c <ONEWIRE_DELAY+0x14>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000484 	.word	0x20000484

0800205c <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	041a      	lsls	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	619a      	str	r2, [r3, #24]
}	
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	889a      	ldrh	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	619a      	str	r2, [r3, #24]
}	
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b088      	sub	sp, #32
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	889b      	ldrh	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f107 020c 	add.w	r2, r7, #12
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fbf6 	bl	80038b0 <HAL_GPIO_Init>
}	
 80020c4:	bf00      	nop
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80020d4:	2311      	movs	r3, #17
 80020d6:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80020dc:	2302      	movs	r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fbdd 	bl	80038b0 <HAL_GPIO_Init>

}
 80020f6:	bf00      	nop
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 800210e:	4812      	ldr	r0, [pc, #72]	; (8002158 <OneWire_Init+0x58>)
 8002110:	f006 fb72 	bl	80087f8 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	88fa      	ldrh	r2, [r7, #6]
 800211e:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff ffd3 	bl	80020cc <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7ff ffa8 	bl	800207c <ONEWIRE_HIGH>
	OneWireDelay(1000);
 800212c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002130:	f000 ff0c 	bl	8002f4c <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ff91 	bl	800205c <ONEWIRE_LOW>
	OneWireDelay(1000);
 800213a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800213e:	f000 ff05 	bl	8002f4c <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ff9a 	bl	800207c <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8002148:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800214c:	f000 fefe 	bl	8002f4c <HAL_Delay>
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000484 	.word	0x20000484

0800215c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff79 	bl	800205c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffae 	bl	80020cc <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8002170:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002174:	f7ff ff58 	bl	8002028 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8002178:	2014      	movs	r0, #20
 800217a:	f7ff ff55 	bl	8002028 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff8b 	bl	800209a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8002184:	2046      	movs	r0, #70	; 0x46
 8002186:	f7ff ff4f 	bl	8002028 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	889b      	ldrh	r3, [r3, #4]
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f001 fd0f 	bl	8003bb8 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 800219e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80021a2:	f7ff ff41 	bl	8002028 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff4a 	bl	800205c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff7f 	bl	80020cc <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f7ff ff2a 	bl	8002028 <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff60 	bl	800209a <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 80021da:	2037      	movs	r0, #55	; 0x37
 80021dc:	f7ff ff24 	bl	8002028 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff5a 	bl	800209a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 80021e6:	e011      	b.n	800220c <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff37 	bl	800205c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff6c 	bl	80020cc <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 80021f4:	2041      	movs	r0, #65	; 0x41
 80021f6:	f7ff ff17 	bl	8002028 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ff4d 	bl	800209a <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8002200:	2005      	movs	r0, #5
 8002202:	f7ff ff11 	bl	8002028 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ff47 	bl	800209a <ONEWIRE_INPUT>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff1b 	bl	800205c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff50 	bl	80020cc <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff fefb 	bl	8002028 <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff31 	bl	800209a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8002238:	200a      	movs	r0, #10
 800223a:	f7ff fef5 	bl	8002028 <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	889b      	ldrh	r3, [r3, #4]
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f001 fcb5 	bl	8003bb8 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8002258:	2032      	movs	r0, #50	; 0x32
 800225a:	f7ff fee5 	bl	8002028 <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002274:	2308      	movs	r3, #8
 8002276:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8002278:	e00a      	b.n	8002290 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff93 	bl	80021b0 <OneWire_WriteBit>
		byte >>= 1;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	73fa      	strb	r2, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ef      	bne.n	800227a <OneWire_WriteByte+0x12>
	}
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80022ac:	2308      	movs	r3, #8
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	2300      	movs	r3, #0
 80022b2:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80022b4:	e00d      	b.n	80022d2 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffa9 	bl	8002214 <OneWire_ReadBit>
 80022c2:	4603      	mov	r3, r0
 80022c4:	01db      	lsls	r3, r3, #7
 80022c6:	b25a      	sxtb	r2, r3
 80022c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	73fa      	strb	r2, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ec      	bne.n	80022b6 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f816 	bl	8002320 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80022f4:	21f0      	movs	r1, #240	; 0xf0
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f825 	bl	8002346 <OneWire_Search>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800230e:	21f0      	movs	r1, #240	; 0xf0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f818 	bl	8002346 <OneWire_Search>
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	71da      	strb	r2, [r3, #7]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7a1b      	ldrb	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 809a 	bne.w	80024a4 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fef3 	bl	800215c <OneWire_Reset>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	71da      	strb	r2, [r3, #7]
			return 0;
 800238e:	2300      	movs	r3, #0
 8002390:	e09b      	b.n	80024ca <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff66 	bl	8002268 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff39 	bl	8002214 <OneWire_ReadBit>
 80023a2:	4603      	mov	r3, r0
 80023a4:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff34 	bl	8002214 <OneWire_ReadBit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80023b0:	7a7b      	ldrb	r3, [r7, #9]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <OneWire_Search+0x76>
 80023b6:	7a3b      	ldrb	r3, [r7, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d064      	beq.n	8002486 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80023bc:	7a7a      	ldrb	r2, [r7, #9]
 80023be:	7a3b      	ldrb	r3, [r7, #8]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d002      	beq.n	80023ca <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80023c4:	7a7b      	ldrb	r3, [r7, #9]
 80023c6:	72bb      	strb	r3, [r7, #10]
 80023c8:	e026      	b.n	8002418 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	799b      	ldrb	r3, [r3, #6]
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d20d      	bcs.n	80023f0 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80023d4:	7b7b      	ldrb	r3, [r7, #13]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	7a5a      	ldrb	r2, [r3, #9]
 80023dc:	7afb      	ldrb	r3, [r7, #11]
 80023de:	4013      	ands	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	72bb      	strb	r3, [r7, #10]
 80023ee:	e008      	b.n	8002402 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	799b      	ldrb	r3, [r3, #6]
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8002402:	7abb      	ldrb	r3, [r7, #10]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 800240c:	7bbb      	ldrb	r3, [r7, #14]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d802      	bhi.n	8002418 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7bba      	ldrb	r2, [r7, #14]
 8002416:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8002418:	7abb      	ldrb	r3, [r7, #10]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10c      	bne.n	8002438 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800241e:	7b7b      	ldrb	r3, [r7, #13]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	7a59      	ldrb	r1, [r3, #9]
 8002426:	7b7b      	ldrb	r3, [r7, #13]
 8002428:	7afa      	ldrb	r2, [r7, #11]
 800242a:	430a      	orrs	r2, r1
 800242c:	b2d1      	uxtb	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	460a      	mov	r2, r1
 8002434:	725a      	strb	r2, [r3, #9]
 8002436:	e010      	b.n	800245a <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002438:	7b7b      	ldrb	r3, [r7, #13]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	7a5b      	ldrb	r3, [r3, #9]
 8002440:	b25a      	sxtb	r2, r3
 8002442:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002446:	43db      	mvns	r3, r3
 8002448:	b25b      	sxtb	r3, r3
 800244a:	4013      	ands	r3, r2
 800244c:	b25a      	sxtb	r2, r3
 800244e:	7b7b      	ldrb	r3, [r7, #13]
 8002450:	b2d1      	uxtb	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	460a      	mov	r2, r1
 8002458:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800245a:	7abb      	ldrb	r3, [r7, #10]
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fea6 	bl	80021b0 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8002470:	7afb      	ldrb	r3, [r7, #11]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8002476:	7b7b      	ldrb	r3, [r7, #13]
 8002478:	3301      	adds	r3, #1
 800247a:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800247c:	2301      	movs	r3, #1
 800247e:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8002480:	7b7b      	ldrb	r3, [r7, #13]
 8002482:	2b07      	cmp	r3, #7
 8002484:	d98a      	bls.n	800239c <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d90b      	bls.n	80024a4 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7bba      	ldrb	r2, [r7, #14]
 8002490:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	799b      	ldrb	r3, [r3, #6]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80024a4:	7b3b      	ldrb	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <OneWire_Search+0x16c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7a5b      	ldrb	r3, [r3, #9]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80024c8:	7b3b      	ldrb	r3, [r7, #12]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80024dc:	2155      	movs	r1, #85	; 0x55
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fec2 	bl	8002268 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e00a      	b.n	8002500 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff feb7 	bl	8002268 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	3301      	adds	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b07      	cmp	r3, #7
 8002504:	d9f1      	bls.n	80024ea <OneWire_SelectWithPointer+0x18>
	}	
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e00a      	b.n	8002536 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	440b      	add	r3, r1
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	440a      	add	r2, r1
 800252c:	7a52      	ldrb	r2, [r2, #9]
 800252e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	3301      	adds	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b07      	cmp	r3, #7
 800253a:	d9f1      	bls.n	8002520 <OneWire_GetFullROM+0x10>
	}
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_MspInit+0x4c>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_MspInit+0x4c>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_I2C_MspInit+0x84>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12b      	bne.n	8002616 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_I2C_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_I2C_MspInit+0x88>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_I2C_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025de:	2312      	movs	r3, #18
 80025e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ea:	2304      	movs	r3, #4
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <HAL_I2C_MspInit+0x8c>)
 80025f6:	f001 f95b 	bl	80038b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_I2C_MspInit+0x88>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <HAL_I2C_MspInit+0x88>)
 8002604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_I2C_MspInit+0x88>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40005400 	.word	0x40005400
 8002624:	40023800 	.word	0x40023800
 8002628:	40020400 	.word	0x40020400

0800262c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_SD_MspInit+0xc0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d14a      	bne.n	80026e4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_SD_MspInit+0xc4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026a2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80026a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026b4:	230c      	movs	r3, #12
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <HAL_SD_MspInit+0xc8>)
 80026c0:	f001 f8f6 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c4:	2304      	movs	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026d4:	230c      	movs	r3, #12
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <HAL_SD_MspInit+0xcc>)
 80026e0:	f001 f8e6 	bl	80038b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020c00 	.word	0x40020c00

080026fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <HAL_SPI_MspInit+0x84>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d12b      	bne.n	8002776 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_SPI_MspInit+0x88>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a17      	ldr	r2, [pc, #92]	; (8002784 <HAL_SPI_MspInit+0x88>)
 8002728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_SPI_MspInit+0x88>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_SPI_MspInit+0x88>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <HAL_SPI_MspInit+0x88>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_SPI_MspInit+0x88>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002756:	23e0      	movs	r3, #224	; 0xe0
 8002758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002766:	2305      	movs	r3, #5
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4805      	ldr	r0, [pc, #20]	; (8002788 <HAL_SPI_MspInit+0x8c>)
 8002772:	f001 f89d 	bl	80038b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40013000 	.word	0x40013000
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000

0800278c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <HAL_TIM_Base_MspInit+0x3c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10d      	bne.n	80027ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_TIM_Base_MspInit+0x40>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_TIM_Base_MspInit+0x40>)
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_TIM_Base_MspInit+0x40>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a35      	ldr	r2, [pc, #212]	; (80028c4 <HAL_UART_MspInit+0xf4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d163      	bne.n	80028ba <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_UART_MspInit+0xf8>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <HAL_UART_MspInit+0xf8>)
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_UART_MspInit+0xf8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_UART_MspInit+0xf8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <HAL_UART_MspInit+0xf8>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_UART_MspInit+0xf8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800282a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800283c:	2307      	movs	r3, #7
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4821      	ldr	r0, [pc, #132]	; (80028cc <HAL_UART_MspInit+0xfc>)
 8002848:	f001 f832 	bl	80038b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_UART_MspInit+0x100>)
 800284e:	4a21      	ldr	r2, [pc, #132]	; (80028d4 <HAL_UART_MspInit+0x104>)
 8002850:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002854:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002858:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_UART_MspInit+0x100>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_UART_MspInit+0x100>)
 800287c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002880:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_UART_MspInit+0x100>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800288e:	4810      	ldr	r0, [pc, #64]	; (80028d0 <HAL_UART_MspInit+0x100>)
 8002890:	f000 fc92 	bl	80031b8 <HAL_DMA_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800289a:	f7ff fbbf 	bl	800201c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <HAL_UART_MspInit+0x100>)
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_UART_MspInit+0x100>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2025      	movs	r0, #37	; 0x25
 80028b0:	f000 fc4b 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028b4:	2025      	movs	r0, #37	; 0x25
 80028b6:	f000 fc64 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40011000 	.word	0x40011000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	20000510 	.word	0x20000510
 80028d4:	40026440 	.word	0x40026440

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <NMI_Handler+0x4>

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler+0x4>

080028ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f000 faf2 	bl	8002f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <USART1_IRQHandler+0x10>)
 8002932:	f006 f889 	bl	8008a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200004cc 	.word	0x200004cc

08002940 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <DMA2_Stream2_IRQHandler+0x10>)
 8002946:	f000 fd77 	bl	8003438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000510 	.word	0x20000510

08002954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <OTG_FS_IRQHandler+0x10>)
 800295a:	f002 fa44 	bl	8004de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20001a98 	.word	0x20001a98

08002968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return 1;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_kill>:

int _kill(int pid, int sig)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002982:	f00b ffc5 	bl	800e910 <__errno>
 8002986:	4603      	mov	r3, r0
 8002988:	2216      	movs	r2, #22
 800298a:	601a      	str	r2, [r3, #0]
  return -1;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_exit>:

void _exit (int status)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ffe7 	bl	8002978 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029aa:	e7fe      	b.n	80029aa <_exit+0x12>

080029ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	e00a      	b.n	80029d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029be:	f3af 8000 	nop.w
 80029c2:	4601      	mov	r1, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	60ba      	str	r2, [r7, #8]
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbf0      	blt.n	80029be <_read+0x12>
  }

  return len;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a0e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_isatty>:

int _isatty(int file)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f00b ff46 	bl	800e910 <__errno>
 8002a84:	4603      	mov	r3, r0
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20018000 	.word	0x20018000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	20000574 	.word	0x20000574
 8002ab8:	200021d8 	.word	0x200021d8

08002abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002aea:	f107 020f 	add.w	r2, r7, #15
 8002aee:	1df9      	adds	r1, r7, #7
 8002af0:	2364      	movs	r3, #100	; 0x64
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2301      	movs	r3, #1
 8002af6:	4804      	ldr	r0, [pc, #16]	; (8002b08 <W25qxx_Spi+0x28>)
 8002af8:	f005 fb5b 	bl	80081b2 <HAL_SPI_TransmitReceive>
	return ret;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000042c 	.word	0x2000042c

08002b0c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2120      	movs	r1, #32
 8002b26:	4813      	ldr	r0, [pc, #76]	; (8002b74 <W25qxx_ReadID+0x68>)
 8002b28:	f001 f85e 	bl	8003be8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002b2c:	209f      	movs	r0, #159	; 0x9f
 8002b2e:	f7ff ffd7 	bl	8002ae0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b32:	20a5      	movs	r0, #165	; 0xa5
 8002b34:	f7ff ffd4 	bl	8002ae0 <W25qxx_Spi>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b3c:	20a5      	movs	r0, #165	; 0xa5
 8002b3e:	f7ff ffcf 	bl	8002ae0 <W25qxx_Spi>
 8002b42:	4603      	mov	r3, r0
 8002b44:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b46:	20a5      	movs	r0, #165	; 0xa5
 8002b48:	f7ff ffca 	bl	8002ae0 <W25qxx_Spi>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002b50:	2201      	movs	r2, #1
 8002b52:	2120      	movs	r1, #32
 8002b54:	4807      	ldr	r0, [pc, #28]	; (8002b74 <W25qxx_ReadID+0x68>)
 8002b56:	f001 f847 	bl	8003be8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4313      	orrs	r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40020800 	.word	0x40020800

08002b78 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2120      	movs	r1, #32
 8002b82:	4816      	ldr	r0, [pc, #88]	; (8002bdc <W25qxx_ReadUniqID+0x64>)
 8002b84:	f001 f830 	bl	8003be8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002b88:	204b      	movs	r0, #75	; 0x4b
 8002b8a:	f7ff ffa9 	bl	8002ae0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	e005      	b.n	8002ba0 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b94:	20a5      	movs	r0, #165	; 0xa5
 8002b96:	f7ff ffa3 	bl	8002ae0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d9f6      	bls.n	8002b94 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	71bb      	strb	r3, [r7, #6]
 8002baa:	e00b      	b.n	8002bc4 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002bac:	79bc      	ldrb	r4, [r7, #6]
 8002bae:	20a5      	movs	r0, #165	; 0xa5
 8002bb0:	f7ff ff96 	bl	8002ae0 <W25qxx_Spi>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <W25qxx_ReadUniqID+0x68>)
 8002bba:	4423      	add	r3, r4
 8002bbc:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	71bb      	strb	r3, [r7, #6]
 8002bc4:	79bb      	ldrb	r3, [r7, #6]
 8002bc6:	2b07      	cmp	r3, #7
 8002bc8:	d9f0      	bls.n	8002bac <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2120      	movs	r1, #32
 8002bce:	4803      	ldr	r0, [pc, #12]	; (8002bdc <W25qxx_ReadUniqID+0x64>)
 8002bd0:	f001 f80a 	bl	8003be8 <HAL_GPIO_WritePin>
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	20000578 	.word	0x20000578

08002be4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	481c      	ldr	r0, [pc, #112]	; (8002c68 <W25qxx_ReadStatusRegister+0x84>)
 8002bf8:	f000 fff6 	bl	8003be8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8002c02:	2005      	movs	r0, #5
 8002c04:	f7ff ff6c 	bl	8002ae0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c08:	20a5      	movs	r0, #165	; 0xa5
 8002c0a:	f7ff ff69 	bl	8002ae0 <W25qxx_Spi>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002c12:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <W25qxx_ReadStatusRegister+0x88>)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002c1a:	e01b      	b.n	8002c54 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d10c      	bne.n	8002c3c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8002c22:	2035      	movs	r0, #53	; 0x35
 8002c24:	f7ff ff5c 	bl	8002ae0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c28:	20a5      	movs	r0, #165	; 0xa5
 8002c2a:	f7ff ff59 	bl	8002ae0 <W25qxx_Spi>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <W25qxx_ReadStatusRegister+0x88>)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002c3a:	e00b      	b.n	8002c54 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002c3c:	2015      	movs	r0, #21
 8002c3e:	f7ff ff4f 	bl	8002ae0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c42:	20a5      	movs	r0, #165	; 0xa5
 8002c44:	f7ff ff4c 	bl	8002ae0 <W25qxx_Spi>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <W25qxx_ReadStatusRegister+0x88>)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	2120      	movs	r1, #32
 8002c58:	4803      	ldr	r0, [pc, #12]	; (8002c68 <W25qxx_ReadStatusRegister+0x84>)
 8002c5a:	f000 ffc5 	bl	8003be8 <HAL_GPIO_WritePin>
	return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	20000578 	.word	0x20000578

08002c70 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <W25qxx_Init+0x19c>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8002c7e:	e002      	b.n	8002c86 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f000 f963 	bl	8002f4c <HAL_Delay>
	while (HAL_GetTick() < 100)
 8002c86:	f000 f955 	bl	8002f34 <HAL_GetTick>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b63      	cmp	r3, #99	; 0x63
 8002c8e:	d9f7      	bls.n	8002c80 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002c90:	2201      	movs	r2, #1
 8002c92:	2120      	movs	r1, #32
 8002c94:	485e      	ldr	r0, [pc, #376]	; (8002e10 <W25qxx_Init+0x1a0>)
 8002c96:	f000 ffa7 	bl	8003be8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	f000 f956 	bl	8002f4c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8002ca0:	f7ff ff34 	bl	8002b0c <W25qxx_ReadID>
 8002ca4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3b11      	subs	r3, #17
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d86c      	bhi.n	8002d8a <W25qxx_Init+0x11a>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <W25qxx_Init+0x48>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002d7d 	.word	0x08002d7d
 8002cbc:	08002d6f 	.word	0x08002d6f
 8002cc0:	08002d61 	.word	0x08002d61
 8002cc4:	08002d53 	.word	0x08002d53
 8002cc8:	08002d45 	.word	0x08002d45
 8002ccc:	08002d37 	.word	0x08002d37
 8002cd0:	08002d29 	.word	0x08002d29
 8002cd4:	08002d19 	.word	0x08002d19
 8002cd8:	08002d09 	.word	0x08002d09
 8002cdc:	08002d8b 	.word	0x08002d8b
 8002ce0:	08002d8b 	.word	0x08002d8b
 8002ce4:	08002d8b 	.word	0x08002d8b
 8002ce8:	08002d8b 	.word	0x08002d8b
 8002cec:	08002d8b 	.word	0x08002d8b
 8002cf0:	08002d8b 	.word	0x08002d8b
 8002cf4:	08002cf9 	.word	0x08002cf9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002cf8:	4b44      	ldr	r3, [pc, #272]	; (8002e0c <W25qxx_Init+0x19c>)
 8002cfa:	220a      	movs	r2, #10
 8002cfc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d04:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8002d06:	e046      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d0a:	2209      	movs	r2, #9
 8002d0c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d14:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002d16:	e03e      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002d18:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002d26:	e036      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002d34:	e02f      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002d36:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d38:	2206      	movs	r2, #6
 8002d3a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002d3c:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002d42:	e028      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d46:	2205      	movs	r2, #5
 8002d48:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002d50:	e021      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002d52:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d54:	2204      	movs	r2, #4
 8002d56:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002d58:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002d5e:	e01a      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d62:	2203      	movs	r2, #3
 8002d64:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d68:	2208      	movs	r2, #8
 8002d6a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002d6c:	e013      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002d6e:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d70:	2202      	movs	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d76:	2204      	movs	r2, #4
 8002d78:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8002d7a:	e00c      	b.n	8002d96 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d84:	2202      	movs	r2, #2
 8002d86:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002d88:	e005      	b.n	8002d96 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e036      	b.n	8002e04 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <W25qxx_Init+0x19c>)
 8002d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <W25qxx_Init+0x19c>)
 8002da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002da4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <W25qxx_Init+0x19c>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dae:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <W25qxx_Init+0x19c>)
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <W25qxx_Init+0x19c>)
 8002db6:	6912      	ldr	r2, [r2, #16]
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dbe:	8952      	ldrh	r2, [r2, #10]
 8002dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dc6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dd0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dd8:	6912      	ldr	r2, [r2, #16]
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <W25qxx_Init+0x19c>)
 8002de2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002de4:	f7ff fec8 	bl	8002b78 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff fefb 	bl	8002be4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002dee:	2002      	movs	r0, #2
 8002df0:	f7ff fef8 	bl	8002be4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f7ff fef5 	bl	8002be4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <W25qxx_Init+0x19c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000578 	.word	0x20000578
 8002e10:	40020800 	.word	0x40020800

08002e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e18:	480d      	ldr	r0, [pc, #52]	; (8002e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1a:	490e      	ldr	r1, [pc, #56]	; (8002e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e30:	4c0b      	ldr	r4, [pc, #44]	; (8002e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e3e:	f7ff fe3d 	bl	8002abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e42:	f00b fd6b 	bl	800e91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e46:	f7fe fe7b 	bl	8001b40 <main>
  bx  lr    
 8002e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e54:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002e58:	080119cc 	.word	0x080119cc
  ldr r2, =_sbss
 8002e5c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002e60:	200021d4 	.word	0x200021d4

08002e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <ADC_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_Init+0x40>)
 8002e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_Init+0x40>)
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_Init+0x40>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 f94f 	bl	8003134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e96:	200f      	movs	r0, #15
 8002e98:	f000 f808 	bl	8002eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7ff fb56 	bl	800254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_InitTick+0x54>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_InitTick+0x58>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f967 	bl	800319e <HAL_SYSTICK_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00e      	b.n	8002ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d80a      	bhi.n	8002ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	f000 f92f 	bl	800314a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <HAL_InitTick+0x5c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000008 	.word	0x20000008
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_IncTick+0x20>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_IncTick+0x24>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HAL_IncTick+0x24>)
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	200005a0 	.word	0x200005a0

08002f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return uwTick;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_GetTick+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	200005a0 	.word	0x200005a0

08002f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff ffee 	bl	8002f34 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d005      	beq.n	8002f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_Delay+0x44>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f72:	bf00      	nop
 8002f74:	f7ff ffde 	bl	8002f34 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d8f7      	bhi.n	8002f74 <HAL_Delay+0x28>
  {
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008

08002f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0307 	and.w	r3, r3, #7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db0b      	blt.n	8003022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <__NVIC_EnableIRQ+0x38>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2001      	movs	r0, #1
 800301a:	fa00 f202 	lsl.w	r2, r0, r2
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db0a      	blt.n	800305e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	490c      	ldr	r1, [pc, #48]	; (8003080 <__NVIC_SetPriority+0x4c>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	440b      	add	r3, r1
 8003058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800305c:	e00a      	b.n	8003074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4908      	ldr	r1, [pc, #32]	; (8003084 <__NVIC_SetPriority+0x50>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	3b04      	subs	r3, #4
 800306c:	0112      	lsls	r2, r2, #4
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	440b      	add	r3, r1
 8003072:	761a      	strb	r2, [r3, #24]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000e100 	.word	0xe000e100
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f1c3 0307 	rsb	r3, r3, #7
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf28      	it	cs
 80030a6:	2304      	movcs	r3, #4
 80030a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d902      	bls.n	80030b8 <NVIC_EncodePriority+0x30>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3b03      	subs	r3, #3
 80030b6:	e000      	b.n	80030ba <NVIC_EncodePriority+0x32>
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	401a      	ands	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43d9      	mvns	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	4313      	orrs	r3, r2
         );
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3724      	adds	r7, #36	; 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003100:	d301      	bcc.n	8003106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003102:	2301      	movs	r3, #1
 8003104:	e00f      	b.n	8003126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <SysTick_Config+0x40>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310e:	210f      	movs	r1, #15
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f7ff ff8e 	bl	8003034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <SysTick_Config+0x40>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <SysTick_Config+0x40>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010

08003134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ff29 	bl	8002f94 <__NVIC_SetPriorityGrouping>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff3e 	bl	8002fdc <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff8e 	bl	8003088 <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5d 	bl	8003034 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff31 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa2 	bl	80030f0 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff feb6 	bl	8002f34 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e099      	b.n	8003308 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f4:	e00f      	b.n	8003216 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031f6:	f7ff fe9d 	bl	8002f34 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b05      	cmp	r3, #5
 8003202:	d908      	bls.n	8003216 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e078      	b.n	8003308 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e8      	bne.n	80031f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_DMA_Init+0x158>)
 8003230:	4013      	ands	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b04      	cmp	r3, #4
 800326e:	d107      	bne.n	8003280 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	4313      	orrs	r3, r2
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0307 	bic.w	r3, r3, #7
 8003296:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d117      	bne.n	80032da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa7b 	bl	80037b8 <DMA_CheckFifoParam>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2240      	movs	r2, #64	; 0x40
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032d6:	2301      	movs	r3, #1
 80032d8:	e016      	b.n	8003308 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa32 	bl	800374c <DMA_CalcBaseAndBitshift>
 80032e8:	4603      	mov	r3, r0
 80032ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	223f      	movs	r2, #63	; 0x3f
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	f010803f 	.word	0xf010803f

08003314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003322:	f7ff fe07 	bl	8002f34 <HAL_GetTick>
 8003326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d008      	beq.n	8003346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e052      	b.n	80033ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0216 	bic.w	r2, r2, #22
 8003354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_DMA_Abort+0x62>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0208 	bic.w	r2, r2, #8
 8003384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003396:	e013      	b.n	80033c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003398:	f7ff fdcc 	bl	8002f34 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d90c      	bls.n	80033c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e015      	b.n	80033ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e4      	bne.n	8003398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	223f      	movs	r2, #63	; 0x3f
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00c      	b.n	800342c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2205      	movs	r2, #5
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003444:	4b8e      	ldr	r3, [pc, #568]	; (8003680 <HAL_DMA_IRQHandler+0x248>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a8e      	ldr	r2, [pc, #568]	; (8003684 <HAL_DMA_IRQHandler+0x24c>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2208      	movs	r2, #8
 8003464:	409a      	lsls	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01a      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0204 	bic.w	r2, r2, #4
 800348a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2208      	movs	r2, #8
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2201      	movs	r2, #1
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2204      	movs	r2, #4
 80034e0:	409a      	lsls	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2204      	movs	r2, #4
 80034fe:	409a      	lsls	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2210      	movs	r2, #16
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d043      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03c      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	2210      	movs	r2, #16
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d018      	beq.n	800357a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d024      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e01f      	b.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e016      	b.n	80035a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0208 	bic.w	r2, r2, #8
 8003596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2220      	movs	r2, #32
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808f 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8087 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2220      	movs	r2, #32
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b05      	cmp	r3, #5
 80035e0:	d136      	bne.n	8003650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0216 	bic.w	r2, r2, #22
 80035f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_DMA_IRQHandler+0x1da>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	223f      	movs	r2, #63	; 0x3f
 8003628:	409a      	lsls	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	2b00      	cmp	r3, #0
 8003644:	d07e      	beq.n	8003744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
        }
        return;
 800364e:	e079      	b.n	8003744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01d      	beq.n	800369a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	2b00      	cmp	r3, #0
 8003672:	d031      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	e02c      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000
 8003684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e01e      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10f      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0210 	bic.w	r2, r2, #16
 80036b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d032      	beq.n	8003746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2205      	movs	r2, #5
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d307      	bcc.n	8003720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f2      	bne.n	8003704 <HAL_DMA_IRQHandler+0x2cc>
 800371e:	e000      	b.n	8003722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
 8003742:	e000      	b.n	8003746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003744:	bf00      	nop
    }
  }
}
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3b10      	subs	r3, #16
 800375c:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <DMA_CalcBaseAndBitshift+0x64>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d909      	bls.n	800378e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	1d1a      	adds	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	659a      	str	r2, [r3, #88]	; 0x58
 800378c:	e007      	b.n	800379e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	aaaaaaab 	.word	0xaaaaaaab
 80037b4:	080115c4 	.word	0x080115c4

080037b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11f      	bne.n	8003812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d856      	bhi.n	8003886 <DMA_CheckFifoParam+0xce>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <DMA_CheckFifoParam+0x28>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003803 	.word	0x08003803
 80037e8:	080037f1 	.word	0x080037f1
 80037ec:	08003887 	.word	0x08003887
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d046      	beq.n	800388a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e043      	b.n	800388a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800380a:	d140      	bne.n	800388e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003810:	e03d      	b.n	800388e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381a:	d121      	bne.n	8003860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d837      	bhi.n	8003892 <DMA_CheckFifoParam+0xda>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <DMA_CheckFifoParam+0x70>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003839 	.word	0x08003839
 800382c:	0800383f 	.word	0x0800383f
 8003830:	08003839 	.word	0x08003839
 8003834:	08003851 	.word	0x08003851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e030      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d025      	beq.n	8003896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384e:	e022      	b.n	8003896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003858:	d11f      	bne.n	800389a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800385e:	e01c      	b.n	800389a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d903      	bls.n	800386e <DMA_CheckFifoParam+0xb6>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d003      	beq.n	8003874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800386c:	e018      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
      break;
 8003872:	e015      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e00b      	b.n	800389e <DMA_CheckFifoParam+0xe6>
      break;
 8003886:	bf00      	nop
 8003888:	e00a      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      break;
 800388a:	bf00      	nop
 800388c:	e008      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      break;
 800388e:	bf00      	nop
 8003890:	e006      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <DMA_CheckFifoParam+0xe8>
      break;
 800389e:	bf00      	nop
    }
  } 
  
  return status; 
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e159      	b.n	8003b80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	f040 8148 	bne.w	8003b7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d005      	beq.n	8003902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d130      	bne.n	8003964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003938:	2201      	movs	r2, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 0201 	and.w	r2, r3, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d017      	beq.n	80039a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d123      	bne.n	80039f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	08da      	lsrs	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3208      	adds	r2, #8
 80039b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	220f      	movs	r2, #15
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	08da      	lsrs	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3208      	adds	r2, #8
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a2 	beq.w	8003b7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b57      	ldr	r3, [pc, #348]	; (8003b98 <HAL_GPIO_Init+0x2e8>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <HAL_GPIO_Init+0x2e8>)
 8003a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a44:	6453      	str	r3, [r2, #68]	; 0x44
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <HAL_GPIO_Init+0x2e8>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a52:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_GPIO_Init+0x2ec>)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a49      	ldr	r2, [pc, #292]	; (8003ba0 <HAL_GPIO_Init+0x2f0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x202>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a48      	ldr	r2, [pc, #288]	; (8003ba4 <HAL_GPIO_Init+0x2f4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x1fe>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a47      	ldr	r2, [pc, #284]	; (8003ba8 <HAL_GPIO_Init+0x2f8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x1fa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a46      	ldr	r2, [pc, #280]	; (8003bac <HAL_GPIO_Init+0x2fc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x1f6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a45      	ldr	r2, [pc, #276]	; (8003bb0 <HAL_GPIO_Init+0x300>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x1f2>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x2ec>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f aea2 	bls.w	80038cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40013c00 	.word	0x40013c00

08003bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	887b      	ldrh	r3, [r7, #2]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e001      	b.n	8003bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	807b      	strh	r3, [r7, #2]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf8:	787b      	ldrb	r3, [r7, #1]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c04:	e003      	b.n	8003c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c06:	887b      	ldrh	r3, [r7, #2]
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	619a      	str	r2, [r3, #24]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e12b      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fe fcaa 	bl	800259c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c80:	f002 fe0e 	bl	80068a0 <HAL_RCC_GetPCLK1Freq>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a81      	ldr	r2, [pc, #516]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d807      	bhi.n	8003ca0 <HAL_I2C_Init+0x84>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a80      	ldr	r2, [pc, #512]	; (8003e94 <HAL_I2C_Init+0x278>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e006      	b.n	8003cae <HAL_I2C_Init+0x92>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	; (8003e98 <HAL_I2C_Init+0x27c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bf94      	ite	ls
 8003ca8:	2301      	movls	r3, #1
 8003caa:	2300      	movhi	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0e7      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a78      	ldr	r2, [pc, #480]	; (8003e9c <HAL_I2C_Init+0x280>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0c9b      	lsrs	r3, r3, #18
 8003cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_I2C_Init+0xd4>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3301      	adds	r3, #1
 8003cee:	e009      	b.n	8003d04 <HAL_I2C_Init+0xe8>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a69      	ldr	r2, [pc, #420]	; (8003ea0 <HAL_I2C_Init+0x284>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	3301      	adds	r3, #1
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	495c      	ldr	r1, [pc, #368]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d819      	bhi.n	8003d58 <HAL_I2C_Init+0x13c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e59      	subs	r1, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d38:	400b      	ands	r3, r1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_I2C_Init+0x138>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	e051      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e04f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <HAL_I2C_Init+0x168>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e012      	b.n	8003daa <HAL_I2C_Init+0x18e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Init+0x196>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_I2C_Init+0x1bc>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	6809      	ldr	r1, [r1, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6911      	ldr	r1, [r2, #16]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	000186a0 	.word	0x000186a0
 8003e94:	001e847f 	.word	0x001e847f
 8003e98:	003d08ff 	.word	0x003d08ff
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	10624dd3 	.word	0x10624dd3

08003ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	817b      	strh	r3, [r7, #10]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb8:	f7ff f83c 	bl	8002f34 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	f040 80e0 	bne.w	800408c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2319      	movs	r3, #25
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4970      	ldr	r1, [pc, #448]	; (8004098 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fc58 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0d3      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x50>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0cc      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d007      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2221      	movs	r2, #33	; 0x21
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2210      	movs	r2, #16
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	893a      	ldrh	r2, [r7, #8]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a50      	ldr	r2, [pc, #320]	; (800409c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fac2 	bl	80044ec <I2C_MasterRequestWrite>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08d      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f88:	e066      	b.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fcd2 	bl	8004938 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e06b      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d11b      	bne.n	800402c <HAL_I2C_Master_Transmit+0x188>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	6a39      	ldr	r1, [r7, #32]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fcc2 	bl	80049ba <I2C_WaitOnBTFFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01a      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d194      	bne.n	8003f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	00100002 	.word	0x00100002
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08c      	sub	sp, #48	; 0x30
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	461a      	mov	r2, r3
 80040ac:	460b      	mov	r3, r1
 80040ae:	817b      	strh	r3, [r7, #10]
 80040b0:	4613      	mov	r3, r2
 80040b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7fe ff3e 	bl	8002f34 <HAL_GetTick>
 80040b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	f040 820b 	bne.w	80044de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2319      	movs	r3, #25
 80040ce:	2201      	movs	r2, #1
 80040d0:	497c      	ldr	r1, [pc, #496]	; (80042c4 <HAL_I2C_Master_Receive+0x224>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fb5a 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
 80040e0:	e1fe      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_I2C_Master_Receive+0x50>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e1f7      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d007      	beq.n	8004116 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004124:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2222      	movs	r2, #34	; 0x22
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2210      	movs	r2, #16
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	893a      	ldrh	r2, [r7, #8]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a5c      	ldr	r2, [pc, #368]	; (80042c8 <HAL_I2C_Master_Receive+0x228>)
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004158:	8979      	ldrh	r1, [r7, #10]
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fa46 	bl	80045f0 <I2C_MasterRequestRead>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1b8      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d113      	bne.n	800419e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e18c      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d11b      	bne.n	80041de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e16c      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d11b      	bne.n	800421e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	e14c      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004244:	e138      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	2b03      	cmp	r3, #3
 800424c:	f200 80f1 	bhi.w	8004432 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	2b01      	cmp	r3, #1
 8004256:	d123      	bne.n	80042a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fbed 	bl	8004a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e139      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800429e:	e10b      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d14e      	bne.n	8004346 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2200      	movs	r2, #0
 80042b0:	4906      	ldr	r1, [pc, #24]	; (80042cc <HAL_I2C_Master_Receive+0x22c>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fa6a 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e10e      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
 80042c2:	bf00      	nop
 80042c4:	00100002 	.word	0x00100002
 80042c8:	ffff0000 	.word	0xffff0000
 80042cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004344:	e0b8      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2200      	movs	r2, #0
 800434e:	4966      	ldr	r1, [pc, #408]	; (80044e8 <HAL_I2C_Master_Receive+0x448>)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fa1b 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0bf      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	494f      	ldr	r1, [pc, #316]	; (80044e8 <HAL_I2C_Master_Receive+0x448>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f9ed 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e091      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004430:	e042      	b.n	80044b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fb00 	bl	8004a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e04c      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d118      	bne.n	80044b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f aec2 	bne.w	8004246 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e000      	b.n	80044e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3728      	adds	r7, #40	; 0x28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	00010004 	.word	0x00010004

080044ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	460b      	mov	r3, r1
 80044fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d006      	beq.n	8004516 <I2C_MasterRequestWrite+0x2a>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d003      	beq.n	8004516 <I2C_MasterRequestWrite+0x2a>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004514:	d108      	bne.n	8004528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e00b      	b.n	8004540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	2b12      	cmp	r3, #18
 800452e:	d107      	bne.n	8004540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f91d 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d103      	bne.n	8004570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e035      	b.n	80045e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d108      	bne.n	8004590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458c:	611a      	str	r2, [r3, #16]
 800458e:	e01b      	b.n	80045c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004590:	897b      	ldrh	r3, [r7, #10]
 8004592:	11db      	asrs	r3, r3, #7
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0306 	and.w	r3, r3, #6
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f063 030f 	orn	r3, r3, #15
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	490e      	ldr	r1, [pc, #56]	; (80045e8 <I2C_MasterRequestWrite+0xfc>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f943 	bl	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e010      	b.n	80045e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4907      	ldr	r1, [pc, #28]	; (80045ec <I2C_MasterRequestWrite+0x100>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f933 	bl	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	00010008 	.word	0x00010008
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	460b      	mov	r3, r1
 80045fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004614:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d006      	beq.n	800462a <I2C_MasterRequestRead+0x3a>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d003      	beq.n	800462a <I2C_MasterRequestRead+0x3a>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004628:	d108      	bne.n	800463c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e00b      	b.n	8004654 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	2b11      	cmp	r3, #17
 8004642:	d107      	bne.n	8004654 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f893 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	d103      	bne.n	8004684 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e079      	b.n	800477c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004690:	d108      	bne.n	80046a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	e05f      	b.n	8004764 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046a4:	897b      	ldrh	r3, [r7, #10]
 80046a6:	11db      	asrs	r3, r3, #7
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f063 030f 	orn	r3, r3, #15
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4930      	ldr	r1, [pc, #192]	; (8004784 <I2C_MasterRequestRead+0x194>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f8b9 	bl	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e054      	b.n	800477c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4929      	ldr	r1, [pc, #164]	; (8004788 <I2C_MasterRequestRead+0x198>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f8a9 	bl	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e044      	b.n	800477c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f831 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e017      	b.n	800477c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	11db      	asrs	r3, r3, #7
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0306 	and.w	r3, r3, #6
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f063 030e 	orn	r3, r3, #14
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4907      	ldr	r1, [pc, #28]	; (8004788 <I2C_MasterRequestRead+0x198>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f865 	bl	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	00010008 	.word	0x00010008
 8004788:	00010002 	.word	0x00010002

0800478c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479c:	e025      	b.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d021      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fe fbc5 	bl	8002f34 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e023      	b.n	8004832 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10d      	bne.n	8004810 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	43da      	mvns	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4013      	ands	r3, r2
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	bf0c      	ite	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	2300      	movne	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	e00c      	b.n	800482a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4013      	ands	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	429a      	cmp	r2, r3
 800482e:	d0b6      	beq.n	800479e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004848:	e051      	b.n	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d123      	bne.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004868:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004872:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e046      	b.n	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d021      	beq.n	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fe fb43 	bl	8002f34 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d116      	bne.n	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e020      	b.n	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d10c      	bne.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	43da      	mvns	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e00b      	b.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	43da      	mvns	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4013      	ands	r3, r2
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d18d      	bne.n	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004944:	e02d      	b.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f8ce 	bl	8004ae8 <I2C_IsAcknowledgeFailed>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e02d      	b.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d021      	beq.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fe fae9 	bl	8002f34 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d116      	bne.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e007      	b.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d1ca      	bne.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049c6:	e02d      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f88d 	bl	8004ae8 <I2C_IsAcknowledgeFailed>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e02d      	b.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d021      	beq.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe faa8 	bl	8002f34 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e007      	b.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d1ca      	bne.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a48:	e042      	b.n	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d119      	bne.n	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0210 	mvn.w	r2, #16
 8004a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e029      	b.n	8004ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8c:	f7fe fa52 	bl	8002f34 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d116      	bne.n	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e007      	b.n	8004ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d1b5      	bne.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d11b      	bne.n	8004b38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b48:	b08f      	sub	sp, #60	; 0x3c
 8004b4a:	af0a      	add	r7, sp, #40	; 0x28
 8004b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e10f      	b.n	8004d78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f009 fbb8 	bl	800e2e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f005 fca5 	bl	800a4e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	687e      	ldr	r6, [r7, #4]
 8004ba4:	466d      	mov	r5, sp
 8004ba6:	f106 0410 	add.w	r4, r6, #16
 8004baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bba:	1d33      	adds	r3, r6, #4
 8004bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f005 fb7c 	bl	800a2bc <USB_CoreInit>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e0d0      	b.n	8004d78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f005 fc93 	bl	800a508 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	e04a      	b.n	8004c7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	333d      	adds	r3, #61	; 0x3d
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	333c      	adds	r3, #60	; 0x3c
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	b298      	uxth	r0, r3
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3344      	adds	r3, #68	; 0x44
 8004c24:	4602      	mov	r2, r0
 8004c26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3340      	adds	r3, #64	; 0x40
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	3348      	adds	r3, #72	; 0x48
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	334c      	adds	r3, #76	; 0x4c
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3354      	adds	r3, #84	; 0x54
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3af      	bcc.n	8004be8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]
 8004c8c:	e044      	b.n	8004d18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ca4:	7bfa      	ldrb	r2, [r7, #15]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	3301      	adds	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	7bfa      	ldrb	r2, [r7, #15]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d3b5      	bcc.n	8004c8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	687e      	ldr	r6, [r7, #4]
 8004d2a:	466d      	mov	r5, sp
 8004d2c:	f106 0410 	add.w	r4, r6, #16
 8004d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d40:	1d33      	adds	r3, r6, #4
 8004d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d44:	6838      	ldr	r0, [r7, #0]
 8004d46:	f005 fc2b 	bl	800a5a0 <USB_DevInit>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e00d      	b.n	8004d78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f006 fd7a 	bl	800b86a <USB_DevDisconnect>

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_PCD_Start+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e020      	b.n	8004dde <HAL_PCD_Start+0x5e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d109      	bne.n	8004dc0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d005      	beq.n	8004dc0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 fb7d 	bl	800a4c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 fd2a 	bl	800b828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004de6:	b590      	push	{r4, r7, lr}
 8004de8:	b08d      	sub	sp, #52	; 0x34
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f006 fde8 	bl	800b9d2 <USB_GetMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 848a 	bne.w	800571e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f006 fd4c 	bl	800b8ac <USB_ReadInterrupts>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8480 	beq.w	800571c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f006 fd39 	bl	800b8ac <USB_ReadInterrupts>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d107      	bne.n	8004e54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f002 0202 	and.w	r2, r2, #2
 8004e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f006 fd27 	bl	800b8ac <USB_ReadInterrupts>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d161      	bne.n	8004f2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0210 	bic.w	r2, r2, #16
 8004e76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	3304      	adds	r3, #4
 8004e96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	0c5b      	lsrs	r3, r3, #17
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d124      	bne.n	8004eee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d035      	beq.n	8004f1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a38      	ldr	r0, [r7, #32]
 8004ec4:	f006 fb5e 	bl	800b584 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ed4:	441a      	add	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee6:	441a      	add	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	621a      	str	r2, [r3, #32]
 8004eec:	e016      	b.n	8004f1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	0c5b      	lsrs	r3, r3, #17
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d110      	bne.n	8004f1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f00:	2208      	movs	r2, #8
 8004f02:	4619      	mov	r1, r3
 8004f04:	6a38      	ldr	r0, [r7, #32]
 8004f06:	f006 fb3d 	bl	800b584 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a1a      	ldr	r2, [r3, #32]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f16:	441a      	add	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0210 	orr.w	r2, r2, #16
 8004f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f006 fcbb 	bl	800b8ac <USB_ReadInterrupts>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f40:	f040 80a7 	bne.w	8005092 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f006 fcc0 	bl	800b8d2 <USB_ReadDevAllOutEpInterrupt>
 8004f52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f54:	e099      	b.n	800508a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 808e 	beq.w	800507e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f006 fce4 	bl	800b93a <USB_ReadDevOutEPInterrupt>
 8004f72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fec2 	bl	8005d1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 ff98 	bl	8005eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d030      	beq.n	8005044 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d109      	bne.n	8005002 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005000:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	78db      	ldrb	r3, [r3, #3]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d108      	bne.n	8005032 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	b2db      	uxtb	r3, r3
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f009 fa61 	bl	800e4f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	2302      	movs	r3, #2
 8005042:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	2320      	movs	r3, #32
 800505e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	461a      	mov	r2, r3
 8005078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800507c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	3301      	adds	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f af62 	bne.w	8004f56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f006 fc08 	bl	800b8ac <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050a6:	f040 80db 	bne.w	8005260 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f006 fc29 	bl	800b906 <USB_ReadDevAllInEpInterrupt>
 80050b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050ba:	e0cd      	b.n	8005258 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80c2 	beq.w	800524c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f006 fc4f 	bl	800b976 <USB_ReadDevInEPInterrupt>
 80050d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d057      	beq.n	8005194 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	2301      	movs	r3, #1
 8005118:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d132      	bne.n	8005188 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	334c      	adds	r3, #76	; 0x4c
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4403      	add	r3, r0
 8005142:	3348      	adds	r3, #72	; 0x48
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4419      	add	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	334c      	adds	r3, #76	; 0x4c
 8005158:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d113      	bne.n	8005188 <HAL_PCD_IRQHandler+0x3a2>
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3354      	adds	r3, #84	; 0x54
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005180:	461a      	mov	r2, r3
 8005182:	2101      	movs	r1, #1
 8005184:	f006 fc56 	bl	800ba34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f009 f92b 	bl	800e3ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	461a      	mov	r2, r3
 80051ac:	2308      	movs	r3, #8
 80051ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	461a      	mov	r2, r3
 80051c8:	2310      	movs	r3, #16
 80051ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d023      	beq.n	800523a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051f4:	6a38      	ldr	r0, [r7, #32]
 80051f6:	f005 fb37 	bl	800a868 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	3338      	adds	r3, #56	; 0x38
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	3304      	adds	r3, #4
 800520c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d108      	bne.n	8005228 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f009 f978 	bl	800e518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	2302      	movs	r3, #2
 8005238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fcdb 	bl	8005c02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	3301      	adds	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	2b00      	cmp	r3, #0
 800525c:	f47f af2e 	bne.w	80050bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f006 fb21 	bl	800b8ac <USB_ReadInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d122      	bne.n	80052bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005290:	2b01      	cmp	r3, #1
 8005292:	d108      	bne.n	80052a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fec2 	bl	8006028 <HAL_PCDEx_LPM_Callback>
 80052a4:	e002      	b.n	80052ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f009 f916 	bl	800e4d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80052ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f006 faf3 	bl	800b8ac <USB_ReadInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d0:	d112      	bne.n	80052f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d102      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f009 f8d2 	bl	800e48c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80052f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f006 fad5 	bl	800b8ac <USB_ReadInterrupts>
 8005302:	4603      	mov	r3, r0
 8005304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530c:	f040 80b7 	bne.w	800547e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2110      	movs	r1, #16
 800532a:	4618      	mov	r0, r3
 800532c:	f005 fa9c 	bl	800a868 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005334:	e046      	b.n	80053c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	461a      	mov	r2, r3
 8005344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005348:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800537c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800539c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	3301      	adds	r3, #1
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d3b3      	bcc.n	8005336 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80053e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fa:	f043 030b 	orr.w	r3, r3, #11
 80053fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005410:	f043 030b 	orr.w	r3, r3, #11
 8005414:	6453      	str	r3, [r2, #68]	; 0x44
 8005416:	e015      	b.n	8005444 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800542a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800542e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543e:	f043 030b 	orr.w	r3, r3, #11
 8005442:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005456:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005468:	461a      	mov	r2, r3
 800546a:	f006 fae3 	bl	800ba34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800547c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f006 fa12 	bl	800b8ac <USB_ReadInterrupts>
 8005488:	4603      	mov	r3, r0
 800548a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	d124      	bne.n	80054de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f006 faa8 	bl	800b9ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f005 fa5d 	bl	800a962 <USB_GetDevSpeed>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681c      	ldr	r4, [r3, #0]
 80054b4:	f001 f9e8 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 80054b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	4620      	mov	r0, r4
 80054c4:	f004 ff5c 	bl	800a380 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f008 ffb6 	bl	800e43a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80054dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f006 f9e2 	bl	800b8ac <USB_ReadInterrupts>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d10a      	bne.n	8005508 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f008 ff93 	bl	800e41e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f002 0208 	and.w	r2, r2, #8
 8005506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f006 f9cd 	bl	800b8ac <USB_ReadInterrupts>
 8005512:	4603      	mov	r3, r0
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d122      	bne.n	8005562 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005528:	2301      	movs	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
 800552c:	e014      	b.n	8005558 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	b2db      	uxtb	r3, r3
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fb27 	bl	8005ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	3301      	adds	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555e:	429a      	cmp	r2, r3
 8005560:	d3e5      	bcc.n	800552e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f006 f9a0 	bl	800b8ac <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005576:	d13b      	bne.n	80055f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005578:	2301      	movs	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	e02b      	b.n	80055d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3340      	adds	r3, #64	; 0x40
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d115      	bne.n	80055d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da12      	bge.n	80055d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	333f      	adds	r3, #63	; 0x3f
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fae8 	bl	8005ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3ce      	bcc.n	800557e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f006 f959 	bl	800b8ac <USB_ReadInterrupts>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005604:	d155      	bne.n	80056b2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005606:	2301      	movs	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	e045      	b.n	8005698 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d12e      	bne.n	8005692 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005634:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005636:	2b00      	cmp	r3, #0
 8005638:	da2b      	bge.n	8005692 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005646:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800564a:	429a      	cmp	r2, r3
 800564c:	d121      	bne.n	8005692 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800568e:	6053      	str	r3, [r2, #4]
            break;
 8005690:	e007      	b.n	80056a2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3b4      	bcc.n	800560c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80056b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f006 f8f8 	bl	800b8ac <USB_ReadInterrupts>
 80056bc:	4603      	mov	r3, r0
 80056be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d10a      	bne.n	80056de <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f008 ff37 	bl	800e53c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f006 f8e2 	bl	800b8ac <USB_ReadInterrupts>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d115      	bne.n	800571e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f008 ff27 	bl	800e558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	e000      	b.n	800571e <HAL_PCD_IRQHandler+0x938>
      return;
 800571c:	bf00      	nop
    }
  }
}
 800571e:	3734      	adds	r7, #52	; 0x34
 8005720:	46bd      	mov	sp, r7
 8005722:	bd90      	pop	{r4, r7, pc}

08005724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_PCD_SetAddress+0x1a>
 800573a:	2302      	movs	r3, #2
 800573c:	e013      	b.n	8005766 <HAL_PCD_SetAddress+0x42>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f006 f840 	bl	800b7dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	4608      	mov	r0, r1
 8005778:	4611      	mov	r1, r2
 800577a:	461a      	mov	r2, r3
 800577c:	4603      	mov	r3, r0
 800577e:	70fb      	strb	r3, [r7, #3]
 8005780:	460b      	mov	r3, r1
 8005782:	803b      	strh	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800578c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	da0f      	bge.n	80057b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 020f 	and.w	r2, r3, #15
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	3338      	adds	r3, #56	; 0x38
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	3304      	adds	r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	705a      	strb	r2, [r3, #1]
 80057b2:	e00f      	b.n	80057d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	4613      	mov	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	3304      	adds	r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057e0:	883a      	ldrh	r2, [r7, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	78ba      	ldrb	r2, [r7, #2]
 80057ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057fe:	78bb      	ldrb	r3, [r7, #2]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d102      	bne.n	800580a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_PCD_EP_Open+0xaa>
 8005814:	2302      	movs	r3, #2
 8005816:	e00e      	b.n	8005836 <HAL_PCD_EP_Open+0xc8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68f9      	ldr	r1, [r7, #12]
 8005826:	4618      	mov	r0, r3
 8005828:	f005 f8c0 	bl	800a9ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005834:	7afb      	ldrb	r3, [r7, #11]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800584a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800584e:	2b00      	cmp	r3, #0
 8005850:	da0f      	bge.n	8005872 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	3338      	adds	r3, #56	; 0x38
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4413      	add	r3, r2
 8005866:	3304      	adds	r3, #4
 8005868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	705a      	strb	r2, [r3, #1]
 8005870:	e00f      	b.n	8005892 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f003 020f 	and.w	r2, r3, #15
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	4413      	add	r3, r2
 8005888:	3304      	adds	r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_PCD_EP_Close+0x6e>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e00e      	b.n	80058ca <HAL_PCD_EP_Close+0x8c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68f9      	ldr	r1, [r7, #12]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f005 f8fe 	bl	800aabc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	460b      	mov	r3, r1
 80058e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	3304      	adds	r3, #4
 80058fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005914:	7afb      	ldrb	r3, [r7, #11]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	b2da      	uxtb	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d102      	bne.n	800592e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800592e:	7afb      	ldrb	r3, [r7, #11]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6979      	ldr	r1, [r7, #20]
 8005946:	f005 fbdd 	bl	800b104 <USB_EP0StartXfer>
 800594a:	e008      	b.n	800595e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	f005 f98b 	bl	800ac74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	460b      	mov	r3, r1
 80059a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	3338      	adds	r3, #56	; 0x38
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2201      	movs	r2, #1
 80059d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059d8:	7afb      	ldrb	r3, [r7, #11]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059f2:	7afb      	ldrb	r3, [r7, #11]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	f005 fb7b 	bl	800b104 <USB_EP0StartXfer>
 8005a0e:	e008      	b.n	8005a22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	f005 f929 	bl	800ac74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d901      	bls.n	8005a4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e050      	b.n	8005aec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da0f      	bge.n	8005a72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	3338      	adds	r3, #56	; 0x38
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	705a      	strb	r2, [r3, #1]
 8005a70:	e00d      	b.n	8005a8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4413      	add	r3, r2
 8005a84:	3304      	adds	r3, #4
 8005a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_PCD_EP_SetStall+0x82>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e01e      	b.n	8005aec <HAL_PCD_EP_SetStall+0xc0>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f005 fdb9 	bl	800b634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	b2d9      	uxtb	r1, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005adc:	461a      	mov	r2, r3
 8005ade:	f005 ffa9 	bl	800ba34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d901      	bls.n	8005b12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e042      	b.n	8005b98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da0f      	bge.n	8005b3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	3338      	adds	r3, #56	; 0x38
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	705a      	strb	r2, [r3, #1]
 8005b38:	e00f      	b.n	8005b5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 020f 	and.w	r2, r3, #15
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_PCD_EP_ClrStall+0x86>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e00e      	b.n	8005b98 <HAL_PCD_EP_ClrStall+0xa4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f005 fdc1 	bl	800b710 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	da0c      	bge.n	8005bce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 020f 	and.w	r2, r3, #15
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	3338      	adds	r3, #56	; 0x38
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3304      	adds	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e00c      	b.n	8005be8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	3304      	adds	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 fbe0 	bl	800b3b4 <USB_EPStopXfer>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08a      	sub	sp, #40	; 0x28
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	3338      	adds	r3, #56	; 0x38
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	3304      	adds	r3, #4
 8005c28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d901      	bls.n	8005c3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06c      	b.n	8005d14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d902      	bls.n	8005c56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3303      	adds	r3, #3
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c5e:	e02b      	b.n	8005cb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d902      	bls.n	8005c7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3303      	adds	r3, #3
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6919      	ldr	r1, [r3, #16]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4603      	mov	r3, r0
 8005c9a:	6978      	ldr	r0, [r7, #20]
 8005c9c:	f005 fc34 	bl	800b508 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	441a      	add	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d809      	bhi.n	8005ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d203      	bcs.n	8005ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1be      	bne.n	8005c60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d811      	bhi.n	8005d12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	6939      	ldr	r1, [r7, #16]
 8005d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0e:	4013      	ands	r3, r2
 8005d10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	333c      	adds	r3, #60	; 0x3c
 8005d34:	3304      	adds	r3, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d17b      	bne.n	8005e4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d015      	beq.n	8005d88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4a61      	ldr	r2, [pc, #388]	; (8005ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	f240 80b9 	bls.w	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80b3 	beq.w	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d84:	6093      	str	r3, [r2, #8]
 8005d86:	e0a7      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2320      	movs	r3, #32
 8005da2:	6093      	str	r3, [r2, #8]
 8005da4:	e098      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 8093 	bne.w	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4a4b      	ldr	r2, [pc, #300]	; (8005ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d90f      	bls.n	8005dda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd6:	6093      	str	r3, [r2, #8]
 8005dd8:	e07e      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d114      	bne.n	8005e3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e24:	461a      	mov	r2, r3
 8005e26:	2101      	movs	r1, #1
 8005e28:	f005 fe04 	bl	800ba34 <USB_EP0_OutStart>
 8005e2c:	e006      	b.n	8005e3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	441a      	add	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f008 fab6 	bl	800e3b4 <HAL_PCD_DataOutStageCallback>
 8005e48:	e046      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d124      	bne.n	8005e9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6e:	6093      	str	r3, [r2, #8]
 8005e70:	e032      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2320      	movs	r3, #32
 8005e8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f008 fa8d 	bl	800e3b4 <HAL_PCD_DataOutStageCallback>
 8005e9a:	e01d      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d114      	bne.n	8005ecc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d108      	bne.n	8005ecc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f005 fdb4 	bl	800ba34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f008 fa6e 	bl	800e3b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	4f54300a 	.word	0x4f54300a
 8005ee8:	4f54310a 	.word	0x4f54310a

08005eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	333c      	adds	r3, #60	; 0x3c
 8005f04:	3304      	adds	r3, #4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d90e      	bls.n	8005f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f008 fa25 	bl	800e390 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d90c      	bls.n	8005f68 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d108      	bne.n	8005f68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f60:	461a      	mov	r2, r3
 8005f62:	2101      	movs	r1, #1
 8005f64:	f005 fd66 	bl	800ba34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	4f54300a 	.word	0x4f54300a

08005f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
 8005f84:	4613      	mov	r3, r2
 8005f86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d107      	bne.n	8005fa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f96:	883b      	ldrh	r3, [r7, #0]
 8005f98:	0419      	lsls	r1, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa4:	e028      	b.n	8005ff8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	e00d      	b.n	8005fd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	3340      	adds	r3, #64	; 0x40
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d3ec      	bcc.n	8005fba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fe0:	883b      	ldrh	r3, [r7, #0]
 8005fe2:	0418      	lsls	r0, r3, #16
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6819      	ldr	r1, [r3, #0]
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4302      	orrs	r2, r0
 8005ff0:	3340      	adds	r3, #64	; 0x40
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e267      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d075      	beq.n	800614a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800605e:	4b88      	ldr	r3, [pc, #544]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b04      	cmp	r3, #4
 8006068:	d00c      	beq.n	8006084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800606a:	4b85      	ldr	r3, [pc, #532]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006072:	2b08      	cmp	r3, #8
 8006074:	d112      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006076:	4b82      	ldr	r3, [pc, #520]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006082:	d10b      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	4b7e      	ldr	r3, [pc, #504]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05b      	beq.n	8006148 <HAL_RCC_OscConfig+0x108>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d157      	bne.n	8006148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e242      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCC_OscConfig+0x74>
 80060a6:	4b76      	ldr	r3, [pc, #472]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a75      	ldr	r2, [pc, #468]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x98>
 80060be:	4b70      	ldr	r3, [pc, #448]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6f      	ldr	r2, [pc, #444]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b6d      	ldr	r3, [pc, #436]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6c      	ldr	r2, [pc, #432]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060d8:	4b69      	ldr	r3, [pc, #420]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a68      	ldr	r2, [pc, #416]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a65      	ldr	r2, [pc, #404]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fc ff1c 	bl	8002f34 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006100:	f7fc ff18 	bl	8002f34 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	; 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e207      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	4b5b      	ldr	r3, [pc, #364]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xc0>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fc ff08 	bl	8002f34 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006128:	f7fc ff04 	bl	8002f34 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	; 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e1f3      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	4b51      	ldr	r3, [pc, #324]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0xe8>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d063      	beq.n	800621e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006156:	4b4a      	ldr	r3, [pc, #296]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800616a:	2b08      	cmp	r3, #8
 800616c:	d11c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b44      	ldr	r3, [pc, #272]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	4b41      	ldr	r3, [pc, #260]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e1c7      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	4b3b      	ldr	r3, [pc, #236]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4937      	ldr	r1, [pc, #220]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	e03a      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061b0:	4b34      	ldr	r3, [pc, #208]	; (8006284 <HAL_RCC_OscConfig+0x244>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fc febd 	bl	8002f34 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061be:	f7fc feb9 	bl	8002f34 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e1a8      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061dc:	4b28      	ldr	r3, [pc, #160]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4925      	ldr	r1, [pc, #148]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	e015      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <HAL_RCC_OscConfig+0x244>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc fe9c 	bl	8002f34 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006200:	f7fc fe98 	bl	8002f34 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e187      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d036      	beq.n	8006298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <HAL_RCC_OscConfig+0x248>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fc fe7c 	bl	8002f34 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006240:	f7fc fe78 	bl	8002f34 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e167      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCC_OscConfig+0x240>)
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x200>
 800625e:	e01b      	b.n	8006298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <HAL_RCC_OscConfig+0x248>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006266:	f7fc fe65 	bl	8002f34 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800626c:	e00e      	b.n	800628c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800626e:	f7fc fe61 	bl	8002f34 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d907      	bls.n	800628c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e150      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 8006280:	40023800 	.word	0x40023800
 8006284:	42470000 	.word	0x42470000
 8006288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800628c:	4b88      	ldr	r3, [pc, #544]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ea      	bne.n	800626e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8097 	beq.w	80063d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062aa:	4b81      	ldr	r3, [pc, #516]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	4b7d      	ldr	r3, [pc, #500]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	4a7c      	ldr	r2, [pc, #496]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c4:	6413      	str	r3, [r2, #64]	; 0x40
 80062c6:	4b7a      	ldr	r3, [pc, #488]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d6:	4b77      	ldr	r3, [pc, #476]	; (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d118      	bne.n	8006314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e2:	4b74      	ldr	r3, [pc, #464]	; (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a73      	ldr	r2, [pc, #460]	; (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ee:	f7fc fe21 	bl	8002f34 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f6:	f7fc fe1d 	bl	8002f34 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e10c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006308:	4b6a      	ldr	r3, [pc, #424]	; (80064b4 <HAL_RCC_OscConfig+0x474>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d106      	bne.n	800632a <HAL_RCC_OscConfig+0x2ea>
 800631c:	4b64      	ldr	r3, [pc, #400]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	4a63      	ldr	r2, [pc, #396]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	6713      	str	r3, [r2, #112]	; 0x70
 8006328:	e01c      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b05      	cmp	r3, #5
 8006330:	d10c      	bne.n	800634c <HAL_RCC_OscConfig+0x30c>
 8006332:	4b5f      	ldr	r3, [pc, #380]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4a5e      	ldr	r2, [pc, #376]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006338:	f043 0304 	orr.w	r3, r3, #4
 800633c:	6713      	str	r3, [r2, #112]	; 0x70
 800633e:	4b5c      	ldr	r3, [pc, #368]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	4a5b      	ldr	r2, [pc, #364]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6713      	str	r3, [r2, #112]	; 0x70
 800634a:	e00b      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800634c:	4b58      	ldr	r3, [pc, #352]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	4a57      	ldr	r2, [pc, #348]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	6713      	str	r3, [r2, #112]	; 0x70
 8006358:	4b55      	ldr	r3, [pc, #340]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	4a54      	ldr	r2, [pc, #336]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 0304 	bic.w	r3, r3, #4
 8006362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fc fde2 	bl	8002f34 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fc fdde 	bl	8002f34 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e0cb      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ee      	beq.n	8006374 <HAL_RCC_OscConfig+0x334>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fc fdcc 	bl	8002f34 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fc fdc8 	bl	8002f34 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0b5      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ee      	bne.n	80063a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c8:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	4a38      	ldr	r2, [pc, #224]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a1 	beq.w	8006520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063de:	4b34      	ldr	r3, [pc, #208]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d05c      	beq.n	80064a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d141      	bne.n	8006476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	4b31      	ldr	r3, [pc, #196]	; (80064b8 <HAL_RCC_OscConfig+0x478>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fc fd9c 	bl	8002f34 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006400:	f7fc fd98 	bl	8002f34 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e087      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	019b      	lsls	r3, r3, #6
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	491b      	ldr	r1, [pc, #108]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006444:	4313      	orrs	r3, r2
 8006446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006448:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <HAL_RCC_OscConfig+0x478>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644e:	f7fc fd71 	bl	8002f34 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006456:	f7fc fd6d 	bl	8002f34 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e05c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x416>
 8006474:	e054      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006476:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <HAL_RCC_OscConfig+0x478>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fc fd5a 	bl	8002f34 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006484:	f7fc fd56 	bl	8002f34 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e045      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x444>
 80064a2:	e03d      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d107      	bne.n	80064bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e038      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064bc:	4b1b      	ldr	r3, [pc, #108]	; (800652c <HAL_RCC_OscConfig+0x4ec>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d028      	beq.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d121      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d11a      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d111      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	3b01      	subs	r3, #1
 8006506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800

08006530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0cc      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006544:	4b68      	ldr	r3, [pc, #416]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90c      	bls.n	800656c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b65      	ldr	r3, [pc, #404]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b63      	ldr	r3, [pc, #396]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0b8      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006584:	4b59      	ldr	r3, [pc, #356]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a58      	ldr	r2, [pc, #352]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800658e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800659c:	4b53      	ldr	r3, [pc, #332]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a52      	ldr	r2, [pc, #328]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b50      	ldr	r3, [pc, #320]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	494d      	ldr	r1, [pc, #308]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b47      	ldr	r3, [pc, #284]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ee:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e06f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fe:	4b3b      	ldr	r3, [pc, #236]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e067      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b37      	ldr	r3, [pc, #220]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4934      	ldr	r1, [pc, #208]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006620:	f7fc fc88 	bl	8002f34 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fc fc84 	bl	8002f34 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	; 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e04f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b2b      	ldr	r3, [pc, #172]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006650:	4b25      	ldr	r3, [pc, #148]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d20c      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e032      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4916      	ldr	r1, [pc, #88]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	490e      	ldr	r1, [pc, #56]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066b6:	f000 f821 	bl	80066fc <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	490a      	ldr	r1, [pc, #40]	; (80066f0 <HAL_RCC_ClockConfig+0x1c0>)
 80066c8:	5ccb      	ldrb	r3, [r1, r3]
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fc fbe8 	bl	8002eac <HAL_InitTick>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40023c00 	.word	0x40023c00
 80066ec:	40023800 	.word	0x40023800
 80066f0:	080115ac 	.word	0x080115ac
 80066f4:	20000000 	.word	0x20000000
 80066f8:	20000004 	.word	0x20000004

080066fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006700:	b090      	sub	sp, #64	; 0x40
 8006702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
 8006708:	2300      	movs	r3, #0
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670c:	2300      	movs	r3, #0
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006714:	4b59      	ldr	r3, [pc, #356]	; (800687c <HAL_RCC_GetSysClockFreq+0x180>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b08      	cmp	r3, #8
 800671e:	d00d      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x40>
 8006720:	2b08      	cmp	r3, #8
 8006722:	f200 80a1 	bhi.w	8006868 <HAL_RCC_GetSysClockFreq+0x16c>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x34>
 800672a:	2b04      	cmp	r3, #4
 800672c:	d003      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0x3a>
 800672e:	e09b      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006730:	4b53      	ldr	r3, [pc, #332]	; (8006880 <HAL_RCC_GetSysClockFreq+0x184>)
 8006732:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006734:	e09b      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006736:	4b53      	ldr	r3, [pc, #332]	; (8006884 <HAL_RCC_GetSysClockFreq+0x188>)
 8006738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800673a:	e098      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800673c:	4b4f      	ldr	r3, [pc, #316]	; (800687c <HAL_RCC_GetSysClockFreq+0x180>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006746:	4b4d      	ldr	r3, [pc, #308]	; (800687c <HAL_RCC_GetSysClockFreq+0x180>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d028      	beq.n	80067a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006752:	4b4a      	ldr	r3, [pc, #296]	; (800687c <HAL_RCC_GetSysClockFreq+0x180>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	2200      	movs	r2, #0
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	627a      	str	r2, [r7, #36]	; 0x24
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006764:	2100      	movs	r1, #0
 8006766:	4b47      	ldr	r3, [pc, #284]	; (8006884 <HAL_RCC_GetSysClockFreq+0x188>)
 8006768:	fb03 f201 	mul.w	r2, r3, r1
 800676c:	2300      	movs	r3, #0
 800676e:	fb00 f303 	mul.w	r3, r0, r3
 8006772:	4413      	add	r3, r2
 8006774:	4a43      	ldr	r2, [pc, #268]	; (8006884 <HAL_RCC_GetSysClockFreq+0x188>)
 8006776:	fba0 1202 	umull	r1, r2, r0, r2
 800677a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800677c:	460a      	mov	r2, r1
 800677e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006782:	4413      	add	r3, r2
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	2200      	movs	r2, #0
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	61fa      	str	r2, [r7, #28]
 800678e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006796:	f7fa fa0f 	bl	8000bb8 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4613      	mov	r3, r2
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a2:	e053      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a4:	4b35      	ldr	r3, [pc, #212]	; (800687c <HAL_RCC_GetSysClockFreq+0x180>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	099b      	lsrs	r3, r3, #6
 80067aa:	2200      	movs	r2, #0
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	617a      	str	r2, [r7, #20]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80067b6:	f04f 0b00 	mov.w	fp, #0
 80067ba:	4652      	mov	r2, sl
 80067bc:	465b      	mov	r3, fp
 80067be:	f04f 0000 	mov.w	r0, #0
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	0159      	lsls	r1, r3, #5
 80067c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067cc:	0150      	lsls	r0, r2, #5
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	ebb2 080a 	subs.w	r8, r2, sl
 80067d6:	eb63 090b 	sbc.w	r9, r3, fp
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80067e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80067ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80067ee:	ebb2 0408 	subs.w	r4, r2, r8
 80067f2:	eb63 0509 	sbc.w	r5, r3, r9
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	00eb      	lsls	r3, r5, #3
 8006800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006804:	00e2      	lsls	r2, r4, #3
 8006806:	4614      	mov	r4, r2
 8006808:	461d      	mov	r5, r3
 800680a:	eb14 030a 	adds.w	r3, r4, sl
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	eb45 030b 	adc.w	r3, r5, fp
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006822:	4629      	mov	r1, r5
 8006824:	028b      	lsls	r3, r1, #10
 8006826:	4621      	mov	r1, r4
 8006828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800682c:	4621      	mov	r1, r4
 800682e:	028a      	lsls	r2, r1, #10
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	2200      	movs	r2, #0
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	60fa      	str	r2, [r7, #12]
 800683c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006840:	f7fa f9ba 	bl	8000bb8 <__aeabi_uldivmod>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4613      	mov	r3, r2
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCC_GetSysClockFreq+0x180>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	3301      	adds	r3, #1
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800685c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	fbb2 f3f3 	udiv	r3, r2, r3
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006866:	e002      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <HAL_RCC_GetSysClockFreq+0x184>)
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800686c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006870:	4618      	mov	r0, r3
 8006872:	3740      	adds	r7, #64	; 0x40
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	00f42400 	.word	0x00f42400
 8006884:	017d7840 	.word	0x017d7840

08006888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800688c:	4b03      	ldr	r3, [pc, #12]	; (800689c <HAL_RCC_GetHCLKFreq+0x14>)
 800688e:	681b      	ldr	r3, [r3, #0]
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20000000 	.word	0x20000000

080068a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068a4:	f7ff fff0 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 80068a8:	4602      	mov	r2, r0
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	0a9b      	lsrs	r3, r3, #10
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	4903      	ldr	r1, [pc, #12]	; (80068c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068b6:	5ccb      	ldrb	r3, [r1, r3]
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068bc:	4618      	mov	r0, r3
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40023800 	.word	0x40023800
 80068c4:	080115bc 	.word	0x080115bc

080068c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068cc:	f7ff ffdc 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0b5b      	lsrs	r3, r3, #13
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4903      	ldr	r1, [pc, #12]	; (80068ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40023800 	.word	0x40023800
 80068ec:	080115bc 	.word	0x080115bc

080068f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e022      	b.n	8006948 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fb fe89 	bl	800262c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2203      	movs	r2, #3
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f814 	bl	8006950 <HAL_SD_InitCard>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e00a      	b.n	8006948 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b08e      	sub	sp, #56	; 0x38
 8006954:	af04      	add	r7, sp, #16
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006958:	2300      	movs	r3, #0
 800695a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006964:	2300      	movs	r3, #0
 8006966:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006968:	2300      	movs	r3, #0
 800696a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800696c:	2376      	movs	r3, #118	; 0x76
 800696e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681d      	ldr	r5, [r3, #0]
 8006974:	466c      	mov	r4, sp
 8006976:	f107 0314 	add.w	r3, r7, #20
 800697a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800697e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006988:	4628      	mov	r0, r5
 800698a:	f002 ff23 	bl	80097d4 <SDIO_Init>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e04f      	b.n	8006a40 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80069a0:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <HAL_SD_InitCard+0xf8>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f002 ff5b 	bl	8009866 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80069b0:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <HAL_SD_InitCard+0xf8>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80069b6:	2002      	movs	r0, #2
 80069b8:	f7fc fac8 	bl	8002f4c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 ff03 	bl	80077c8 <SD_PowerON>
 80069c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e02e      	b.n	8006a40 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fe22 	bl	800762c <SD_InitCard>
 80069e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e01b      	b.n	8006a40 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 ffba 	bl	800998a <SDMMC_CmdBlockLength>
 8006a16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00f      	beq.n	8006a3e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <HAL_SD_InitCard+0xfc>)
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3728      	adds	r7, #40	; 0x28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bdb0      	pop	{r4, r5, r7, pc}
 8006a48:	422580a0 	.word	0x422580a0
 8006a4c:	004005ff 	.word	0x004005ff

08006a50 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b092      	sub	sp, #72	; 0x48
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a5e:	f7fc fa69 	bl	8002f34 <HAL_GetTick>
 8006a62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d107      	bne.n	8006a82 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e1bd      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	f040 81b0 	bne.w	8006df0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d907      	bls.n	8006ab4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e1a4      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d002      	beq.n	8006ad2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	025b      	lsls	r3, r3, #9
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	025b      	lsls	r3, r3, #9
 8006adc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006ade:	2390      	movs	r3, #144	; 0x90
 8006ae0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f107 0214 	add.w	r2, r7, #20
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f002 ff1a 	bl	8009932 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d90a      	bls.n	8006b1a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2202      	movs	r2, #2
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 ff7e 	bl	8009a12 <SDMMC_CmdReadMultiBlock>
 8006b16:	6478      	str	r0, [r7, #68]	; 0x44
 8006b18:	e009      	b.n	8006b2e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b26:	4618      	mov	r0, r3
 8006b28:	f002 ff51 	bl	80099ce <SDMMC_CmdReadSingleBlock>
 8006b2c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d012      	beq.n	8006b5a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a7a      	ldr	r2, [pc, #488]	; (8006d24 <HAL_SD_ReadBlocks+0x2d4>)
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b42:	431a      	orrs	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e151      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006b5e:	e061      	b.n	8006c24 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d03c      	beq.n	8006be8 <HAL_SD_ReadBlocks+0x198>
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d039      	beq.n	8006be8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006b74:	2300      	movs	r3, #0
 8006b76:	643b      	str	r3, [r7, #64]	; 0x40
 8006b78:	e033      	b.n	8006be2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f002 fe53 	bl	800982a <SDIO_ReadFIFO>
 8006b84:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	3301      	adds	r3, #1
 8006b92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	3b01      	subs	r3, #1
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	3b01      	subs	r3, #1
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	0c1b      	lsrs	r3, r3, #16
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	0e1b      	lsrs	r3, r3, #24
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bde:	3301      	adds	r3, #1
 8006be0:	643b      	str	r3, [r7, #64]	; 0x40
 8006be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be4:	2b07      	cmp	r3, #7
 8006be6:	d9c8      	bls.n	8006b7a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006be8:	f7fc f9a4 	bl	8002f34 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d902      	bls.n	8006bfe <HAL_SD_ReadBlocks+0x1ae>
 8006bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d112      	bne.n	8006c24 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a48      	ldr	r2, [pc, #288]	; (8006d24 <HAL_SD_ReadBlocks+0x2d4>)
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0ec      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2a:	f240 332a 	movw	r3, #810	; 0x32a
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d095      	beq.n	8006b60 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d022      	beq.n	8006c88 <HAL_SD_ReadBlocks+0x238>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d91f      	bls.n	8006c88 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d01b      	beq.n	8006c88 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f002 ff43 	bl	8009ae0 <SDMMC_CmdStopTransfer>
 8006c5a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d012      	beq.n	8006c88 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2f      	ldr	r2, [pc, #188]	; (8006d24 <HAL_SD_ReadBlocks+0x2d4>)
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0ba      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d012      	beq.n	8006cbc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <HAL_SD_ReadBlocks+0x2d4>)
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	f043 0208 	orr.w	r2, r3, #8
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e0a0      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <HAL_SD_ReadBlocks+0x2d4>)
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e086      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d063      	beq.n	8006dc6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a08      	ldr	r2, [pc, #32]	; (8006d24 <HAL_SD_ReadBlocks+0x2d4>)
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	f043 0220 	orr.w	r2, r3, #32
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e06c      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
 8006d24:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 fd7c 	bl	800982a <SDIO_ReadFIFO>
 8006d32:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3e:	3301      	adds	r3, #1
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d44:	3b01      	subs	r3, #1
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d54:	3301      	adds	r3, #1
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	3b01      	subs	r3, #1
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	3301      	adds	r3, #1
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	3b01      	subs	r3, #1
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d8a:	f7fc f8d3 	bl	8002f34 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d902      	bls.n	8006da0 <HAL_SD_ReadBlocks+0x350>
 8006d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d112      	bne.n	8006dc6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <HAL_SD_ReadBlocks+0x3b8>)
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e01b      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_SD_ReadBlocks+0x38a>
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1a6      	bne.n	8006d28 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f240 523a 	movw	r2, #1338	; 0x53a
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e006      	b.n	8006dfe <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3748      	adds	r7, #72	; 0x48
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	004005ff 	.word	0x004005ff

08006e0c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b092      	sub	sp, #72	; 0x48
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e1a:	f7fc f88b 	bl	8002f34 <HAL_GetTick>
 8006e1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e166      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	f040 8159 	bne.w	80070fe <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	441a      	add	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d907      	bls.n	8006e70 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e14d      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2203      	movs	r2, #3
 8006e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d002      	beq.n	8006e8e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	025b      	lsls	r3, r3, #9
 8006e98:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e9a:	2390      	movs	r3, #144	; 0x90
 8006e9c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f107 0218 	add.w	r2, r7, #24
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f002 fd3c 	bl	8009932 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d90a      	bls.n	8006ed6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f002 fde4 	bl	8009a9a <SDMMC_CmdWriteMultiBlock>
 8006ed2:	6478      	str	r0, [r7, #68]	; 0x44
 8006ed4:	e009      	b.n	8006eea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2210      	movs	r2, #16
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f002 fdb7 	bl	8009a56 <SDMMC_CmdWriteSingleBlock>
 8006ee8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d012      	beq.n	8006f16 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a87      	ldr	r2, [pc, #540]	; (8007114 <HAL_SD_WriteBlocks+0x308>)
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efe:	431a      	orrs	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e0fa      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006f1a:	e065      	b.n	8006fe8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d040      	beq.n	8006fac <HAL_SD_WriteBlocks+0x1a0>
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d03d      	beq.n	8006fac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	643b      	str	r3, [r7, #64]	; 0x40
 8006f34:	e037      	b.n	8006fa6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3e:	3301      	adds	r3, #1
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f44:	3b01      	subs	r3, #1
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	021a      	lsls	r2, r3, #8
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	3301      	adds	r3, #1
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	041a      	lsls	r2, r3, #16
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6e:	3301      	adds	r3, #1
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f74:	3b01      	subs	r3, #1
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	061a      	lsls	r2, r3, #24
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f86:	3301      	adds	r3, #1
 8006f88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f107 0214 	add.w	r2, r7, #20
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 fc52 	bl	8009844 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa8:	2b07      	cmp	r3, #7
 8006faa:	d9c4      	bls.n	8006f36 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006fac:	f7fb ffc2 	bl	8002f34 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d902      	bls.n	8006fc2 <HAL_SD_WriteBlocks+0x1b6>
 8006fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d112      	bne.n	8006fe8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a53      	ldr	r2, [pc, #332]	; (8007114 <HAL_SD_WriteBlocks+0x308>)
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e091      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fee:	f240 331a 	movw	r3, #794	; 0x31a
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d091      	beq.n	8006f1c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	2b00      	cmp	r3, #0
 8007004:	d022      	beq.n	800704c <HAL_SD_WriteBlocks+0x240>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d91f      	bls.n	800704c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007010:	2b03      	cmp	r3, #3
 8007012:	d01b      	beq.n	800704c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f002 fd61 	bl	8009ae0 <SDMMC_CmdStopTransfer>
 800701e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007022:	2b00      	cmp	r3, #0
 8007024:	d012      	beq.n	800704c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a3a      	ldr	r2, [pc, #232]	; (8007114 <HAL_SD_WriteBlocks+0x308>)
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e05f      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d012      	beq.n	8007080 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <HAL_SD_WriteBlocks+0x308>)
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f043 0208 	orr.w	r2, r3, #8
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e045      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d012      	beq.n	80070b4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a20      	ldr	r2, [pc, #128]	; (8007114 <HAL_SD_WriteBlocks+0x308>)
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f043 0202 	orr.w	r2, r3, #2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e02b      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d012      	beq.n	80070e8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a13      	ldr	r2, [pc, #76]	; (8007114 <HAL_SD_WriteBlocks+0x308>)
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f043 0210 	orr.w	r2, r3, #16
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e011      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e006      	b.n	800710c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3748      	adds	r7, #72	; 0x48
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	004005ff 	.word	0x004005ff

08007118 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007126:	0f9b      	lsrs	r3, r3, #30
 8007128:	b2da      	uxtb	r2, r3
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007132:	0e9b      	lsrs	r3, r3, #26
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	b2da      	uxtb	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007144:	0e1b      	lsrs	r3, r3, #24
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	b2da      	uxtb	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	b2da      	uxtb	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b2da      	uxtb	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716e:	b2da      	uxtb	r2, r3
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007178:	0d1b      	lsrs	r3, r3, #20
 800717a:	b29a      	uxth	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	b2da      	uxtb	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007196:	0bdb      	lsrs	r3, r3, #15
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a8:	0b9b      	lsrs	r3, r3, #14
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ba:	0b5b      	lsrs	r3, r3, #13
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071cc:	0b1b      	lsrs	r3, r3, #12
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2200      	movs	r2, #0
 80071de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d163      	bne.n	80072b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ec:	009a      	lsls	r2, r3, #2
 80071ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071f2:	4013      	ands	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80071f8:	0f92      	lsrs	r2, r2, #30
 80071fa:	431a      	orrs	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007204:	0edb      	lsrs	r3, r3, #27
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	b2da      	uxtb	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007216:	0e1b      	lsrs	r3, r3, #24
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007228:	0d5b      	lsrs	r3, r3, #21
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	b2da      	uxtb	r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723a:	0c9b      	lsrs	r3, r3, #18
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	b2da      	uxtb	r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800724c:	0bdb      	lsrs	r3, r3, #15
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	b2da      	uxtb	r2, r3
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	7e1b      	ldrb	r3, [r3, #24]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	3302      	adds	r3, #2
 8007270:	2201      	movs	r2, #1
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800727a:	fb03 f202 	mul.w	r2, r3, r2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	7a1b      	ldrb	r3, [r3, #8]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800729c:	0a52      	lsrs	r2, r2, #9
 800729e:	fb03 f202 	mul.w	r2, r3, r2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ac:	661a      	str	r2, [r3, #96]	; 0x60
 80072ae:	e031      	b.n	8007314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d11d      	bne.n	80072f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c6:	0c1b      	lsrs	r3, r3, #16
 80072c8:	431a      	orrs	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	3301      	adds	r3, #1
 80072d4:	029a      	lsls	r2, r3, #10
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	661a      	str	r2, [r3, #96]	; 0x60
 80072f2:	e00f      	b.n	8007314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a58      	ldr	r2, [pc, #352]	; (800745c <HAL_SD_GetCardCSD+0x344>)
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e09d      	b.n	8007450 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007318:	0b9b      	lsrs	r3, r3, #14
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732a:	09db      	lsrs	r3, r3, #7
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	b2da      	uxtb	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007342:	b2da      	uxtb	r2, r3
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	0fdb      	lsrs	r3, r3, #31
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	0f5b      	lsrs	r3, r3, #29
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	b2da      	uxtb	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	0e9b      	lsrs	r3, r3, #26
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	b2da      	uxtb	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	0d9b      	lsrs	r3, r3, #22
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	b2da      	uxtb	r2, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738e:	0d5b      	lsrs	r3, r3, #21
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	0bdb      	lsrs	r3, r3, #15
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	0b9b      	lsrs	r3, r3, #14
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	0b5b      	lsrs	r3, r3, #13
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fa:	0b1b      	lsrs	r3, r3, #12
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	0a9b      	lsrs	r3, r3, #10
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	b2da      	uxtb	r2, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	b2da      	uxtb	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743e:	b2da      	uxtb	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	004005ff 	.word	0x004005ff

08007460 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b08e      	sub	sp, #56	; 0x38
 80074bc:	af04      	add	r7, sp, #16
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2203      	movs	r2, #3
 80074cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d02e      	beq.n	8007536 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074de:	d106      	bne.n	80074ee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
 80074ec:	e029      	b.n	8007542 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f4:	d10a      	bne.n	800750c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa1c 	bl	8007934 <SD_WideBus_Enable>
 80074fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	639a      	str	r2, [r3, #56]	; 0x38
 800750a:	e01a      	b.n	8007542 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa59 	bl	80079ca <SD_WideBus_Disable>
 8007518:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
 8007526:	e00c      	b.n	8007542 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	639a      	str	r2, [r3, #56]	; 0x38
 8007534:	e005      	b.n	8007542 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00b      	beq.n	8007562 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a26      	ldr	r2, [pc, #152]	; (80075e8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007560:	e01f      	b.n	80075a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681d      	ldr	r5, [r3, #0]
 8007588:	466c      	mov	r4, sp
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007596:	f107 0308 	add.w	r3, r7, #8
 800759a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800759c:	4628      	mov	r0, r5
 800759e:	f002 f919 	bl	80097d4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075aa:	4618      	mov	r0, r3
 80075ac:	f002 f9ed 	bl	800998a <SDMMC_CmdBlockLength>
 80075b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00c      	beq.n	80075d2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <HAL_SD_ConfigWideBusOperation+0x130>)
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80075da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3728      	adds	r7, #40	; 0x28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bdb0      	pop	{r4, r5, r7, pc}
 80075e6:	bf00      	nop
 80075e8:	004005ff 	.word	0x004005ff

080075ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80075f8:	f107 030c 	add.w	r3, r7, #12
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f970 	bl	80078e4 <SD_SendStatus>
 8007604:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007622:	693b      	ldr	r3, [r7, #16]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800762c:	b5b0      	push	{r4, r5, r7, lr}
 800762e:	b094      	sub	sp, #80	; 0x50
 8007630:	af04      	add	r7, sp, #16
 8007632:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007634:	2301      	movs	r3, #1
 8007636:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f002 f920 	bl	8009882 <SDIO_GetPowerState>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007648:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800764c:	e0b8      	b.n	80077c0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	2b03      	cmp	r3, #3
 8007654:	d02f      	beq.n	80076b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f002 fb4a 	bl	8009cf4 <SDMMC_CmdSendCID>
 8007660:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <SD_InitCard+0x40>
    {
      return errorstate;
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	e0a9      	b.n	80077c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f002 f94a 	bl	800990c <SDIO_GetResponse>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2104      	movs	r1, #4
 8007684:	4618      	mov	r0, r3
 8007686:	f002 f941 	bl	800990c <SDIO_GetResponse>
 800768a:	4602      	mov	r2, r0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2108      	movs	r1, #8
 8007696:	4618      	mov	r0, r3
 8007698:	f002 f938 	bl	800990c <SDIO_GetResponse>
 800769c:	4602      	mov	r2, r0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	210c      	movs	r1, #12
 80076a8:	4618      	mov	r0, r3
 80076aa:	f002 f92f 	bl	800990c <SDIO_GetResponse>
 80076ae:	4602      	mov	r2, r0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d00d      	beq.n	80076da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f107 020e 	add.w	r2, r7, #14
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f002 fb50 	bl	8009d6e <SDMMC_CmdSetRelAdd>
 80076ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <SD_InitCard+0xae>
    {
      return errorstate;
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	e072      	b.n	80077c0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d036      	beq.n	8007750 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80076e2:	89fb      	ldrh	r3, [r7, #14]
 80076e4:	461a      	mov	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f002 fb1a 	bl	8009d30 <SDMMC_CmdSendCSD>
 80076fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007706:	e05b      	b.n	80077c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f002 f8fc 	bl	800990c <SDIO_GetResponse>
 8007714:	4602      	mov	r2, r0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2104      	movs	r1, #4
 8007720:	4618      	mov	r0, r3
 8007722:	f002 f8f3 	bl	800990c <SDIO_GetResponse>
 8007726:	4602      	mov	r2, r0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2108      	movs	r1, #8
 8007732:	4618      	mov	r0, r3
 8007734:	f002 f8ea 	bl	800990c <SDIO_GetResponse>
 8007738:	4602      	mov	r2, r0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	210c      	movs	r1, #12
 8007744:	4618      	mov	r0, r3
 8007746:	f002 f8e1 	bl	800990c <SDIO_GetResponse>
 800774a:	4602      	mov	r2, r0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2104      	movs	r1, #4
 8007756:	4618      	mov	r0, r3
 8007758:	f002 f8d8 	bl	800990c <SDIO_GetResponse>
 800775c:	4603      	mov	r3, r0
 800775e:	0d1a      	lsrs	r2, r3, #20
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007764:	f107 0310 	add.w	r3, r7, #16
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fcd4 	bl	8007118 <HAL_SD_GetCardCSD>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007776:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800777a:	e021      	b.n	80077c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	2200      	movs	r2, #0
 8007788:	461c      	mov	r4, r3
 800778a:	4615      	mov	r5, r2
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	4608      	mov	r0, r1
 8007792:	f002 f9c7 	bl	8009b24 <SDMMC_CmdSelDesel>
 8007796:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <SD_InitCard+0x176>
  {
    return errorstate;
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	e00e      	b.n	80077c0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	466c      	mov	r4, sp
 80077aa:	f103 0210 	add.w	r2, r3, #16
 80077ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80077b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077b4:	3304      	adds	r3, #4
 80077b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077b8:	4628      	mov	r0, r5
 80077ba:	f002 f80b 	bl	80097d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3740      	adds	r7, #64	; 0x40
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bdb0      	pop	{r4, r5, r7, pc}

080077c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f002 f9c2 	bl	8009b6a <SDMMC_CmdGoIdleState>
 80077e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e072      	b.n	80078d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 f9d5 	bl	8009ba6 <SDMMC_CmdOperCond>
 80077fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00d      	beq.n	8007820 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f002 f9ab 	bl	8009b6a <SDMMC_CmdGoIdleState>
 8007814:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <SD_PowerON+0x5e>
    {
      return errorstate;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e05b      	b.n	80078d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782a:	2b01      	cmp	r3, #1
 800782c:	d137      	bne.n	800789e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f002 f9d5 	bl	8009be4 <SDMMC_CmdAppCommand>
 800783a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d02d      	beq.n	800789e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007846:	e047      	b.n	80078d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f002 f9c8 	bl	8009be4 <SDMMC_CmdAppCommand>
 8007854:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <SD_PowerON+0x98>
    {
      return errorstate;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	e03b      	b.n	80078d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	491e      	ldr	r1, [pc, #120]	; (80078e0 <SD_PowerON+0x118>)
 8007866:	4618      	mov	r0, r3
 8007868:	f002 f9de 	bl	8009c28 <SDMMC_CmdAppOperCommand>
 800786c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007878:	e02e      	b.n	80078d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f002 f843 	bl	800990c <SDIO_GetResponse>
 8007886:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	0fdb      	lsrs	r3, r3, #31
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <SD_PowerON+0xcc>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <SD_PowerON+0xce>
 8007894:	2300      	movs	r3, #0
 8007896:	613b      	str	r3, [r7, #16]

    count++;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3301      	adds	r3, #1
 800789c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d802      	bhi.n	80078ae <SD_PowerON+0xe6>
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0cc      	beq.n	8007848 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d902      	bls.n	80078be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80078b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078bc:	e00c      	b.n	80078d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	645a      	str	r2, [r3, #68]	; 0x44
 80078ce:	e002      	b.n	80078d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	c1100000 	.word	0xc1100000

080078e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80078f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078f8:	e018      	b.n	800792c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f002 fa52 	bl	8009db0 <SDMMC_CmdSendStatus>
 800790c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	e009      	b.n	800792c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fff4 	bl	800990c <SDIO_GetResponse>
 8007924:	4602      	mov	r2, r0
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2100      	movs	r1, #0
 800794a:	4618      	mov	r0, r3
 800794c:	f001 ffde 	bl	800990c <SDIO_GetResponse>
 8007950:	4603      	mov	r3, r0
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800795a:	d102      	bne.n	8007962 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800795c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007960:	e02f      	b.n	80079c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f879 	bl	8007a60 <SD_FindSCR>
 800796e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	e023      	b.n	80079c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01c      	beq.n	80079be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798c:	041b      	lsls	r3, r3, #16
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f002 f927 	bl	8009be4 <SDMMC_CmdAppCommand>
 8007996:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	e00f      	b.n	80079c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2102      	movs	r1, #2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f002 f960 	bl	8009c6e <SDMMC_CmdBusWidth>
 80079ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	e003      	b.n	80079c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e001      	b.n	80079c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b086      	sub	sp, #24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	2300      	movs	r3, #0
 80079d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 ff93 	bl	800990c <SDIO_GetResponse>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079f0:	d102      	bne.n	80079f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079f6:	e02f      	b.n	8007a58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079f8:	f107 030c 	add.w	r3, r7, #12
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f82e 	bl	8007a60 <SD_FindSCR>
 8007a04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	e023      	b.n	8007a58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01c      	beq.n	8007a54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	041b      	lsls	r3, r3, #16
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f002 f8dc 	bl	8009be4 <SDMMC_CmdAppCommand>
 8007a2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	e00f      	b.n	8007a58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f002 f915 	bl	8009c6e <SDMMC_CmdBusWidth>
 8007a44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	e003      	b.n	8007a58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e001      	b.n	8007a58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007a60:	b590      	push	{r4, r7, lr}
 8007a62:	b08f      	sub	sp, #60	; 0x3c
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a6a:	f7fb fa63 	bl	8002f34 <HAL_GetTick>
 8007a6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007a74:	2300      	movs	r3, #0
 8007a76:	60bb      	str	r3, [r7, #8]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2108      	movs	r1, #8
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 ff7f 	bl	800998a <SDMMC_CmdBlockLength>
 8007a8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	e0b2      	b.n	8007bfe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f002 f89d 	bl	8009be4 <SDMMC_CmdAppCommand>
 8007aaa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	e0a3      	b.n	8007bfe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007abc:	2308      	movs	r3, #8
 8007abe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007ac0:	2330      	movs	r3, #48	; 0x30
 8007ac2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f107 0210 	add.w	r2, r7, #16
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 ff29 	bl	8009932 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f002 f8e4 	bl	8009cb2 <SDMMC_CmdSendSCR>
 8007aea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d02a      	beq.n	8007b48 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	e083      	b.n	8007bfe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00f      	beq.n	8007b24 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6819      	ldr	r1, [r3, #0]
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	f107 0208 	add.w	r2, r7, #8
 8007b10:	18d4      	adds	r4, r2, r3
 8007b12:	4608      	mov	r0, r1
 8007b14:	f001 fe89 	bl	800982a <SDIO_ReadFIFO>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	6023      	str	r3, [r4, #0]
      index++;
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1e:	3301      	adds	r3, #1
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
 8007b22:	e006      	b.n	8007b32 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d012      	beq.n	8007b58 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b32:	f7fb f9ff 	bl	8002f34 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b40:	d102      	bne.n	8007b48 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007b42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b46:	e05a      	b.n	8007bfe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0cf      	beq.n	8007af6 <SD_FindSCR+0x96>
 8007b56:	e000      	b.n	8007b5a <SD_FindSCR+0xfa>
      break;
 8007b58:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007b70:	2308      	movs	r3, #8
 8007b72:	e044      	b.n	8007bfe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2202      	movs	r2, #2
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e037      	b.n	8007bfe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ba4:	2320      	movs	r3, #32
 8007ba6:	e02a      	b.n	8007bfe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	061a      	lsls	r2, r3, #24
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bbe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007bc8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	0e1b      	lsrs	r3, r3, #24
 8007bce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	601a      	str	r2, [r3, #0]
    scr++;
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	061a      	lsls	r2, r3, #24
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007be6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	0a1b      	lsrs	r3, r3, #8
 8007bec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007bf0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	0e1b      	lsrs	r3, r3, #24
 8007bf6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	373c      	adds	r7, #60	; 0x3c
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd90      	pop	{r4, r7, pc}

08007c06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e07b      	b.n	8007d10 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d108      	bne.n	8007c32 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c28:	d009      	beq.n	8007c3e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	61da      	str	r2, [r3, #28]
 8007c30:	e005      	b.n	8007c3e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fa fd4f 	bl	80026fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	ea42 0103 	orr.w	r1, r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	0c1b      	lsrs	r3, r3, #16
 8007cdc:	f003 0104 	and.w	r1, r3, #4
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	f003 0210 	and.w	r2, r3, #16
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69da      	ldr	r2, [r3, #28]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_SPI_Transmit+0x22>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e126      	b.n	8007f88 <HAL_SPI_Transmit+0x270>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d42:	f7fb f8f7 	bl	8002f34 <HAL_GetTick>
 8007d46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d002      	beq.n	8007d5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d5c:	e10b      	b.n	8007f76 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <HAL_SPI_Transmit+0x52>
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d6e:	e102      	b.n	8007f76 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2203      	movs	r2, #3
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db6:	d10f      	bne.n	8007dd8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d007      	beq.n	8007df6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfe:	d14b      	bne.n	8007e98 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <HAL_SPI_Transmit+0xf6>
 8007e08:	8afb      	ldrh	r3, [r7, #22]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d13e      	bne.n	8007e8c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	881a      	ldrh	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	1c9a      	adds	r2, r3, #2
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e32:	e02b      	b.n	8007e8c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d112      	bne.n	8007e68 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	881a      	ldrh	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	1c9a      	adds	r2, r3, #2
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e66:	e011      	b.n	8007e8c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e68:	f7fb f864 	bl	8002f34 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d803      	bhi.n	8007e80 <HAL_SPI_Transmit+0x168>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d102      	bne.n	8007e86 <HAL_SPI_Transmit+0x16e>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e8a:	e074      	b.n	8007f76 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1ce      	bne.n	8007e34 <HAL_SPI_Transmit+0x11c>
 8007e96:	e04c      	b.n	8007f32 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_SPI_Transmit+0x18e>
 8007ea0:	8afb      	ldrh	r3, [r7, #22]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d140      	bne.n	8007f28 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ecc:	e02c      	b.n	8007f28 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d113      	bne.n	8007f04 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f02:	e011      	b.n	8007f28 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f04:	f7fb f816 	bl	8002f34 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d803      	bhi.n	8007f1c <HAL_SPI_Transmit+0x204>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d102      	bne.n	8007f22 <HAL_SPI_Transmit+0x20a>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f26:	e026      	b.n	8007f76 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1cd      	bne.n	8007ece <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fbcc 	bl	80086d4 <SPI_EndRxTxTransaction>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e000      	b.n	8007f76 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007f74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fac:	d112      	bne.n	8007fd4 <HAL_SPI_Receive+0x44>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10e      	bne.n	8007fd4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	68b9      	ldr	r1, [r7, #8]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f8f1 	bl	80081b2 <HAL_SPI_TransmitReceive>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	e0ea      	b.n	80081aa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <HAL_SPI_Receive+0x52>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e0e3      	b.n	80081aa <HAL_SPI_Receive+0x21a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fea:	f7fa ffa3 	bl	8002f34 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d002      	beq.n	8008002 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008000:	e0ca      	b.n	8008198 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_SPI_Receive+0x7e>
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008012:	e0c1      	b.n	8008198 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2204      	movs	r2, #4
 8008018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	88fa      	ldrh	r2, [r7, #6]
 8008032:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805a:	d10f      	bne.n	800807c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800807a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d007      	beq.n	800809a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008098:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d162      	bne.n	8008168 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80080a2:	e02e      	b.n	8008102 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d115      	bne.n	80080de <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f103 020c 	add.w	r2, r3, #12
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080dc:	e011      	b.n	8008102 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080de:	f7fa ff29 	bl	8002f34 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d803      	bhi.n	80080f6 <HAL_SPI_Receive+0x166>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d102      	bne.n	80080fc <HAL_SPI_Receive+0x16c>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008100:	e04a      	b.n	8008198 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1cb      	bne.n	80080a4 <HAL_SPI_Receive+0x114>
 800810c:	e031      	b.n	8008172 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b01      	cmp	r3, #1
 800811a:	d113      	bne.n	8008144 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	b292      	uxth	r2, r2
 8008128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	1c9a      	adds	r2, r3, #2
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008142:	e011      	b.n	8008168 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008144:	f7fa fef6 	bl	8002f34 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d803      	bhi.n	800815c <HAL_SPI_Receive+0x1cc>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815a:	d102      	bne.n	8008162 <HAL_SPI_Receive+0x1d2>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008166:	e017      	b.n	8008198 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1cd      	bne.n	800810e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fa46 	bl	8008608 <SPI_EndRxTransaction>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2220      	movs	r2, #32
 8008186:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
 8008194:	e000      	b.n	8008198 <HAL_SPI_Receive+0x208>
  }

error :
 8008196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b08c      	sub	sp, #48	; 0x30
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081c0:	2301      	movs	r3, #1
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_SPI_TransmitReceive+0x26>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e18a      	b.n	80084ee <HAL_SPI_TransmitReceive+0x33c>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081e0:	f7fa fea8 	bl	8002f34 <HAL_GetTick>
 80081e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081f6:	887b      	ldrh	r3, [r7, #2]
 80081f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d00f      	beq.n	8008222 <HAL_SPI_TransmitReceive+0x70>
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008208:	d107      	bne.n	800821a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <HAL_SPI_TransmitReceive+0x68>
 8008212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008216:	2b04      	cmp	r3, #4
 8008218:	d003      	beq.n	8008222 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800821a:	2302      	movs	r3, #2
 800821c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008220:	e15b      	b.n	80084da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <HAL_SPI_TransmitReceive+0x82>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_SPI_TransmitReceive+0x82>
 800822e:	887b      	ldrh	r3, [r7, #2]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d103      	bne.n	800823c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800823a:	e14e      	b.n	80084da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b04      	cmp	r3, #4
 8008246:	d003      	beq.n	8008250 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2205      	movs	r2, #5
 800824c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	887a      	ldrh	r2, [r7, #2]
 8008260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	887a      	ldrh	r2, [r7, #2]
 8008266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	887a      	ldrh	r2, [r7, #2]
 8008272:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	887a      	ldrh	r2, [r7, #2]
 8008278:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d007      	beq.n	80082a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ac:	d178      	bne.n	80083a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_SPI_TransmitReceive+0x10a>
 80082b6:	8b7b      	ldrh	r3, [r7, #26]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d166      	bne.n	800838a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	881a      	ldrh	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	1c9a      	adds	r2, r3, #2
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082e0:	e053      	b.n	800838a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d11b      	bne.n	8008328 <HAL_SPI_TransmitReceive+0x176>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d016      	beq.n	8008328 <HAL_SPI_TransmitReceive+0x176>
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d113      	bne.n	8008328 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	881a      	ldrh	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	1c9a      	adds	r2, r3, #2
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	d119      	bne.n	800836a <HAL_SPI_TransmitReceive+0x1b8>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833a:	b29b      	uxth	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d014      	beq.n	800836a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	b292      	uxth	r2, r2
 800834c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	1c9a      	adds	r2, r3, #2
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008366:	2301      	movs	r3, #1
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800836a:	f7fa fde3 	bl	8002f34 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008376:	429a      	cmp	r2, r3
 8008378:	d807      	bhi.n	800838a <HAL_SPI_TransmitReceive+0x1d8>
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d003      	beq.n	800838a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008388:	e0a7      	b.n	80084da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1a6      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x130>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008398:	b29b      	uxth	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1a1      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x130>
 800839e:	e07c      	b.n	800849a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <HAL_SPI_TransmitReceive+0x1fc>
 80083a8:	8b7b      	ldrh	r3, [r7, #26]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d16b      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330c      	adds	r3, #12
 80083b8:	7812      	ldrb	r2, [r2, #0]
 80083ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083d4:	e057      	b.n	8008486 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d11c      	bne.n	800841e <HAL_SPI_TransmitReceive+0x26c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d017      	beq.n	800841e <HAL_SPI_TransmitReceive+0x26c>
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d114      	bne.n	800841e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d119      	bne.n	8008460 <HAL_SPI_TransmitReceive+0x2ae>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d014      	beq.n	8008460 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800845c:	2301      	movs	r3, #1
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008460:	f7fa fd68 	bl	8002f34 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800846c:	429a      	cmp	r2, r3
 800846e:	d803      	bhi.n	8008478 <HAL_SPI_TransmitReceive+0x2c6>
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008476:	d102      	bne.n	800847e <HAL_SPI_TransmitReceive+0x2cc>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008484:	e029      	b.n	80084da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1a2      	bne.n	80083d6 <HAL_SPI_TransmitReceive+0x224>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d19d      	bne.n	80083d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800849a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f918 	bl	80086d4 <SPI_EndRxTxTransaction>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d006      	beq.n	80084b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084b6:	e010      	b.n	80084da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	e000      	b.n	80084da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3730      	adds	r7, #48	; 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	4613      	mov	r3, r2
 8008506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008508:	f7fa fd14 	bl	8002f34 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4413      	add	r3, r2
 8008516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008518:	f7fa fd0c 	bl	8002f34 <HAL_GetTick>
 800851c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800851e:	4b39      	ldr	r3, [pc, #228]	; (8008604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	015b      	lsls	r3, r3, #5
 8008524:	0d1b      	lsrs	r3, r3, #20
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800852e:	e054      	b.n	80085da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008536:	d050      	beq.n	80085da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008538:	f7fa fcfc 	bl	8002f34 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	429a      	cmp	r2, r3
 8008546:	d902      	bls.n	800854e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d13d      	bne.n	80085ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800855c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008566:	d111      	bne.n	800858c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008570:	d004      	beq.n	800857c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857a:	d107      	bne.n	800858c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008594:	d10f      	bne.n	80085b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e017      	b.n	80085fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4013      	ands	r3, r2
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	bf0c      	ite	eq
 80085ea:	2301      	moveq	r3, #1
 80085ec:	2300      	movne	r3, #0
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d19b      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000000 	.word	0x20000000

08008608 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af02      	add	r7, sp, #8
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800861c:	d111      	bne.n	8008642 <SPI_EndRxTransaction+0x3a>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008626:	d004      	beq.n	8008632 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008630:	d107      	bne.n	8008642 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008640:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800864a:	d12a      	bne.n	80086a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008654:	d012      	beq.n	800867c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff ff49 	bl	80084f8 <SPI_WaitFlagStateUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d02d      	beq.n	80086c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e026      	b.n	80086ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	2101      	movs	r1, #1
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff ff36 	bl	80084f8 <SPI_WaitFlagStateUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01a      	beq.n	80086c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008696:	f043 0220 	orr.w	r2, r3, #32
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e013      	b.n	80086ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2101      	movs	r1, #1
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff ff23 	bl	80084f8 <SPI_WaitFlagStateUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e000      	b.n	80086ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086e0:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <SPI_EndRxTxTransaction+0x7c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1b      	ldr	r2, [pc, #108]	; (8008754 <SPI_EndRxTxTransaction+0x80>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	0d5b      	lsrs	r3, r3, #21
 80086ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086f0:	fb02 f303 	mul.w	r3, r2, r3
 80086f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086fe:	d112      	bne.n	8008726 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2200      	movs	r2, #0
 8008708:	2180      	movs	r1, #128	; 0x80
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7ff fef4 	bl	80084f8 <SPI_WaitFlagStateUntilTimeout>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d016      	beq.n	8008744 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871a:	f043 0220 	orr.w	r2, r3, #32
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e00f      	b.n	8008746 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	3b01      	subs	r3, #1
 8008730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873c:	2b80      	cmp	r3, #128	; 0x80
 800873e:	d0f2      	beq.n	8008726 <SPI_EndRxTxTransaction+0x52>
 8008740:	e000      	b.n	8008744 <SPI_EndRxTxTransaction+0x70>
        break;
 8008742:	bf00      	nop
  }

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000000 	.word	0x20000000
 8008754:	165e9f81 	.word	0x165e9f81

08008758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e041      	b.n	80087ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fa f804 	bl	800278c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f000 f888 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d001      	beq.n	8008810 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e03c      	b.n	800888a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_TIM_Base_Start+0xa0>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d018      	beq.n	8008854 <HAL_TIM_Base_Start+0x5c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882a:	d013      	beq.n	8008854 <HAL_TIM_Base_Start+0x5c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1a      	ldr	r2, [pc, #104]	; (800889c <HAL_TIM_Base_Start+0xa4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00e      	beq.n	8008854 <HAL_TIM_Base_Start+0x5c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <HAL_TIM_Base_Start+0xa8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d009      	beq.n	8008854 <HAL_TIM_Base_Start+0x5c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a17      	ldr	r2, [pc, #92]	; (80088a4 <HAL_TIM_Base_Start+0xac>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d004      	beq.n	8008854 <HAL_TIM_Base_Start+0x5c>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <HAL_TIM_Base_Start+0xb0>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d111      	bne.n	8008878 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b06      	cmp	r3, #6
 8008864:	d010      	beq.n	8008888 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0201 	orr.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008876:	e007      	b.n	8008888 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40014000 	.word	0x40014000

080088ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a34      	ldr	r2, [pc, #208]	; (8008990 <TIM_Base_SetConfig+0xe4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00f      	beq.n	80088e4 <TIM_Base_SetConfig+0x38>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ca:	d00b      	beq.n	80088e4 <TIM_Base_SetConfig+0x38>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a31      	ldr	r2, [pc, #196]	; (8008994 <TIM_Base_SetConfig+0xe8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d007      	beq.n	80088e4 <TIM_Base_SetConfig+0x38>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a30      	ldr	r2, [pc, #192]	; (8008998 <TIM_Base_SetConfig+0xec>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_Base_SetConfig+0x38>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a2f      	ldr	r2, [pc, #188]	; (800899c <TIM_Base_SetConfig+0xf0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d108      	bne.n	80088f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a25      	ldr	r2, [pc, #148]	; (8008990 <TIM_Base_SetConfig+0xe4>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d01b      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008904:	d017      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a22      	ldr	r2, [pc, #136]	; (8008994 <TIM_Base_SetConfig+0xe8>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a21      	ldr	r2, [pc, #132]	; (8008998 <TIM_Base_SetConfig+0xec>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d00f      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a20      	ldr	r2, [pc, #128]	; (800899c <TIM_Base_SetConfig+0xf0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00b      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a1f      	ldr	r2, [pc, #124]	; (80089a0 <TIM_Base_SetConfig+0xf4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d007      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a1e      	ldr	r2, [pc, #120]	; (80089a4 <TIM_Base_SetConfig+0xf8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d003      	beq.n	8008936 <TIM_Base_SetConfig+0x8a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a1d      	ldr	r2, [pc, #116]	; (80089a8 <TIM_Base_SetConfig+0xfc>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d108      	bne.n	8008948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800893c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a08      	ldr	r2, [pc, #32]	; (8008990 <TIM_Base_SetConfig+0xe4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d103      	bne.n	800897c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	615a      	str	r2, [r3, #20]
}
 8008982:	bf00      	nop
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40010000 	.word	0x40010000
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400
 80089a8:	40014800 	.word	0x40014800

080089ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e03f      	b.n	8008a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7f9 fefc 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	; 0x24
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc7b 	bl	80092ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b0ba      	sub	sp, #232	; 0xe8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10f      	bne.n	8008aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <HAL_UART_IRQHandler+0x66>
 8008a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb65 	bl	8009176 <UART_Receive_IT>
      return;
 8008aac:	e256      	b.n	8008f5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 80de 	beq.w	8008c74 <HAL_UART_IRQHandler+0x22c>
 8008ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ac8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 80d1 	beq.w	8008c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00b      	beq.n	8008af6 <HAL_UART_IRQHandler+0xae>
 8008ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	f043 0201 	orr.w	r2, r3, #1
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <HAL_UART_IRQHandler+0xd2>
 8008b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f043 0202 	orr.w	r2, r3, #2
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <HAL_UART_IRQHandler+0xf6>
 8008b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	f043 0204 	orr.w	r2, r3, #4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d011      	beq.n	8008b6e <HAL_UART_IRQHandler+0x126>
 8008b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d105      	bne.n	8008b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	f043 0208 	orr.w	r2, r3, #8
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 81ed 	beq.w	8008f52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d008      	beq.n	8008b96 <HAL_UART_IRQHandler+0x14e>
 8008b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 faf0 	bl	8009176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d103      	bne.n	8008bc2 <HAL_UART_IRQHandler+0x17a>
 8008bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d04f      	beq.n	8008c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f9f8 	bl	8008fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d141      	bne.n	8008c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3314      	adds	r3, #20
 8008bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1d9      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d013      	beq.n	8008c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	4a7d      	ldr	r2, [pc, #500]	; (8008e24 <HAL_UART_IRQHandler+0x3dc>)
 8008c30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fa fbdc 	bl	80033f4 <HAL_DMA_Abort_IT>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d016      	beq.n	8008c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c50:	e00e      	b.n	8008c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f99a 	bl	8008f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	e00a      	b.n	8008c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f996 	bl	8008f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	e006      	b.n	8008c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f992 	bl	8008f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c6e:	e170      	b.n	8008f52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	bf00      	nop
    return;
 8008c72:	e16e      	b.n	8008f52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	f040 814a 	bne.w	8008f12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8143 	beq.w	8008f12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 813c 	beq.w	8008f12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60bb      	str	r3, [r7, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cba:	2b40      	cmp	r3, #64	; 0x40
 8008cbc:	f040 80b4 	bne.w	8008e28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8140 	beq.w	8008f56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	f080 8139 	bcs.w	8008f56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf6:	f000 8088 	beq.w	8008e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	330c      	adds	r3, #12
 8008d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1d9      	bne.n	8008cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3314      	adds	r3, #20
 8008d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d58:	f023 0301 	bic.w	r3, r3, #1
 8008d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3314      	adds	r3, #20
 8008d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e1      	bne.n	8008d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3314      	adds	r3, #20
 8008d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3314      	adds	r3, #20
 8008da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e3      	bne.n	8008d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	330c      	adds	r3, #12
 8008dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dda:	f023 0310 	bic.w	r3, r3, #16
 8008dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	330c      	adds	r3, #12
 8008de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dec:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008df2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e3      	bne.n	8008dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fa fa85 	bl	8003314 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8c0 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e20:	e099      	b.n	8008f56 <HAL_UART_IRQHandler+0x50e>
 8008e22:	bf00      	nop
 8008e24:	0800907f 	.word	0x0800907f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 808b 	beq.w	8008f5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8086 	beq.w	8008f5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	330c      	adds	r3, #12
 8008e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	330c      	adds	r3, #12
 8008e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e72:	647a      	str	r2, [r7, #68]	; 0x44
 8008e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e3      	bne.n	8008e4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3314      	adds	r3, #20
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	623b      	str	r3, [r7, #32]
   return(result);
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3314      	adds	r3, #20
 8008ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e3      	bne.n	8008e86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	330c      	adds	r3, #12
 8008ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0310 	bic.w	r3, r3, #16
 8008ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	330c      	adds	r3, #12
 8008eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ef0:	61fa      	str	r2, [r7, #28]
 8008ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	69b9      	ldr	r1, [r7, #24]
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	617b      	str	r3, [r7, #20]
   return(result);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e3      	bne.n	8008ecc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f848 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f10:	e023      	b.n	8008f5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d009      	beq.n	8008f32 <HAL_UART_IRQHandler+0x4ea>
 8008f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f8bb 	bl	80090a6 <UART_Transmit_IT>
    return;
 8008f30:	e014      	b.n	8008f5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00e      	beq.n	8008f5c <HAL_UART_IRQHandler+0x514>
 8008f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d008      	beq.n	8008f5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f8fb 	bl	8009146 <UART_EndTransmit_IT>
    return;
 8008f50:	e004      	b.n	8008f5c <HAL_UART_IRQHandler+0x514>
    return;
 8008f52:	bf00      	nop
 8008f54:	e002      	b.n	8008f5c <HAL_UART_IRQHandler+0x514>
      return;
 8008f56:	bf00      	nop
 8008f58:	e000      	b.n	8008f5c <HAL_UART_IRQHandler+0x514>
      return;
 8008f5a:	bf00      	nop
  }
}
 8008f5c:	37e8      	adds	r7, #232	; 0xe8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop

08008f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b095      	sub	sp, #84	; 0x54
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e5      	bne.n	8008fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3314      	adds	r3, #20
 8008ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	61fb      	str	r3, [r7, #28]
   return(result);
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	64bb      	str	r3, [r7, #72]	; 0x48
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3314      	adds	r3, #20
 8009012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800901a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e5      	bne.n	8008ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902c:	2b01      	cmp	r3, #1
 800902e:	d119      	bne.n	8009064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f023 0310 	bic.w	r3, r3, #16
 8009046:	647b      	str	r3, [r7, #68]	; 0x44
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	330c      	adds	r3, #12
 800904e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009050:	61ba      	str	r2, [r7, #24]
 8009052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6979      	ldr	r1, [r7, #20]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	613b      	str	r3, [r7, #16]
   return(result);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e5      	bne.n	8009030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009072:	bf00      	nop
 8009074:	3754      	adds	r7, #84	; 0x54
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff ff77 	bl	8008f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b21      	cmp	r3, #33	; 0x21
 80090b8:	d13e      	bne.n	8009138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c2:	d114      	bne.n	80090ee <UART_Transmit_IT+0x48>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d110      	bne.n	80090ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	1c9a      	adds	r2, r3, #2
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	621a      	str	r2, [r3, #32]
 80090ec:	e008      	b.n	8009100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	1c59      	adds	r1, r3, #1
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	6211      	str	r1, [r2, #32]
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29b      	uxth	r3, r3
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4619      	mov	r1, r3
 800910e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10f      	bne.n	8009134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009138:	2302      	movs	r3, #2
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800915c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff fefc 	bl	8008f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b08c      	sub	sp, #48	; 0x30
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b22      	cmp	r3, #34	; 0x22
 8009188:	f040 80ab 	bne.w	80092e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009194:	d117      	bne.n	80091c6 <UART_Receive_IT+0x50>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d113      	bne.n	80091c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	1c9a      	adds	r2, r3, #2
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	629a      	str	r2, [r3, #40]	; 0x28
 80091c4:	e026      	b.n	8009214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091cc:	2300      	movs	r3, #0
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d8:	d007      	beq.n	80091ea <UART_Receive_IT+0x74>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <UART_Receive_IT+0x82>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e008      	b.n	800920a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009204:	b2da      	uxtb	r2, r3
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29b      	uxth	r3, r3
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	4619      	mov	r1, r3
 8009222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009224:	2b00      	cmp	r3, #0
 8009226:	d15a      	bne.n	80092de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0220 	bic.w	r2, r2, #32
 8009236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0201 	bic.w	r2, r2, #1
 8009256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2220      	movs	r2, #32
 800925c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009264:	2b01      	cmp	r3, #1
 8009266:	d135      	bne.n	80092d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	613b      	str	r3, [r7, #16]
   return(result);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f023 0310 	bic.w	r3, r3, #16
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928e:	623a      	str	r2, [r7, #32]
 8009290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	69f9      	ldr	r1, [r7, #28]
 8009294:	6a3a      	ldr	r2, [r7, #32]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	61bb      	str	r3, [r7, #24]
   return(result);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b10      	cmp	r3, #16
 80092ae:	d10a      	bne.n	80092c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff fe67 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
 80092d2:	e002      	b.n	80092da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fe4f 	bl	8008f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e002      	b.n	80092e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e000      	b.n	80092e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80092e2:	2302      	movs	r3, #2
  }
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3730      	adds	r7, #48	; 0x30
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092f0:	b0c0      	sub	sp, #256	; 0x100
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	68d9      	ldr	r1, [r3, #12]
 800930a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	ea40 0301 	orr.w	r3, r0, r1
 8009314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	431a      	orrs	r2, r3
 8009324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	431a      	orrs	r2, r3
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	4313      	orrs	r3, r2
 8009334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009344:	f021 010c 	bic.w	r1, r1, #12
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009352:	430b      	orrs	r3, r1
 8009354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009366:	6999      	ldr	r1, [r3, #24]
 8009368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	ea40 0301 	orr.w	r3, r0, r1
 8009372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b8f      	ldr	r3, [pc, #572]	; (80095b8 <UART_SetConfig+0x2cc>)
 800937c:	429a      	cmp	r2, r3
 800937e:	d005      	beq.n	800938c <UART_SetConfig+0xa0>
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b8d      	ldr	r3, [pc, #564]	; (80095bc <UART_SetConfig+0x2d0>)
 8009388:	429a      	cmp	r2, r3
 800938a:	d104      	bne.n	8009396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800938c:	f7fd fa9c 	bl	80068c8 <HAL_RCC_GetPCLK2Freq>
 8009390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009394:	e003      	b.n	800939e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009396:	f7fd fa83 	bl	80068a0 <HAL_RCC_GetPCLK1Freq>
 800939a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a8:	f040 810c 	bne.w	80095c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093be:	4622      	mov	r2, r4
 80093c0:	462b      	mov	r3, r5
 80093c2:	1891      	adds	r1, r2, r2
 80093c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80093c6:	415b      	adcs	r3, r3
 80093c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093ce:	4621      	mov	r1, r4
 80093d0:	eb12 0801 	adds.w	r8, r2, r1
 80093d4:	4629      	mov	r1, r5
 80093d6:	eb43 0901 	adc.w	r9, r3, r1
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093ee:	4690      	mov	r8, r2
 80093f0:	4699      	mov	r9, r3
 80093f2:	4623      	mov	r3, r4
 80093f4:	eb18 0303 	adds.w	r3, r8, r3
 80093f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093fc:	462b      	mov	r3, r5
 80093fe:	eb49 0303 	adc.w	r3, r9, r3
 8009402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800941a:	460b      	mov	r3, r1
 800941c:	18db      	adds	r3, r3, r3
 800941e:	653b      	str	r3, [r7, #80]	; 0x50
 8009420:	4613      	mov	r3, r2
 8009422:	eb42 0303 	adc.w	r3, r2, r3
 8009426:	657b      	str	r3, [r7, #84]	; 0x54
 8009428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800942c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009430:	f7f7 fbc2 	bl	8000bb8 <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4b61      	ldr	r3, [pc, #388]	; (80095c0 <UART_SetConfig+0x2d4>)
 800943a:	fba3 2302 	umull	r2, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	011c      	lsls	r4, r3, #4
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009446:	2200      	movs	r2, #0
 8009448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800944c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	64b9      	str	r1, [r7, #72]	; 0x48
 800945c:	415b      	adcs	r3, r3
 800945e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009464:	4641      	mov	r1, r8
 8009466:	eb12 0a01 	adds.w	sl, r2, r1
 800946a:	4649      	mov	r1, r9
 800946c:	eb43 0b01 	adc.w	fp, r3, r1
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800947c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009484:	4692      	mov	sl, r2
 8009486:	469b      	mov	fp, r3
 8009488:	4643      	mov	r3, r8
 800948a:	eb1a 0303 	adds.w	r3, sl, r3
 800948e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009492:	464b      	mov	r3, r9
 8009494:	eb4b 0303 	adc.w	r3, fp, r3
 8009498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094b0:	460b      	mov	r3, r1
 80094b2:	18db      	adds	r3, r3, r3
 80094b4:	643b      	str	r3, [r7, #64]	; 0x40
 80094b6:	4613      	mov	r3, r2
 80094b8:	eb42 0303 	adc.w	r3, r2, r3
 80094bc:	647b      	str	r3, [r7, #68]	; 0x44
 80094be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094c6:	f7f7 fb77 	bl	8000bb8 <__aeabi_uldivmod>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	4b3b      	ldr	r3, [pc, #236]	; (80095c0 <UART_SetConfig+0x2d4>)
 80094d2:	fba3 2301 	umull	r2, r3, r3, r1
 80094d6:	095b      	lsrs	r3, r3, #5
 80094d8:	2264      	movs	r2, #100	; 0x64
 80094da:	fb02 f303 	mul.w	r3, r2, r3
 80094de:	1acb      	subs	r3, r1, r3
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094e6:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <UART_SetConfig+0x2d4>)
 80094e8:	fba3 2302 	umull	r2, r3, r3, r2
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094f4:	441c      	add	r4, r3
 80094f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	1891      	adds	r1, r2, r2
 800950e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009510:	415b      	adcs	r3, r3
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009518:	4641      	mov	r1, r8
 800951a:	1851      	adds	r1, r2, r1
 800951c:	6339      	str	r1, [r7, #48]	; 0x30
 800951e:	4649      	mov	r1, r9
 8009520:	414b      	adcs	r3, r1
 8009522:	637b      	str	r3, [r7, #52]	; 0x34
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009530:	4659      	mov	r1, fp
 8009532:	00cb      	lsls	r3, r1, #3
 8009534:	4651      	mov	r1, sl
 8009536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800953a:	4651      	mov	r1, sl
 800953c:	00ca      	lsls	r2, r1, #3
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	4603      	mov	r3, r0
 8009544:	4642      	mov	r2, r8
 8009546:	189b      	adds	r3, r3, r2
 8009548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800954c:	464b      	mov	r3, r9
 800954e:	460a      	mov	r2, r1
 8009550:	eb42 0303 	adc.w	r3, r2, r3
 8009554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800956c:	460b      	mov	r3, r1
 800956e:	18db      	adds	r3, r3, r3
 8009570:	62bb      	str	r3, [r7, #40]	; 0x28
 8009572:	4613      	mov	r3, r2
 8009574:	eb42 0303 	adc.w	r3, r2, r3
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800957a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800957e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009582:	f7f7 fb19 	bl	8000bb8 <__aeabi_uldivmod>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <UART_SetConfig+0x2d4>)
 800958c:	fba3 1302 	umull	r1, r3, r3, r2
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	2164      	movs	r1, #100	; 0x64
 8009594:	fb01 f303 	mul.w	r3, r1, r3
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	3332      	adds	r3, #50	; 0x32
 800959e:	4a08      	ldr	r2, [pc, #32]	; (80095c0 <UART_SetConfig+0x2d4>)
 80095a0:	fba2 2303 	umull	r2, r3, r2, r3
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	f003 0207 	and.w	r2, r3, #7
 80095aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4422      	add	r2, r4
 80095b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095b4:	e105      	b.n	80097c2 <UART_SetConfig+0x4d6>
 80095b6:	bf00      	nop
 80095b8:	40011000 	.word	0x40011000
 80095bc:	40011400 	.word	0x40011400
 80095c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095d6:	4642      	mov	r2, r8
 80095d8:	464b      	mov	r3, r9
 80095da:	1891      	adds	r1, r2, r2
 80095dc:	6239      	str	r1, [r7, #32]
 80095de:	415b      	adcs	r3, r3
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
 80095e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095e6:	4641      	mov	r1, r8
 80095e8:	1854      	adds	r4, r2, r1
 80095ea:	4649      	mov	r1, r9
 80095ec:	eb43 0501 	adc.w	r5, r3, r1
 80095f0:	f04f 0200 	mov.w	r2, #0
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	00eb      	lsls	r3, r5, #3
 80095fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095fe:	00e2      	lsls	r2, r4, #3
 8009600:	4614      	mov	r4, r2
 8009602:	461d      	mov	r5, r3
 8009604:	4643      	mov	r3, r8
 8009606:	18e3      	adds	r3, r4, r3
 8009608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800960c:	464b      	mov	r3, r9
 800960e:	eb45 0303 	adc.w	r3, r5, r3
 8009612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	f04f 0300 	mov.w	r3, #0
 800962e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009632:	4629      	mov	r1, r5
 8009634:	008b      	lsls	r3, r1, #2
 8009636:	4621      	mov	r1, r4
 8009638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800963c:	4621      	mov	r1, r4
 800963e:	008a      	lsls	r2, r1, #2
 8009640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009644:	f7f7 fab8 	bl	8000bb8 <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4b60      	ldr	r3, [pc, #384]	; (80097d0 <UART_SetConfig+0x4e4>)
 800964e:	fba3 2302 	umull	r2, r3, r3, r2
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	011c      	lsls	r4, r3, #4
 8009656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965a:	2200      	movs	r2, #0
 800965c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	1891      	adds	r1, r2, r2
 800966e:	61b9      	str	r1, [r7, #24]
 8009670:	415b      	adcs	r3, r3
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009678:	4641      	mov	r1, r8
 800967a:	1851      	adds	r1, r2, r1
 800967c:	6139      	str	r1, [r7, #16]
 800967e:	4649      	mov	r1, r9
 8009680:	414b      	adcs	r3, r1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	f04f 0300 	mov.w	r3, #0
 800968c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009690:	4659      	mov	r1, fp
 8009692:	00cb      	lsls	r3, r1, #3
 8009694:	4651      	mov	r1, sl
 8009696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800969a:	4651      	mov	r1, sl
 800969c:	00ca      	lsls	r2, r1, #3
 800969e:	4610      	mov	r0, r2
 80096a0:	4619      	mov	r1, r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	4642      	mov	r2, r8
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096ac:	464b      	mov	r3, r9
 80096ae:	460a      	mov	r2, r1
 80096b0:	eb42 0303 	adc.w	r3, r2, r3
 80096b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80096c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096d0:	4649      	mov	r1, r9
 80096d2:	008b      	lsls	r3, r1, #2
 80096d4:	4641      	mov	r1, r8
 80096d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096da:	4641      	mov	r1, r8
 80096dc:	008a      	lsls	r2, r1, #2
 80096de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096e2:	f7f7 fa69 	bl	8000bb8 <__aeabi_uldivmod>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4b39      	ldr	r3, [pc, #228]	; (80097d0 <UART_SetConfig+0x4e4>)
 80096ec:	fba3 1302 	umull	r1, r3, r3, r2
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	2164      	movs	r1, #100	; 0x64
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	3332      	adds	r3, #50	; 0x32
 80096fe:	4a34      	ldr	r2, [pc, #208]	; (80097d0 <UART_SetConfig+0x4e4>)
 8009700:	fba2 2303 	umull	r2, r3, r2, r3
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800970a:	441c      	add	r4, r3
 800970c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009710:	2200      	movs	r2, #0
 8009712:	673b      	str	r3, [r7, #112]	; 0x70
 8009714:	677a      	str	r2, [r7, #116]	; 0x74
 8009716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800971a:	4642      	mov	r2, r8
 800971c:	464b      	mov	r3, r9
 800971e:	1891      	adds	r1, r2, r2
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	415b      	adcs	r3, r3
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800972a:	4641      	mov	r1, r8
 800972c:	1851      	adds	r1, r2, r1
 800972e:	6039      	str	r1, [r7, #0]
 8009730:	4649      	mov	r1, r9
 8009732:	414b      	adcs	r3, r1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	f04f 0300 	mov.w	r3, #0
 800973e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009742:	4659      	mov	r1, fp
 8009744:	00cb      	lsls	r3, r1, #3
 8009746:	4651      	mov	r1, sl
 8009748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800974c:	4651      	mov	r1, sl
 800974e:	00ca      	lsls	r2, r1, #3
 8009750:	4610      	mov	r0, r2
 8009752:	4619      	mov	r1, r3
 8009754:	4603      	mov	r3, r0
 8009756:	4642      	mov	r2, r8
 8009758:	189b      	adds	r3, r3, r2
 800975a:	66bb      	str	r3, [r7, #104]	; 0x68
 800975c:	464b      	mov	r3, r9
 800975e:	460a      	mov	r2, r1
 8009760:	eb42 0303 	adc.w	r3, r2, r3
 8009764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	663b      	str	r3, [r7, #96]	; 0x60
 8009770:	667a      	str	r2, [r7, #100]	; 0x64
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800977e:	4649      	mov	r1, r9
 8009780:	008b      	lsls	r3, r1, #2
 8009782:	4641      	mov	r1, r8
 8009784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009788:	4641      	mov	r1, r8
 800978a:	008a      	lsls	r2, r1, #2
 800978c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009790:	f7f7 fa12 	bl	8000bb8 <__aeabi_uldivmod>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <UART_SetConfig+0x4e4>)
 800979a:	fba3 1302 	umull	r1, r3, r3, r2
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	2164      	movs	r1, #100	; 0x64
 80097a2:	fb01 f303 	mul.w	r3, r1, r3
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	3332      	adds	r3, #50	; 0x32
 80097ac:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <UART_SetConfig+0x4e4>)
 80097ae:	fba2 2303 	umull	r2, r3, r2, r3
 80097b2:	095b      	lsrs	r3, r3, #5
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4422      	add	r2, r4
 80097c0:	609a      	str	r2, [r3, #8]
}
 80097c2:	bf00      	nop
 80097c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097c8:	46bd      	mov	sp, r7
 80097ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ce:	bf00      	nop
 80097d0:	51eb851f 	.word	0x51eb851f

080097d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80097d4:	b084      	sub	sp, #16
 80097d6:	b480      	push	{r7}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	f107 001c 	add.w	r0, r7, #28
 80097e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80097ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80097ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80097ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80097f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80097f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80097fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80097fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800980e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	b004      	add	sp, #16
 8009828:	4770      	bx	lr

0800982a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2203      	movs	r2, #3
 8009872:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0303 	and.w	r3, r3, #3
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800989e:	b480      	push	{r7}
 80098a0:	b085      	sub	sp, #20
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098bc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80098c2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80098c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80098d8:	f023 030f 	bic.w	r3, r3, #15
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	b2db      	uxtb	r3, r3
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3314      	adds	r3, #20
 800991a:	461a      	mov	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	4413      	add	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
}  
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009932:	b480      	push	{r7}
 8009934:	b085      	sub	sp, #20
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009958:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800995e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009964:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	431a      	orrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800997c:	2300      	movs	r3, #0

}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b088      	sub	sp, #32
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009998:	2310      	movs	r3, #16
 800999a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099a0:	2300      	movs	r3, #0
 80099a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099aa:	f107 0308 	add.w	r3, r7, #8
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff ff74 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80099b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ba:	2110      	movs	r1, #16
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa19 	bl	8009df4 <SDMMC_GetCmdResp1>
 80099c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099c4:	69fb      	ldr	r3, [r7, #28]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b088      	sub	sp, #32
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80099dc:	2311      	movs	r3, #17
 80099de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099ee:	f107 0308 	add.w	r3, r7, #8
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff ff52 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80099fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80099fe:	2111      	movs	r1, #17
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9f7 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a08:	69fb      	ldr	r3, [r7, #28]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b088      	sub	sp, #32
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009a20:	2312      	movs	r3, #18
 8009a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff ff30 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a42:	2112      	movs	r1, #18
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f9d5 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b088      	sub	sp, #32
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a64:	2318      	movs	r3, #24
 8009a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a68:	2340      	movs	r3, #64	; 0x40
 8009a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff ff0e 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a86:	2118      	movs	r1, #24
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f9b3 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a90:	69fb      	ldr	r3, [r7, #28]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009aa8:	2319      	movs	r3, #25
 8009aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aac:	2340      	movs	r3, #64	; 0x40
 8009aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff feec 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aca:	2119      	movs	r1, #25
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f991 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009aec:	230c      	movs	r3, #12
 8009aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af4:	2300      	movs	r3, #0
 8009af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009afc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff feca 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009b0a:	4a05      	ldr	r2, [pc, #20]	; (8009b20 <SDMMC_CmdStopTransfer+0x40>)
 8009b0c:	210c      	movs	r1, #12
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f970 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b16:	69fb      	ldr	r3, [r7, #28]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	05f5e100 	.word	0x05f5e100

08009b24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08a      	sub	sp, #40	; 0x28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b34:	2307      	movs	r3, #7
 8009b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b38:	2340      	movs	r3, #64	; 0x40
 8009b3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b46:	f107 0310 	add.w	r3, r7, #16
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff fea6 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b56:	2107      	movs	r1, #7
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f94b 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009b5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3728      	adds	r7, #40	; 0x28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b88:	f107 0308 	add.w	r3, r7, #8
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff fe85 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fb65 	bl	800a264 <SDMMC_GetCmdError>
 8009b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b088      	sub	sp, #32
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009bae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff fe66 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 faf8 	bl	800a1c8 <SDMMC_GetCmdResp7>
 8009bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bda:	69fb      	ldr	r3, [r7, #28]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009bf2:	2337      	movs	r3, #55	; 0x37
 8009bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fe47 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c14:	2137      	movs	r1, #55	; 0x37
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8ec 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c3e:	2329      	movs	r3, #41	; 0x29
 8009c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fe21 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f9ff 	bl	800a060 <SDMMC_GetCmdResp3>
 8009c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c64:	69fb      	ldr	r3, [r7, #28]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3720      	adds	r7, #32
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b088      	sub	sp, #32
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c7c:	2306      	movs	r3, #6
 8009c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c8e:	f107 0308 	add.w	r3, r7, #8
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff fe02 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9e:	2106      	movs	r1, #6
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f8a7 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b088      	sub	sp, #32
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009cbe:	2333      	movs	r3, #51	; 0x33
 8009cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fde1 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce0:	2133      	movs	r1, #51	; 0x33
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f886 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cea:	69fb      	ldr	r3, [r7, #28]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3720      	adds	r7, #32
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d00:	2302      	movs	r3, #2
 8009d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009d04:	23c0      	movs	r3, #192	; 0xc0
 8009d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff fdc0 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f956 	bl	8009fd0 <SDMMC_GetCmdResp2>
 8009d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d26:	69fb      	ldr	r3, [r7, #28]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d3e:	2309      	movs	r3, #9
 8009d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009d42:	23c0      	movs	r3, #192	; 0xc0
 8009d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d46:	2300      	movs	r3, #0
 8009d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fda1 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f937 	bl	8009fd0 <SDMMC_GetCmdResp2>
 8009d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d64:	69fb      	ldr	r3, [r7, #28]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b088      	sub	sp, #32
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d8e:	f107 0308 	add.w	r3, r7, #8
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff fd82 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	2103      	movs	r1, #3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f99c 	bl	800a0dc <SDMMC_GetCmdResp6>
 8009da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da6:	69fb      	ldr	r3, [r7, #28]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009dbe:	230d      	movs	r3, #13
 8009dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009dc2:	2340      	movs	r3, #64	; 0x40
 8009dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dd0:	f107 0308 	add.w	r3, r7, #8
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff fd61 	bl	800989e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de0:	210d      	movs	r1, #13
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f806 	bl	8009df4 <SDMMC_GetCmdResp1>
 8009de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009e02:	4b70      	ldr	r3, [pc, #448]	; (8009fc4 <SDMMC_GetCmdResp1+0x1d0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a70      	ldr	r2, [pc, #448]	; (8009fc8 <SDMMC_GetCmdResp1+0x1d4>)
 8009e08:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0c:	0a5a      	lsrs	r2, r3, #9
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	fb02 f303 	mul.w	r3, r2, r3
 8009e14:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	1e5a      	subs	r2, r3, #1
 8009e1a:	61fa      	str	r2, [r7, #28]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e24:	e0c9      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <SDMMC_GetCmdResp1+0x22>
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1ea      	bne.n	8009e16 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e52:	2304      	movs	r3, #4
 8009e54:	e0b1      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e0a6      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	22c5      	movs	r2, #197	; 0xc5
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff fd3d 	bl	80098f2 <SDIO_GetCommandResponse>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	7afb      	ldrb	r3, [r7, #11]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d001      	beq.n	8009e86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e099      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e86:	2100      	movs	r1, #0
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7ff fd3f 	bl	800990c <SDIO_GetResponse>
 8009e8e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	4b4e      	ldr	r3, [pc, #312]	; (8009fcc <SDMMC_GetCmdResp1+0x1d8>)
 8009e94:	4013      	ands	r3, r2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e08d      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da02      	bge.n	8009eaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ea8:	e087      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	e080      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ec2:	2380      	movs	r3, #128	; 0x80
 8009ec4:	e079      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ed4:	e071      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ee4:	e069      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ef4:	e061      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f04:	e059      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f14:	e051      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f24:	e049      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f34:	e041      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f44:	e039      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f54:	e031      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f64:	e029      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f74:	e021      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f84:	e019      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f94:	e011      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009fa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009fa4:	e009      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009fb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009fb4:	e001      	b.n	8009fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000000 	.word	0x20000000
 8009fc8:	10624dd3 	.word	0x10624dd3
 8009fcc:	fdffe008 	.word	0xfdffe008

08009fd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fd8:	4b1f      	ldr	r3, [pc, #124]	; (800a058 <SDMMC_GetCmdResp2+0x88>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <SDMMC_GetCmdResp2+0x8c>)
 8009fde:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe2:	0a5b      	lsrs	r3, r3, #9
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	fb02 f303 	mul.w	r3, r2, r3
 8009fec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	1e5a      	subs	r2, r3, #1
 8009ff2:	60fa      	str	r2, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ffc:	e026      	b.n	800a04c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a002:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0ef      	beq.n	8009fee <SDMMC_GetCmdResp2+0x1e>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1ea      	bne.n	8009fee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2204      	movs	r2, #4
 800a028:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a02a:	2304      	movs	r3, #4
 800a02c:	e00e      	b.n	800a04c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a040:	2301      	movs	r3, #1
 800a042:	e003      	b.n	800a04c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	22c5      	movs	r2, #197	; 0xc5
 800a048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000000 	.word	0x20000000
 800a05c:	10624dd3 	.word	0x10624dd3

0800a060 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <SDMMC_GetCmdResp3+0x74>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <SDMMC_GetCmdResp3+0x78>)
 800a06e:	fba2 2303 	umull	r2, r3, r2, r3
 800a072:	0a5b      	lsrs	r3, r3, #9
 800a074:	f241 3288 	movw	r2, #5000	; 0x1388
 800a078:	fb02 f303 	mul.w	r3, r2, r3
 800a07c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1e5a      	subs	r2, r3, #1
 800a082:	60fa      	str	r2, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a08c:	e01b      	b.n	800a0c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0ef      	beq.n	800a07e <SDMMC_GetCmdResp3+0x1e>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1ea      	bne.n	800a07e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ba:	2304      	movs	r3, #4
 800a0bc:	e003      	b.n	800a0c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	22c5      	movs	r2, #197	; 0xc5
 800a0c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000000 	.word	0x20000000
 800a0d8:	10624dd3 	.word	0x10624dd3

0800a0dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0ea:	4b35      	ldr	r3, [pc, #212]	; (800a1c0 <SDMMC_GetCmdResp6+0xe4>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a35      	ldr	r2, [pc, #212]	; (800a1c4 <SDMMC_GetCmdResp6+0xe8>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0fa:	fb02 f303 	mul.w	r3, r2, r3
 800a0fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	1e5a      	subs	r2, r3, #1
 800a104:	61fa      	str	r2, [r7, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a10a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a10e:	e052      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a114:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0ef      	beq.n	800a100 <SDMMC_GetCmdResp6+0x24>
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1ea      	bne.n	800a100 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b00      	cmp	r3, #0
 800a134:	d004      	beq.n	800a140 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2204      	movs	r2, #4
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a13c:	2304      	movs	r3, #4
 800a13e:	e03a      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d004      	beq.n	800a156 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a152:	2301      	movs	r3, #1
 800a154:	e02f      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff fbcb 	bl	80098f2 <SDIO_GetCommandResponse>
 800a15c:	4603      	mov	r3, r0
 800a15e:	461a      	mov	r2, r3
 800a160:	7afb      	ldrb	r3, [r7, #11]
 800a162:	4293      	cmp	r3, r2
 800a164:	d001      	beq.n	800a16a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a166:	2301      	movs	r3, #1
 800a168:	e025      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	22c5      	movs	r2, #197	; 0xc5
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a170:	2100      	movs	r1, #0
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff fbca 	bl	800990c <SDIO_GetResponse>
 800a178:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d106      	bne.n	800a192 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	0c1b      	lsrs	r3, r3, #16
 800a188:	b29a      	uxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a18e:	2300      	movs	r3, #0
 800a190:	e011      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a19c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1a0:	e009      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a1ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1b0:	e001      	b.n	800a1b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3720      	adds	r7, #32
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000000 	.word	0x20000000
 800a1c4:	10624dd3 	.word	0x10624dd3

0800a1c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1d0:	4b22      	ldr	r3, [pc, #136]	; (800a25c <SDMMC_GetCmdResp7+0x94>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a22      	ldr	r2, [pc, #136]	; (800a260 <SDMMC_GetCmdResp7+0x98>)
 800a1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1da:	0a5b      	lsrs	r3, r3, #9
 800a1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e0:	fb02 f303 	mul.w	r3, r2, r3
 800a1e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	1e5a      	subs	r2, r3, #1
 800a1ea:	60fa      	str	r2, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1f4:	e02c      	b.n	800a250 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0ef      	beq.n	800a1e6 <SDMMC_GetCmdResp7+0x1e>
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1ea      	bne.n	800a1e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d004      	beq.n	800a226 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2204      	movs	r2, #4
 800a220:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a222:	2304      	movs	r3, #4
 800a224:	e014      	b.n	800a250 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a238:	2301      	movs	r3, #1
 800a23a:	e009      	b.n	800a250 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2240      	movs	r2, #64	; 0x40
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a24e:	2300      	movs	r3, #0
  
}
 800a250:	4618      	mov	r0, r3
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000000 	.word	0x20000000
 800a260:	10624dd3 	.word	0x10624dd3

0800a264 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a26c:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <SDMMC_GetCmdError+0x50>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a11      	ldr	r2, [pc, #68]	; (800a2b8 <SDMMC_GetCmdError+0x54>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	0a5b      	lsrs	r3, r3, #9
 800a278:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27c:	fb02 f303 	mul.w	r3, r2, r3
 800a280:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	1e5a      	subs	r2, r3, #1
 800a286:	60fa      	str	r2, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d102      	bne.n	800a292 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a28c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a290:	e009      	b.n	800a2a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0f1      	beq.n	800a282 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	22c5      	movs	r2, #197	; 0xc5
 800a2a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20000000 	.word	0x20000000
 800a2b8:	10624dd3 	.word	0x10624dd3

0800a2bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2bc:	b084      	sub	sp, #16
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	f107 001c 	add.w	r0, r7, #28
 800a2ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d122      	bne.n	800a31a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d105      	bne.n	800a30e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fbee 	bl	800baf0 <USB_CoreReset>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
 800a318:	e01a      	b.n	800a350 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fbe2 	bl	800baf0 <USB_CoreReset>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	639a      	str	r2, [r3, #56]	; 0x38
 800a342:	e005      	b.n	800a350 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10b      	bne.n	800a36e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f043 0206 	orr.w	r2, r3, #6
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f043 0220 	orr.w	r2, r3, #32
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a37a:	b004      	add	sp, #16
 800a37c:	4770      	bx	lr
	...

0800a380 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	4613      	mov	r3, r2
 800a38c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	2b02      	cmp	r3, #2
 800a392:	d165      	bne.n	800a460 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4a41      	ldr	r2, [pc, #260]	; (800a49c <USB_SetTurnaroundTime+0x11c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d906      	bls.n	800a3aa <USB_SetTurnaroundTime+0x2a>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4a40      	ldr	r2, [pc, #256]	; (800a4a0 <USB_SetTurnaroundTime+0x120>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d202      	bcs.n	800a3aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3a4:	230f      	movs	r3, #15
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	e062      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4a3c      	ldr	r2, [pc, #240]	; (800a4a0 <USB_SetTurnaroundTime+0x120>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d306      	bcc.n	800a3c0 <USB_SetTurnaroundTime+0x40>
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	4a3b      	ldr	r2, [pc, #236]	; (800a4a4 <USB_SetTurnaroundTime+0x124>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d202      	bcs.n	800a3c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3ba:	230e      	movs	r3, #14
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	e057      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4a38      	ldr	r2, [pc, #224]	; (800a4a4 <USB_SetTurnaroundTime+0x124>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d306      	bcc.n	800a3d6 <USB_SetTurnaroundTime+0x56>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4a37      	ldr	r2, [pc, #220]	; (800a4a8 <USB_SetTurnaroundTime+0x128>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d202      	bcs.n	800a3d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a3d0:	230d      	movs	r3, #13
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e04c      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	4a33      	ldr	r2, [pc, #204]	; (800a4a8 <USB_SetTurnaroundTime+0x128>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d306      	bcc.n	800a3ec <USB_SetTurnaroundTime+0x6c>
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	4a32      	ldr	r2, [pc, #200]	; (800a4ac <USB_SetTurnaroundTime+0x12c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d802      	bhi.n	800a3ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	617b      	str	r3, [r7, #20]
 800a3ea:	e041      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	4a2f      	ldr	r2, [pc, #188]	; (800a4ac <USB_SetTurnaroundTime+0x12c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d906      	bls.n	800a402 <USB_SetTurnaroundTime+0x82>
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4a2e      	ldr	r2, [pc, #184]	; (800a4b0 <USB_SetTurnaroundTime+0x130>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d802      	bhi.n	800a402 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a3fc:	230b      	movs	r3, #11
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	e036      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	4a2a      	ldr	r2, [pc, #168]	; (800a4b0 <USB_SetTurnaroundTime+0x130>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d906      	bls.n	800a418 <USB_SetTurnaroundTime+0x98>
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4a29      	ldr	r2, [pc, #164]	; (800a4b4 <USB_SetTurnaroundTime+0x134>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d802      	bhi.n	800a418 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a412:	230a      	movs	r3, #10
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	e02b      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4a26      	ldr	r2, [pc, #152]	; (800a4b4 <USB_SetTurnaroundTime+0x134>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d906      	bls.n	800a42e <USB_SetTurnaroundTime+0xae>
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	4a25      	ldr	r2, [pc, #148]	; (800a4b8 <USB_SetTurnaroundTime+0x138>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d202      	bcs.n	800a42e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a428:	2309      	movs	r3, #9
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	e020      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4a21      	ldr	r2, [pc, #132]	; (800a4b8 <USB_SetTurnaroundTime+0x138>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d306      	bcc.n	800a444 <USB_SetTurnaroundTime+0xc4>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4a20      	ldr	r2, [pc, #128]	; (800a4bc <USB_SetTurnaroundTime+0x13c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d802      	bhi.n	800a444 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a43e:	2308      	movs	r3, #8
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	e015      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4a1d      	ldr	r2, [pc, #116]	; (800a4bc <USB_SetTurnaroundTime+0x13c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d906      	bls.n	800a45a <USB_SetTurnaroundTime+0xda>
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	4a1c      	ldr	r2, [pc, #112]	; (800a4c0 <USB_SetTurnaroundTime+0x140>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d202      	bcs.n	800a45a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a454:	2307      	movs	r3, #7
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	e00a      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a45a:	2306      	movs	r3, #6
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e007      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d102      	bne.n	800a46c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a466:	2309      	movs	r3, #9
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	e001      	b.n	800a470 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a46c:	2309      	movs	r3, #9
 800a46e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	029b      	lsls	r3, r3, #10
 800a484:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	00d8acbf 	.word	0x00d8acbf
 800a4a0:	00e4e1c0 	.word	0x00e4e1c0
 800a4a4:	00f42400 	.word	0x00f42400
 800a4a8:	01067380 	.word	0x01067380
 800a4ac:	011a499f 	.word	0x011a499f
 800a4b0:	01312cff 	.word	0x01312cff
 800a4b4:	014ca43f 	.word	0x014ca43f
 800a4b8:	016e3600 	.word	0x016e3600
 800a4bc:	01a6ab1f 	.word	0x01a6ab1f
 800a4c0:	01e84800 	.word	0x01e84800

0800a4c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f043 0201 	orr.w	r2, r3, #1
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f023 0201 	bic.w	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d115      	bne.n	800a556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a536:	2001      	movs	r0, #1
 800a538:	f7f8 fd08 	bl	8002f4c <HAL_Delay>
      ms++;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3301      	adds	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fa45 	bl	800b9d2 <USB_GetMode>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d01e      	beq.n	800a58c <USB_SetCurrentMode+0x84>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b31      	cmp	r3, #49	; 0x31
 800a552:	d9f0      	bls.n	800a536 <USB_SetCurrentMode+0x2e>
 800a554:	e01a      	b.n	800a58c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d115      	bne.n	800a588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a568:	2001      	movs	r0, #1
 800a56a:	f7f8 fcef 	bl	8002f4c <HAL_Delay>
      ms++;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 fa2c 	bl	800b9d2 <USB_GetMode>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <USB_SetCurrentMode+0x84>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b31      	cmp	r3, #49	; 0x31
 800a584:	d9f0      	bls.n	800a568 <USB_SetCurrentMode+0x60>
 800a586:	e001      	b.n	800a58c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e005      	b.n	800a598 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b32      	cmp	r3, #50	; 0x32
 800a590:	d101      	bne.n	800a596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b086      	sub	sp, #24
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	613b      	str	r3, [r7, #16]
 800a5be:	e009      	b.n	800a5d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	3340      	adds	r3, #64	; 0x40
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	613b      	str	r3, [r7, #16]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2b0e      	cmp	r3, #14
 800a5d8:	d9f2      	bls.n	800a5c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d11c      	bne.n	800a61a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ee:	f043 0302 	orr.w	r3, r3, #2
 800a5f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a610:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	639a      	str	r2, [r3, #56]	; 0x38
 800a618:	e00b      	b.n	800a632 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a638:	461a      	mov	r2, r3
 800a63a:	2300      	movs	r3, #0
 800a63c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a644:	4619      	mov	r1, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64c:	461a      	mov	r2, r3
 800a64e:	680b      	ldr	r3, [r1, #0]
 800a650:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	2b01      	cmp	r3, #1
 800a656:	d10c      	bne.n	800a672 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d104      	bne.n	800a668 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a65e:	2100      	movs	r1, #0
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f965 	bl	800a930 <USB_SetDevSpeed>
 800a666:	e008      	b.n	800a67a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a668:	2101      	movs	r1, #1
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f960 	bl	800a930 <USB_SetDevSpeed>
 800a670:	e003      	b.n	800a67a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a672:	2103      	movs	r1, #3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f95b 	bl	800a930 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a67a:	2110      	movs	r1, #16
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f8f3 	bl	800a868 <USB_FlushTxFifo>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f91f 	bl	800a8d0 <USB_FlushRxFifo>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	2300      	movs	r3, #0
 800a6be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	e043      	b.n	800a74e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6dc:	d118      	bne.n	800a710 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10a      	bne.n	800a6fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	e013      	b.n	800a722 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a706:	461a      	mov	r2, r3
 800a708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	e008      	b.n	800a722 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71c:	461a      	mov	r2, r3
 800a71e:	2300      	movs	r3, #0
 800a720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72e:	461a      	mov	r2, r3
 800a730:	2300      	movs	r3, #0
 800a732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a740:	461a      	mov	r2, r3
 800a742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	3301      	adds	r3, #1
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	429a      	cmp	r2, r3
 800a754:	d3b7      	bcc.n	800a6c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a756:	2300      	movs	r3, #0
 800a758:	613b      	str	r3, [r7, #16]
 800a75a:	e043      	b.n	800a7e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a76e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a772:	d118      	bne.n	800a7a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10a      	bne.n	800a790 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	461a      	mov	r2, r3
 800a788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	e013      	b.n	800a7b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	461a      	mov	r2, r3
 800a79e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	e008      	b.n	800a7b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	613b      	str	r3, [r7, #16]
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d3b7      	bcc.n	800a75c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a80c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	2b00      	cmp	r3, #0
 800a812:	d105      	bne.n	800a820 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	f043 0210 	orr.w	r2, r3, #16
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699a      	ldr	r2, [r3, #24]
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <USB_DevInit+0x2c4>)
 800a826:	4313      	orrs	r3, r2
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	f043 0208 	orr.w	r2, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d107      	bne.n	800a854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a84c:	f043 0304 	orr.w	r3, r3, #4
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a860:	b004      	add	sp, #16
 800a862:	4770      	bx	lr
 800a864:	803c3800 	.word	0x803c3800

0800a868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3301      	adds	r3, #1
 800a87a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4a13      	ldr	r2, [pc, #76]	; (800a8cc <USB_FlushTxFifo+0x64>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d901      	bls.n	800a888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e01b      	b.n	800a8c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	daf2      	bge.n	800a876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	019b      	lsls	r3, r3, #6
 800a898:	f043 0220 	orr.w	r2, r3, #32
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <USB_FlushTxFifo+0x64>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d901      	bls.n	800a8b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e006      	b.n	800a8c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d0f0      	beq.n	800a8a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	00030d40 	.word	0x00030d40

0800a8d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4a11      	ldr	r2, [pc, #68]	; (800a92c <USB_FlushRxFifo+0x5c>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d901      	bls.n	800a8ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e018      	b.n	800a920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	daf2      	bge.n	800a8dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2210      	movs	r2, #16
 800a8fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	3301      	adds	r3, #1
 800a904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <USB_FlushRxFifo+0x5c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d901      	bls.n	800a912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e006      	b.n	800a920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b10      	cmp	r3, #16
 800a91c:	d0f0      	beq.n	800a900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	00030d40 	.word	0x00030d40

0800a930 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	68f9      	ldr	r1, [r7, #12]
 800a94c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a950:	4313      	orrs	r3, r2
 800a952:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a962:	b480      	push	{r7}
 800a964:	b087      	sub	sp, #28
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f003 0306 	and.w	r3, r3, #6
 800a97a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a982:	2300      	movs	r3, #0
 800a984:	75fb      	strb	r3, [r7, #23]
 800a986:	e00a      	b.n	800a99e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d002      	beq.n	800a994 <USB_GetDevSpeed+0x32>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b06      	cmp	r3, #6
 800a992:	d102      	bne.n	800a99a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a994:	2302      	movs	r3, #2
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	e001      	b.n	800a99e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a99a:	230f      	movs	r3, #15
 800a99c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d13a      	bne.n	800aa3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ce:	69da      	ldr	r2, [r3, #28]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	2101      	movs	r1, #1
 800a9da:	fa01 f303 	lsl.w	r3, r1, r3
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d155      	bne.n	800aaac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	791b      	ldrb	r3, [r3, #4]
 800aa1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	059b      	lsls	r3, r3, #22
 800aa22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa24:	4313      	orrs	r3, r2
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	0151      	lsls	r1, r2, #5
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	440a      	add	r2, r1
 800aa2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	e036      	b.n	800aaac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa44:	69da      	ldr	r2, [r3, #28]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	f003 030f 	and.w	r3, r3, #15
 800aa4e:	2101      	movs	r1, #1
 800aa50:	fa01 f303 	lsl.w	r3, r1, r3
 800aa54:	041b      	lsls	r3, r3, #16
 800aa56:	68f9      	ldr	r1, [r7, #12]
 800aa58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11a      	bne.n	800aaac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	791b      	ldrb	r3, [r3, #4]
 800aa90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa92:	430b      	orrs	r3, r1
 800aa94:	4313      	orrs	r3, r2
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
	...

0800aabc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d161      	bne.n	800ab9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaee:	d11f      	bne.n	800ab30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	2101      	movs	r1, #1
 800ab42:	fa01 f303 	lsl.w	r3, r1, r3
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	43db      	mvns	r3, r3
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab50:	4013      	ands	r3, r2
 800ab52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5a:	69da      	ldr	r2, [r3, #28]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 030f 	and.w	r3, r3, #15
 800ab64:	2101      	movs	r1, #1
 800ab66:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab74:	4013      	ands	r3, r2
 800ab76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	0159      	lsls	r1, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	440b      	add	r3, r1
 800ab8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab92:	4619      	mov	r1, r3
 800ab94:	4b35      	ldr	r3, [pc, #212]	; (800ac6c <USB_DeactivateEndpoint+0x1b0>)
 800ab96:	4013      	ands	r3, r2
 800ab98:	600b      	str	r3, [r1, #0]
 800ab9a:	e060      	b.n	800ac5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abb2:	d11f      	bne.n	800abf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	0151      	lsls	r1, r2, #5
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	440a      	add	r2, r1
 800abca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 030f 	and.w	r3, r3, #15
 800ac04:	2101      	movs	r1, #1
 800ac06:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0a:	041b      	lsls	r3, r3, #16
 800ac0c:	43db      	mvns	r3, r3
 800ac0e:	68f9      	ldr	r1, [r7, #12]
 800ac10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac14:	4013      	ands	r3, r2
 800ac16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1e:	69da      	ldr	r2, [r3, #28]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f003 030f 	and.w	r3, r3, #15
 800ac28:	2101      	movs	r1, #1
 800ac2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2e:	041b      	lsls	r3, r3, #16
 800ac30:	43db      	mvns	r3, r3
 800ac32:	68f9      	ldr	r1, [r7, #12]
 800ac34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac38:	4013      	ands	r3, r2
 800ac3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	0159      	lsls	r1, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	440b      	add	r3, r1
 800ac52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac56:	4619      	mov	r1, r3
 800ac58:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <USB_DeactivateEndpoint+0x1b4>)
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	ec337800 	.word	0xec337800
 800ac70:	eff37800 	.word	0xeff37800

0800ac74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08a      	sub	sp, #40	; 0x28
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	785b      	ldrb	r3, [r3, #1]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	f040 815c 	bne.w	800af4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d132      	bne.n	800ad04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	0151      	lsls	r1, r2, #5
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	440a      	add	r2, r1
 800acb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	0151      	lsls	r1, r2, #5
 800acd4:	69fa      	ldr	r2, [r7, #28]
 800acd6:	440a      	add	r2, r1
 800acd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ace0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	69ba      	ldr	r2, [r7, #24]
 800acf2:	0151      	lsls	r1, r2, #5
 800acf4:	69fa      	ldr	r2, [r7, #28]
 800acf6:	440a      	add	r2, r1
 800acf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acfc:	0cdb      	lsrs	r3, r3, #19
 800acfe:	04db      	lsls	r3, r3, #19
 800ad00:	6113      	str	r3, [r2, #16]
 800ad02:	e074      	b.n	800adee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	0151      	lsls	r1, r2, #5
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	440a      	add	r2, r1
 800ad1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad1e:	0cdb      	lsrs	r3, r3, #19
 800ad20:	04db      	lsls	r3, r3, #19
 800ad22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	015a      	lsls	r2, r3, #5
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	69ba      	ldr	r2, [r7, #24]
 800ad34:	0151      	lsls	r1, r2, #5
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	440a      	add	r2, r1
 800ad3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	6999      	ldr	r1, [r3, #24]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	440b      	add	r3, r1
 800ad60:	1e59      	subs	r1, r3, #1
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad6c:	4b9d      	ldr	r3, [pc, #628]	; (800afe4 <USB_EPStartXfer+0x370>)
 800ad6e:	400b      	ands	r3, r1
 800ad70:	69b9      	ldr	r1, [r7, #24]
 800ad72:	0148      	lsls	r0, r1, #5
 800ad74:	69f9      	ldr	r1, [r7, #28]
 800ad76:	4401      	add	r1, r0
 800ad78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad8c:	691a      	ldr	r2, [r3, #16]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad96:	69b9      	ldr	r1, [r7, #24]
 800ad98:	0148      	lsls	r0, r1, #5
 800ad9a:	69f9      	ldr	r1, [r7, #28]
 800ad9c:	4401      	add	r1, r0
 800ad9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ada2:	4313      	orrs	r3, r2
 800ada4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d11f      	bne.n	800adee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	0151      	lsls	r1, r2, #5
 800adc0:	69fa      	ldr	r2, [r7, #28]
 800adc2:	440a      	add	r2, r1
 800adc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800adcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	0151      	lsls	r1, r2, #5
 800ade0:	69fa      	ldr	r2, [r7, #28]
 800ade2:	440a      	add	r2, r1
 800ade4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d14b      	bne.n	800ae8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae08:	461a      	mov	r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	791b      	ldrb	r3, [r3, #4]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d128      	bne.n	800ae6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d110      	bne.n	800ae4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	69ba      	ldr	r2, [r7, #24]
 800ae38:	0151      	lsls	r1, r2, #5
 800ae3a:	69fa      	ldr	r2, [r7, #28]
 800ae3c:	440a      	add	r2, r1
 800ae3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	e00f      	b.n	800ae6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	0151      	lsls	r1, r2, #5
 800ae7c:	69fa      	ldr	r2, [r7, #28]
 800ae7e:	440a      	add	r2, r1
 800ae80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e133      	b.n	800b0f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	69fa      	ldr	r2, [r7, #28]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aeaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	791b      	ldrb	r3, [r3, #4]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d015      	beq.n	800aee0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 811b 	beq.w	800b0f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	2101      	movs	r1, #1
 800aed0:	fa01 f303 	lsl.w	r3, r1, r3
 800aed4:	69f9      	ldr	r1, [r7, #28]
 800aed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeda:	4313      	orrs	r3, r2
 800aedc:	634b      	str	r3, [r1, #52]	; 0x34
 800aede:	e109      	b.n	800b0f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d110      	bne.n	800af12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	0151      	lsls	r1, r2, #5
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	440a      	add	r2, r1
 800af06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	e00f      	b.n	800af32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	0151      	lsls	r1, r2, #5
 800af24:	69fa      	ldr	r2, [r7, #28]
 800af26:	440a      	add	r2, r1
 800af28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6919      	ldr	r1, [r3, #16]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	b298      	uxth	r0, r3
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	4603      	mov	r3, r0
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 fade 	bl	800b508 <USB_WritePacket>
 800af4c:	e0d2      	b.n	800b0f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	0151      	lsls	r1, r2, #5
 800af60:	69fa      	ldr	r2, [r7, #28]
 800af62:	440a      	add	r2, r1
 800af64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af68:	0cdb      	lsrs	r3, r3, #19
 800af6a:	04db      	lsls	r3, r3, #19
 800af6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	69ba      	ldr	r2, [r7, #24]
 800af7e:	0151      	lsls	r1, r2, #5
 800af80:	69fa      	ldr	r2, [r7, #28]
 800af82:	440a      	add	r2, r1
 800af84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d126      	bne.n	800afe8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afb0:	69b9      	ldr	r1, [r7, #24]
 800afb2:	0148      	lsls	r0, r1, #5
 800afb4:	69f9      	ldr	r1, [r7, #28]
 800afb6:	4401      	add	r1, r0
 800afb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afbc:	4313      	orrs	r3, r2
 800afbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	0151      	lsls	r1, r2, #5
 800afd2:	69fa      	ldr	r2, [r7, #28]
 800afd4:	440a      	add	r2, r1
 800afd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afde:	6113      	str	r3, [r2, #16]
 800afe0:	e03a      	b.n	800b058 <USB_EPStartXfer+0x3e4>
 800afe2:	bf00      	nop
 800afe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	699a      	ldr	r2, [r3, #24]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	1e5a      	subs	r2, r3, #1
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800affc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	8afa      	ldrh	r2, [r7, #22]
 800b004:	fb03 f202 	mul.w	r2, r3, r2
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	8afb      	ldrh	r3, [r7, #22]
 800b01c:	04d9      	lsls	r1, r3, #19
 800b01e:	4b38      	ldr	r3, [pc, #224]	; (800b100 <USB_EPStartXfer+0x48c>)
 800b020:	400b      	ands	r3, r1
 800b022:	69b9      	ldr	r1, [r7, #24]
 800b024:	0148      	lsls	r0, r1, #5
 800b026:	69f9      	ldr	r1, [r7, #28]
 800b028:	4401      	add	r1, r0
 800b02a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b02e:	4313      	orrs	r3, r2
 800b030:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03e:	691a      	ldr	r2, [r3, #16]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b048:	69b9      	ldr	r1, [r7, #24]
 800b04a:	0148      	lsls	r0, r1, #5
 800b04c:	69f9      	ldr	r1, [r7, #28]
 800b04e:	4401      	add	r1, r0
 800b050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b054:	4313      	orrs	r3, r2
 800b056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d10d      	bne.n	800b07a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d009      	beq.n	800b07a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	6919      	ldr	r1, [r3, #16]
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	4413      	add	r3, r2
 800b072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b076:	460a      	mov	r2, r1
 800b078:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	791b      	ldrb	r3, [r3, #4]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d128      	bne.n	800b0d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d110      	bne.n	800b0b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	e00f      	b.n	800b0d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	1ff80000 	.word	0x1ff80000

0800b104 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4613      	mov	r3, r2
 800b110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	2b01      	cmp	r3, #1
 800b122:	f040 80ce 	bne.w	800b2c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d132      	bne.n	800b194 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	4413      	add	r3, r2
 800b136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	0151      	lsls	r1, r2, #5
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	440a      	add	r2, r1
 800b144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b14c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	0151      	lsls	r1, r2, #5
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	440a      	add	r2, r1
 800b168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	0151      	lsls	r1, r2, #5
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	440a      	add	r2, r1
 800b188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b18c:	0cdb      	lsrs	r3, r3, #19
 800b18e:	04db      	lsls	r3, r3, #19
 800b190:	6113      	str	r3, [r2, #16]
 800b192:	e04e      	b.n	800b232 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ae:	0cdb      	lsrs	r3, r3, #19
 800b1b0:	04db      	lsls	r3, r3, #19
 800b1b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	699a      	ldr	r2, [r3, #24]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d903      	bls.n	800b1ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	0151      	lsls	r1, r2, #5
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	440a      	add	r2, r1
 800b202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b20a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b222:	6939      	ldr	r1, [r7, #16]
 800b224:	0148      	lsls	r0, r1, #5
 800b226:	6979      	ldr	r1, [r7, #20]
 800b228:	4401      	add	r1, r0
 800b22a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b22e:	4313      	orrs	r3, r2
 800b230:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d11e      	bne.n	800b276 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24c:	461a      	mov	r2, r3
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	0151      	lsls	r1, r2, #5
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	440a      	add	r2, r1
 800b26a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b26e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	e097      	b.n	800b3a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	0151      	lsls	r1, r2, #5
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	440a      	add	r2, r1
 800b28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b294:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8083 	beq.w	800b3a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	f003 030f 	and.w	r3, r3, #15
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b6:	6979      	ldr	r1, [r7, #20]
 800b2b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	634b      	str	r3, [r1, #52]	; 0x34
 800b2c0:	e071      	b.n	800b3a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2dc:	0cdb      	lsrs	r3, r3, #19
 800b2de:	04db      	lsls	r3, r3, #19
 800b2e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	68da      	ldr	r2, [r3, #12]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	4413      	add	r3, r2
 800b326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	0151      	lsls	r1, r2, #5
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	440a      	add	r2, r1
 800b334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b33c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34a:	691a      	ldr	r2, [r3, #16]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b354:	6939      	ldr	r1, [r7, #16]
 800b356:	0148      	lsls	r0, r1, #5
 800b358:	6979      	ldr	r1, [r7, #20]
 800b35a:	4401      	add	r1, r0
 800b35c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b360:	4313      	orrs	r3, r2
 800b362:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d10d      	bne.n	800b386 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d009      	beq.n	800b386 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	6919      	ldr	r1, [r3, #16]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b382:	460a      	mov	r2, r1
 800b384:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	0151      	lsls	r1, r2, #5
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	440a      	add	r2, r1
 800b39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	371c      	adds	r7, #28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	785b      	ldrb	r3, [r3, #1]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d14a      	bne.n	800b468 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3ea:	f040 8086 	bne.w	800b4fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	7812      	ldrb	r2, [r2, #0]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	440a      	add	r2, r1
 800b408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b410:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	7812      	ldrb	r2, [r2, #0]
 800b426:	0151      	lsls	r1, r2, #5
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	440a      	add	r2, r1
 800b42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b442:	4293      	cmp	r3, r2
 800b444:	d902      	bls.n	800b44c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	75fb      	strb	r3, [r7, #23]
          break;
 800b44a:	e056      	b.n	800b4fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b464:	d0e7      	beq.n	800b436 <USB_EPStopXfer+0x82>
 800b466:	e048      	b.n	800b4fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b47c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b480:	d13b      	bne.n	800b4fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	7812      	ldrb	r2, [r2, #0]
 800b496:	0151      	lsls	r1, r2, #5
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	440a      	add	r2, r1
 800b49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	7812      	ldrb	r2, [r2, #0]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d902      	bls.n	800b4e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b4de:	e00c      	b.n	800b4fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	015a      	lsls	r2, r3, #5
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4f8:	d0e7      	beq.n	800b4ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	371c      	adds	r7, #28
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b508:	b480      	push	{r7}
 800b50a:	b089      	sub	sp, #36	; 0x24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4611      	mov	r1, r2
 800b514:	461a      	mov	r2, r3
 800b516:	460b      	mov	r3, r1
 800b518:	71fb      	strb	r3, [r7, #7]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d123      	bne.n	800b576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b52e:	88bb      	ldrh	r3, [r7, #4]
 800b530:	3303      	adds	r3, #3
 800b532:	089b      	lsrs	r3, r3, #2
 800b534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b536:	2300      	movs	r3, #0
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	e018      	b.n	800b56e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	031a      	lsls	r2, r3, #12
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	4413      	add	r3, r2
 800b544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b548:	461a      	mov	r2, r3
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	3301      	adds	r3, #1
 800b554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	3301      	adds	r3, #1
 800b55a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	3301      	adds	r3, #1
 800b560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	3301      	adds	r3, #1
 800b566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	3301      	adds	r3, #1
 800b56c:	61bb      	str	r3, [r7, #24]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	429a      	cmp	r2, r3
 800b574:	d3e2      	bcc.n	800b53c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3724      	adds	r7, #36	; 0x24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b584:	b480      	push	{r7}
 800b586:	b08b      	sub	sp, #44	; 0x2c
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b59a:	88fb      	ldrh	r3, [r7, #6]
 800b59c:	089b      	lsrs	r3, r3, #2
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5a2:	88fb      	ldrh	r3, [r7, #6]
 800b5a4:	f003 0303 	and.w	r3, r3, #3
 800b5a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	623b      	str	r3, [r7, #32]
 800b5ae:	e014      	b.n	800b5da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	3301      	adds	r3, #1
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	623b      	str	r3, [r7, #32]
 800b5da:	6a3a      	ldr	r2, [r7, #32]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d3e6      	bcc.n	800b5b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b5e2:	8bfb      	ldrh	r3, [r7, #30]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01e      	beq.n	800b626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f107 0310 	add.w	r3, r7, #16
 800b5f8:	6812      	ldr	r2, [r2, #0]
 800b5fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	b2db      	uxtb	r3, r3
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	fa22 f303 	lsr.w	r3, r2, r3
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	701a      	strb	r2, [r3, #0]
      i++;
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	3301      	adds	r3, #1
 800b612:	623b      	str	r3, [r7, #32]
      pDest++;
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	3301      	adds	r3, #1
 800b618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b61a:	8bfb      	ldrh	r3, [r7, #30]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b620:	8bfb      	ldrh	r3, [r7, #30]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1ea      	bne.n	800b5fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b628:	4618      	mov	r0, r3
 800b62a:	372c      	adds	r7, #44	; 0x2c
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d12c      	bne.n	800b6aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	db12      	blt.n	800b688 <USB_EPSetStall+0x54>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00f      	beq.n	800b688 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	0151      	lsls	r1, r2, #5
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	440a      	add	r2, r1
 800b67e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b686:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	015a      	lsls	r2, r3, #5
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4413      	add	r3, r2
 800b690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	0151      	lsls	r1, r2, #5
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	440a      	add	r2, r1
 800b69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	e02b      	b.n	800b702 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	db12      	blt.n	800b6e2 <USB_EPSetStall+0xae>
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	015a      	lsls	r2, r3, #5
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	0151      	lsls	r1, r2, #5
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	440a      	add	r2, r1
 800b6d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	0151      	lsls	r1, r2, #5
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	440a      	add	r2, r1
 800b6f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	785b      	ldrb	r3, [r3, #1]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d128      	bne.n	800b77e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	0151      	lsls	r1, r2, #5
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	440a      	add	r2, r1
 800b742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b74a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	791b      	ldrb	r3, [r3, #4]
 800b750:	2b03      	cmp	r3, #3
 800b752:	d003      	beq.n	800b75c <USB_EPClearStall+0x4c>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	791b      	ldrb	r3, [r3, #4]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d138      	bne.n	800b7ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	015a      	lsls	r2, r3, #5
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	4413      	add	r3, r2
 800b764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	0151      	lsls	r1, r2, #5
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	440a      	add	r2, r1
 800b772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	e027      	b.n	800b7ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	0151      	lsls	r1, r2, #5
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	440a      	add	r2, r1
 800b794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b79c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	791b      	ldrb	r3, [r3, #4]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d003      	beq.n	800b7ae <USB_EPClearStall+0x9e>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d10f      	bne.n	800b7ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	015a      	lsls	r2, r3, #5
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	0151      	lsls	r1, r2, #5
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	440a      	add	r2, r1
 800b7c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	78fb      	ldrb	r3, [r7, #3]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b810:	68f9      	ldr	r1, [r7, #12]
 800b812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b816:	4313      	orrs	r3, r2
 800b818:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b842:	f023 0303 	bic.w	r3, r3, #3
 800b846:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b856:	f023 0302 	bic.w	r3, r3, #2
 800b85a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b884:	f023 0303 	bic.w	r3, r3, #3
 800b888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b898:	f043 0302 	orr.w	r3, r3, #2
 800b89c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b085      	sub	sp, #20
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	0c1b      	lsrs	r3, r3, #16
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b906:	b480      	push	{r7}
 800b908:	b085      	sub	sp, #20
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b922:	69db      	ldr	r3, [r3, #28]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	4013      	ands	r3, r2
 800b928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	b29b      	uxth	r3, r3
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	460b      	mov	r3, r1
 800b944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	4413      	add	r3, r2
 800b952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	4013      	ands	r3, r2
 800b966:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b968:	68bb      	ldr	r3, [r7, #8]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b976:	b480      	push	{r7}
 800b978:	b087      	sub	sp, #28
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b998:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	f003 030f 	and.w	r3, r3, #15
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a6:	01db      	lsls	r3, r3, #7
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	371c      	adds	r7, #28
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	f003 0301 	and.w	r3, r3, #1
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b085      	sub	sp, #20
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba0c:	f023 0307 	bic.w	r3, r3, #7
 800ba10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	333c      	adds	r3, #60	; 0x3c
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	4a26      	ldr	r2, [pc, #152]	; (800baec <USB_EP0_OutStart+0xb8>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d90a      	bls.n	800ba6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba68:	d101      	bne.n	800ba6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e037      	b.n	800bade <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba74:	461a      	mov	r2, r3
 800ba76:	2300      	movs	r3, #0
 800ba78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba9c:	f043 0318 	orr.w	r3, r3, #24
 800baa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bab4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bab6:	7afb      	ldrb	r3, [r7, #11]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d10f      	bne.n	800badc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	4f54300a 	.word	0x4f54300a

0800baf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	3301      	adds	r3, #1
 800bb00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	4a13      	ldr	r2, [pc, #76]	; (800bb54 <USB_CoreReset+0x64>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d901      	bls.n	800bb0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	e01b      	b.n	800bb46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	daf2      	bge.n	800bafc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f043 0201 	orr.w	r2, r3, #1
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4a09      	ldr	r2, [pc, #36]	; (800bb54 <USB_CoreReset+0x64>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d901      	bls.n	800bb38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e006      	b.n	800bb46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d0f0      	beq.n	800bb26 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	00030d40 	.word	0x00030d40

0800bb58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bb5c:	4904      	ldr	r1, [pc, #16]	; (800bb70 <MX_FATFS_Init+0x18>)
 800bb5e:	4805      	ldr	r0, [pc, #20]	; (800bb74 <MX_FATFS_Init+0x1c>)
 800bb60:	f002 f9ac 	bl	800debc <FATFS_LinkDriver>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461a      	mov	r2, r3
 800bb68:	4b03      	ldr	r3, [pc, #12]	; (800bb78 <MX_FATFS_Init+0x20>)
 800bb6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bb6c:	bf00      	nop
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	200005a8 	.word	0x200005a8
 800bb74:	080115cc 	.word	0x080115cc
 800bb78:	200005a4 	.word	0x200005a4

0800bb7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bb86:	f000 f879 	bl	800bc7c <BSP_SD_IsDetected>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d001      	beq.n	800bb94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e012      	b.n	800bbba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bb94:	480b      	ldr	r0, [pc, #44]	; (800bbc4 <BSP_SD_Init+0x48>)
 800bb96:	f7fa feab 	bl	80068f0 <HAL_SD_Init>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d109      	bne.n	800bbb8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bba8:	4806      	ldr	r0, [pc, #24]	; (800bbc4 <BSP_SD_Init+0x48>)
 800bbaa:	f7fb fc85 	bl	80074b8 <HAL_SD_ConfigWideBusOperation>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	200003a8 	.word	0x200003a8

0800bbc8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	68f9      	ldr	r1, [r7, #12]
 800bbe4:	4806      	ldr	r0, [pc, #24]	; (800bc00 <BSP_SD_ReadBlocks+0x38>)
 800bbe6:	f7fa ff33 	bl	8006a50 <HAL_SD_ReadBlocks>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	200003a8 	.word	0x200003a8

0800bc04 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af02      	add	r7, sp, #8
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	68f9      	ldr	r1, [r7, #12]
 800bc20:	4806      	ldr	r0, [pc, #24]	; (800bc3c <BSP_SD_WriteBlocks+0x38>)
 800bc22:	f7fb f8f3 	bl	8006e0c <HAL_SD_WriteBlocks>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200003a8 	.word	0x200003a8

0800bc40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bc44:	4805      	ldr	r0, [pc, #20]	; (800bc5c <BSP_SD_GetCardState+0x1c>)
 800bc46:	f7fb fcd1 	bl	80075ec <HAL_SD_GetCardState>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	bf14      	ite	ne
 800bc50:	2301      	movne	r3, #1
 800bc52:	2300      	moveq	r3, #0
 800bc54:	b2db      	uxtb	r3, r3
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	200003a8 	.word	0x200003a8

0800bc60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bc68:	6879      	ldr	r1, [r7, #4]
 800bc6a:	4803      	ldr	r0, [pc, #12]	; (800bc78 <BSP_SD_GetCardInfo+0x18>)
 800bc6c:	f7fb fbf8 	bl	8007460 <HAL_SD_GetCardInfo>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	200003a8 	.word	0x200003a8

0800bc7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bc82:	2301      	movs	r3, #1
 800bc84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bc86:	f000 f80b 	bl	800bca0 <BSP_PlatformIsDetected>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bc90:	2300      	movs	r3, #0
 800bc92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	b2db      	uxtb	r3, r3
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bca6:	2301      	movs	r3, #1
 800bca8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bcaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bcae:	4806      	ldr	r0, [pc, #24]	; (800bcc8 <BSP_PlatformIsDetected+0x28>)
 800bcb0:	f7f7 ff82 	bl	8003bb8 <HAL_GPIO_ReadPin>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	40020000 	.word	0x40020000

0800bccc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <SD_CheckStatus+0x38>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bcdc:	f7ff ffb0 	bl	800bc40 <BSP_SD_GetCardState>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bce6:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <SD_CheckStatus+0x38>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f023 0301 	bic.w	r3, r3, #1
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <SD_CheckStatus+0x38>)
 800bcf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bcf6:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <SD_CheckStatus+0x38>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b2db      	uxtb	r3, r3
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20000009 	.word	0x20000009

0800bd08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bd12:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <SD_initialize+0x38>)
 800bd14:	2201      	movs	r2, #1
 800bd16:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd18:	f7ff ff30 	bl	800bb7c <BSP_SD_Init>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d107      	bne.n	800bd32 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff ffd1 	bl	800bccc <SD_CheckStatus>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4b04      	ldr	r3, [pc, #16]	; (800bd40 <SD_initialize+0x38>)
 800bd30:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bd32:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <SD_initialize+0x38>)
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	b2db      	uxtb	r3, r3
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000009 	.word	0x20000009

0800bd44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff ffbb 	bl	800bccc <SD_CheckStatus>
 800bd56:	4603      	mov	r3, r0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	607a      	str	r2, [r7, #4]
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bd74:	f04f 33ff 	mov.w	r3, #4294967295
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	68b8      	ldr	r0, [r7, #8]
 800bd7e:	f7ff ff23 	bl	800bbc8 <BSP_SD_ReadBlocks>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d107      	bne.n	800bd98 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bd88:	bf00      	nop
 800bd8a:	f7ff ff59 	bl	800bc40 <BSP_SD_GetCardState>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1fa      	bne.n	800bd8a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b086      	sub	sp, #24
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	68b8      	ldr	r0, [r7, #8]
 800bdc0:	f7ff ff20 	bl	800bc04 <BSP_SD_WriteBlocks>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d107      	bne.n	800bdda <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bdca:	bf00      	nop
 800bdcc:	f7ff ff38 	bl	800bc40 <BSP_SD_GetCardState>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1fa      	bne.n	800bdcc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08c      	sub	sp, #48	; 0x30
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	603a      	str	r2, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bdfa:	4b25      	ldr	r3, [pc, #148]	; (800be90 <SD_ioctl+0xac>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <SD_ioctl+0x28>
 800be08:	2303      	movs	r3, #3
 800be0a:	e03c      	b.n	800be86 <SD_ioctl+0xa2>

  switch (cmd)
 800be0c:	79bb      	ldrb	r3, [r7, #6]
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d834      	bhi.n	800be7c <SD_ioctl+0x98>
 800be12:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <SD_ioctl+0x34>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be29 	.word	0x0800be29
 800be1c:	0800be31 	.word	0x0800be31
 800be20:	0800be49 	.word	0x0800be49
 800be24:	0800be63 	.word	0x0800be63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be2e:	e028      	b.n	800be82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800be30:	f107 030c 	add.w	r3, r7, #12
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff ff13 	bl	800bc60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800be3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be46:	e01c      	b.n	800be82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be48:	f107 030c 	add.w	r3, r7, #12
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff ff07 	bl	800bc60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	b29a      	uxth	r2, r3
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be60:	e00f      	b.n	800be82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be62:	f107 030c 	add.w	r3, r7, #12
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff fefa 	bl	800bc60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	0a5a      	lsrs	r2, r3, #9
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be7a:	e002      	b.n	800be82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800be82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be86:	4618      	mov	r0, r3
 800be88:	3730      	adds	r7, #48	; 0x30
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000009 	.word	0x20000009

0800be94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	460b      	mov	r3, r1
 800be9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bea0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bea4:	f002 fcf0 	bl	800e888 <USBD_static_malloc>
 800bea8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d109      	bne.n	800bec4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	32b0      	adds	r2, #176	; 0xb0
 800beba:	2100      	movs	r1, #0
 800bebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bec0:	2302      	movs	r3, #2
 800bec2:	e0d4      	b.n	800c06e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bec4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bec8:	2100      	movs	r1, #0
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f002 fd4a 	bl	800e964 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32b0      	adds	r2, #176	; 0xb0
 800beda:	68f9      	ldr	r1, [r7, #12]
 800bedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	32b0      	adds	r2, #176	; 0xb0
 800beea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7c1b      	ldrb	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d138      	bne.n	800bf6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800befc:	4b5e      	ldr	r3, [pc, #376]	; (800c078 <USBD_CDC_Init+0x1e4>)
 800befe:	7819      	ldrb	r1, [r3, #0]
 800bf00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf04:	2202      	movs	r2, #2
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f002 fb9b 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf0c:	4b5a      	ldr	r3, [pc, #360]	; (800c078 <USBD_CDC_Init+0x1e4>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	f003 020f 	and.w	r2, r3, #15
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	440b      	add	r3, r1
 800bf20:	3324      	adds	r3, #36	; 0x24
 800bf22:	2201      	movs	r2, #1
 800bf24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf26:	4b55      	ldr	r3, [pc, #340]	; (800c07c <USBD_CDC_Init+0x1e8>)
 800bf28:	7819      	ldrb	r1, [r3, #0]
 800bf2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf2e:	2202      	movs	r2, #2
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f002 fb86 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf36:	4b51      	ldr	r3, [pc, #324]	; (800c07c <USBD_CDC_Init+0x1e8>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	f003 020f 	and.w	r2, r3, #15
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf4e:	2201      	movs	r2, #1
 800bf50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf52:	4b4b      	ldr	r3, [pc, #300]	; (800c080 <USBD_CDC_Init+0x1ec>)
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	f003 020f 	and.w	r2, r3, #15
 800bf5a:	6879      	ldr	r1, [r7, #4]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	440b      	add	r3, r1
 800bf66:	3326      	adds	r3, #38	; 0x26
 800bf68:	2210      	movs	r2, #16
 800bf6a:	801a      	strh	r2, [r3, #0]
 800bf6c:	e035      	b.n	800bfda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf6e:	4b42      	ldr	r3, [pc, #264]	; (800c078 <USBD_CDC_Init+0x1e4>)
 800bf70:	7819      	ldrb	r1, [r3, #0]
 800bf72:	2340      	movs	r3, #64	; 0x40
 800bf74:	2202      	movs	r2, #2
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f002 fb63 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf7c:	4b3e      	ldr	r3, [pc, #248]	; (800c078 <USBD_CDC_Init+0x1e4>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	f003 020f 	and.w	r2, r3, #15
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	4613      	mov	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	440b      	add	r3, r1
 800bf90:	3324      	adds	r3, #36	; 0x24
 800bf92:	2201      	movs	r2, #1
 800bf94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf96:	4b39      	ldr	r3, [pc, #228]	; (800c07c <USBD_CDC_Init+0x1e8>)
 800bf98:	7819      	ldrb	r1, [r3, #0]
 800bf9a:	2340      	movs	r3, #64	; 0x40
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f002 fb4f 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bfa4:	4b35      	ldr	r3, [pc, #212]	; (800c07c <USBD_CDC_Init+0x1e8>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 020f 	and.w	r2, r3, #15
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	440b      	add	r3, r1
 800bfb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfc0:	4b2f      	ldr	r3, [pc, #188]	; (800c080 <USBD_CDC_Init+0x1ec>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	f003 020f 	and.w	r2, r3, #15
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	440b      	add	r3, r1
 800bfd4:	3326      	adds	r3, #38	; 0x26
 800bfd6:	2210      	movs	r2, #16
 800bfd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfda:	4b29      	ldr	r3, [pc, #164]	; (800c080 <USBD_CDC_Init+0x1ec>)
 800bfdc:	7819      	ldrb	r1, [r3, #0]
 800bfde:	2308      	movs	r3, #8
 800bfe0:	2203      	movs	r2, #3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f002 fb2d 	bl	800e642 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bfe8:	4b25      	ldr	r3, [pc, #148]	; (800c080 <USBD_CDC_Init+0x1ec>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	f003 020f 	and.w	r2, r3, #15
 800bff0:	6879      	ldr	r1, [r7, #4]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	440b      	add	r3, r1
 800bffc:	3324      	adds	r3, #36	; 0x24
 800bffe:	2201      	movs	r2, #1
 800c000:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	33b0      	adds	r3, #176	; 0xb0
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c038:	2302      	movs	r3, #2
 800c03a:	e018      	b.n	800c06e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7c1b      	ldrb	r3, [r3, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10a      	bne.n	800c05a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c044:	4b0d      	ldr	r3, [pc, #52]	; (800c07c <USBD_CDC_Init+0x1e8>)
 800c046:	7819      	ldrb	r1, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f002 fbe4 	bl	800e820 <USBD_LL_PrepareReceive>
 800c058:	e008      	b.n	800c06c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c05a:	4b08      	ldr	r3, [pc, #32]	; (800c07c <USBD_CDC_Init+0x1e8>)
 800c05c:	7819      	ldrb	r1, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c064:	2340      	movs	r3, #64	; 0x40
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f002 fbda 	bl	800e820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20000093 	.word	0x20000093
 800c07c:	20000094 	.word	0x20000094
 800c080:	20000095 	.word	0x20000095

0800c084 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c090:	4b3a      	ldr	r3, [pc, #232]	; (800c17c <USBD_CDC_DeInit+0xf8>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f002 faf9 	bl	800e68e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c09c:	4b37      	ldr	r3, [pc, #220]	; (800c17c <USBD_CDC_DeInit+0xf8>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f003 020f 	and.w	r2, r3, #15
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	440b      	add	r3, r1
 800c0b0:	3324      	adds	r3, #36	; 0x24
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c0b6:	4b32      	ldr	r3, [pc, #200]	; (800c180 <USBD_CDC_DeInit+0xfc>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f002 fae6 	bl	800e68e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c0c2:	4b2f      	ldr	r3, [pc, #188]	; (800c180 <USBD_CDC_DeInit+0xfc>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	f003 020f 	and.w	r2, r3, #15
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	440b      	add	r3, r1
 800c0d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0da:	2200      	movs	r2, #0
 800c0dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c0de:	4b29      	ldr	r3, [pc, #164]	; (800c184 <USBD_CDC_DeInit+0x100>)
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f002 fad2 	bl	800e68e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c0ea:	4b26      	ldr	r3, [pc, #152]	; (800c184 <USBD_CDC_DeInit+0x100>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	f003 020f 	and.w	r2, r3, #15
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	3324      	adds	r3, #36	; 0x24
 800c100:	2200      	movs	r2, #0
 800c102:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c104:	4b1f      	ldr	r3, [pc, #124]	; (800c184 <USBD_CDC_DeInit+0x100>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	f003 020f 	and.w	r2, r3, #15
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	440b      	add	r3, r1
 800c118:	3326      	adds	r3, #38	; 0x26
 800c11a:	2200      	movs	r2, #0
 800c11c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	32b0      	adds	r2, #176	; 0xb0
 800c128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01f      	beq.n	800c170 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	33b0      	adds	r3, #176	; 0xb0
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	32b0      	adds	r2, #176	; 0xb0
 800c14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c152:	4618      	mov	r0, r3
 800c154:	f002 fba6 	bl	800e8a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	32b0      	adds	r2, #176	; 0xb0
 800c162:	2100      	movs	r1, #0
 800c164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20000093 	.word	0x20000093
 800c180:	20000094 	.word	0x20000094
 800c184:	20000095 	.word	0x20000095

0800c188 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	32b0      	adds	r2, #176	; 0xb0
 800c19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	e0bf      	b.n	800c338 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d050      	beq.n	800c266 <USBD_CDC_Setup+0xde>
 800c1c4:	2b20      	cmp	r3, #32
 800c1c6:	f040 80af 	bne.w	800c328 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	88db      	ldrh	r3, [r3, #6]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d03a      	beq.n	800c248 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	b25b      	sxtb	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	da1b      	bge.n	800c214 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	33b0      	adds	r3, #176	; 0xb0
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	4413      	add	r3, r2
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c1f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	88d2      	ldrh	r2, [r2, #6]
 800c1f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	88db      	ldrh	r3, [r3, #6]
 800c1fe:	2b07      	cmp	r3, #7
 800c200:	bf28      	it	cs
 800c202:	2307      	movcs	r3, #7
 800c204:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	89fa      	ldrh	r2, [r7, #14]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 fd89 	bl	800dd24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c212:	e090      	b.n	800c336 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	785a      	ldrb	r2, [r3, #1]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	88db      	ldrh	r3, [r3, #6]
 800c222:	2b3f      	cmp	r3, #63	; 0x3f
 800c224:	d803      	bhi.n	800c22e <USBD_CDC_Setup+0xa6>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	88db      	ldrh	r3, [r3, #6]
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	e000      	b.n	800c230 <USBD_CDC_Setup+0xa8>
 800c22e:	2240      	movs	r2, #64	; 0x40
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c236:	6939      	ldr	r1, [r7, #16]
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c23e:	461a      	mov	r2, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f001 fd9b 	bl	800dd7c <USBD_CtlPrepareRx>
      break;
 800c246:	e076      	b.n	800c336 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	33b0      	adds	r3, #176	; 0xb0
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	7850      	ldrb	r0, [r2, #1]
 800c25e:	2200      	movs	r2, #0
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	4798      	blx	r3
      break;
 800c264:	e067      	b.n	800c336 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	785b      	ldrb	r3, [r3, #1]
 800c26a:	2b0b      	cmp	r3, #11
 800c26c:	d851      	bhi.n	800c312 <USBD_CDC_Setup+0x18a>
 800c26e:	a201      	add	r2, pc, #4	; (adr r2, 800c274 <USBD_CDC_Setup+0xec>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c2a5 	.word	0x0800c2a5
 800c278:	0800c321 	.word	0x0800c321
 800c27c:	0800c313 	.word	0x0800c313
 800c280:	0800c313 	.word	0x0800c313
 800c284:	0800c313 	.word	0x0800c313
 800c288:	0800c313 	.word	0x0800c313
 800c28c:	0800c313 	.word	0x0800c313
 800c290:	0800c313 	.word	0x0800c313
 800c294:	0800c313 	.word	0x0800c313
 800c298:	0800c313 	.word	0x0800c313
 800c29c:	0800c2cf 	.word	0x0800c2cf
 800c2a0:	0800c2f9 	.word	0x0800c2f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b03      	cmp	r3, #3
 800c2ae:	d107      	bne.n	800c2c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c2b0:	f107 030a 	add.w	r3, r7, #10
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 fd33 	bl	800dd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2be:	e032      	b.n	800c326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f001 fcbd 	bl	800dc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	75fb      	strb	r3, [r7, #23]
          break;
 800c2cc:	e02b      	b.n	800c326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d107      	bne.n	800c2ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2da:	f107 030d 	add.w	r3, r7, #13
 800c2de:	2201      	movs	r2, #1
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 fd1e 	bl	800dd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2e8:	e01d      	b.n	800c326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 fca8 	bl	800dc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	75fb      	strb	r3, [r7, #23]
          break;
 800c2f6:	e016      	b.n	800c326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b03      	cmp	r3, #3
 800c302:	d00f      	beq.n	800c324 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f001 fc9b 	bl	800dc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c310:	e008      	b.n	800c324 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 fc94 	bl	800dc42 <USBD_CtlError>
          ret = USBD_FAIL;
 800c31a:	2303      	movs	r3, #3
 800c31c:	75fb      	strb	r3, [r7, #23]
          break;
 800c31e:	e002      	b.n	800c326 <USBD_CDC_Setup+0x19e>
          break;
 800c320:	bf00      	nop
 800c322:	e008      	b.n	800c336 <USBD_CDC_Setup+0x1ae>
          break;
 800c324:	bf00      	nop
      }
      break;
 800c326:	e006      	b.n	800c336 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f001 fc89 	bl	800dc42 <USBD_CtlError>
      ret = USBD_FAIL;
 800c330:	2303      	movs	r3, #3
 800c332:	75fb      	strb	r3, [r7, #23]
      break;
 800c334:	bf00      	nop
  }

  return (uint8_t)ret;
 800c336:	7dfb      	ldrb	r3, [r7, #23]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	460b      	mov	r3, r1
 800c34a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c352:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	32b0      	adds	r2, #176	; 0xb0
 800c35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c366:	2303      	movs	r3, #3
 800c368:	e065      	b.n	800c436 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	32b0      	adds	r2, #176	; 0xb0
 800c374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c378:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c37a:	78fb      	ldrb	r3, [r7, #3]
 800c37c:	f003 020f 	and.w	r2, r3, #15
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	440b      	add	r3, r1
 800c38c:	3318      	adds	r3, #24
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d02f      	beq.n	800c3f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c394:	78fb      	ldrb	r3, [r7, #3]
 800c396:	f003 020f 	and.w	r2, r3, #15
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	4613      	mov	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	440b      	add	r3, r1
 800c3a6:	3318      	adds	r3, #24
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	f003 010f 	and.w	r1, r3, #15
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	440b      	add	r3, r1
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4403      	add	r3, r0
 800c3bc:	3348      	adds	r3, #72	; 0x48
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3c4:	fb01 f303 	mul.w	r3, r1, r3
 800c3c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d112      	bne.n	800c3f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c3ce:	78fb      	ldrb	r3, [r7, #3]
 800c3d0:	f003 020f 	and.w	r2, r3, #15
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4413      	add	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	440b      	add	r3, r1
 800c3e0:	3318      	adds	r3, #24
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3e6:	78f9      	ldrb	r1, [r7, #3]
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f002 f9f6 	bl	800e7de <USBD_LL_Transmit>
 800c3f2:	e01f      	b.n	800c434 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	33b0      	adds	r3, #176	; 0xb0
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d010      	beq.n	800c434 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	33b0      	adds	r3, #176	; 0xb0
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c430:	78fa      	ldrb	r2, [r7, #3]
 800c432:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	460b      	mov	r3, r1
 800c448:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	32b0      	adds	r2, #176	; 0xb0
 800c454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c458:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	32b0      	adds	r2, #176	; 0xb0
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e01a      	b.n	800c4a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f002 f9f4 	bl	800e862 <USBD_LL_GetRxDataSize>
 800c47a:	4602      	mov	r2, r0
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	33b0      	adds	r3, #176	; 0xb0
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	32b0      	adds	r2, #176	; 0xb0
 800c4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e025      	b.n	800c51c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	33b0      	adds	r3, #176	; 0xb0
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01a      	beq.n	800c51a <USBD_CDC_EP0_RxReady+0x6c>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c4ea:	2bff      	cmp	r3, #255	; 0xff
 800c4ec:	d015      	beq.n	800c51a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	33b0      	adds	r3, #176	; 0xb0
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c506:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c50e:	b292      	uxth	r2, r2
 800c510:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	22ff      	movs	r2, #255	; 0xff
 800c516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c52c:	2182      	movs	r1, #130	; 0x82
 800c52e:	4818      	ldr	r0, [pc, #96]	; (800c590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c530:	f000 fd4f 	bl	800cfd2 <USBD_GetEpDesc>
 800c534:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c536:	2101      	movs	r1, #1
 800c538:	4815      	ldr	r0, [pc, #84]	; (800c590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c53a:	f000 fd4a 	bl	800cfd2 <USBD_GetEpDesc>
 800c53e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c540:	2181      	movs	r1, #129	; 0x81
 800c542:	4813      	ldr	r0, [pc, #76]	; (800c590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c544:	f000 fd45 	bl	800cfd2 <USBD_GetEpDesc>
 800c548:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2210      	movs	r2, #16
 800c554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d006      	beq.n	800c56a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2200      	movs	r2, #0
 800c560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c564:	711a      	strb	r2, [r3, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c578:	711a      	strb	r2, [r3, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2243      	movs	r2, #67	; 0x43
 800c582:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000050 	.word	0x20000050

0800c594 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c59c:	2182      	movs	r1, #130	; 0x82
 800c59e:	4818      	ldr	r0, [pc, #96]	; (800c600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5a0:	f000 fd17 	bl	800cfd2 <USBD_GetEpDesc>
 800c5a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	4815      	ldr	r0, [pc, #84]	; (800c600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5aa:	f000 fd12 	bl	800cfd2 <USBD_GetEpDesc>
 800c5ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5b0:	2181      	movs	r1, #129	; 0x81
 800c5b2:	4813      	ldr	r0, [pc, #76]	; (800c600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5b4:	f000 fd0d 	bl	800cfd2 <USBD_GetEpDesc>
 800c5b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2210      	movs	r2, #16
 800c5c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d006      	beq.n	800c5da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	711a      	strb	r2, [r3, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f042 0202 	orr.w	r2, r2, #2
 800c5d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d006      	beq.n	800c5ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	711a      	strb	r2, [r3, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f042 0202 	orr.w	r2, r2, #2
 800c5ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2243      	movs	r2, #67	; 0x43
 800c5f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5f4:	4b02      	ldr	r3, [pc, #8]	; (800c600 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	20000050 	.word	0x20000050

0800c604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c60c:	2182      	movs	r1, #130	; 0x82
 800c60e:	4818      	ldr	r0, [pc, #96]	; (800c670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c610:	f000 fcdf 	bl	800cfd2 <USBD_GetEpDesc>
 800c614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c616:	2101      	movs	r1, #1
 800c618:	4815      	ldr	r0, [pc, #84]	; (800c670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c61a:	f000 fcda 	bl	800cfd2 <USBD_GetEpDesc>
 800c61e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c620:	2181      	movs	r1, #129	; 0x81
 800c622:	4813      	ldr	r0, [pc, #76]	; (800c670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c624:	f000 fcd5 	bl	800cfd2 <USBD_GetEpDesc>
 800c628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	2210      	movs	r2, #16
 800c634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d006      	beq.n	800c64a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2200      	movs	r2, #0
 800c640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c644:	711a      	strb	r2, [r3, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c658:	711a      	strb	r2, [r3, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2243      	movs	r2, #67	; 0x43
 800c662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c664:	4b02      	ldr	r3, [pc, #8]	; (800c670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c666:	4618      	mov	r0, r3
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20000050 	.word	0x20000050

0800c674 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	220a      	movs	r2, #10
 800c680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c682:	4b03      	ldr	r3, [pc, #12]	; (800c690 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c684:	4618      	mov	r0, r3
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	2000000c 	.word	0x2000000c

0800c694 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e009      	b.n	800c6bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	33b0      	adds	r3, #176	; 0xb0
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	32b0      	adds	r2, #176	; 0xb0
 800c6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d101      	bne.n	800c6ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e008      	b.n	800c700 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	371c      	adds	r7, #28
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	32b0      	adds	r2, #176	; 0xb0
 800c720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e004      	b.n	800c73a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
	...

0800c748 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	32b0      	adds	r2, #176	; 0xb0
 800c75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c760:	2301      	movs	r3, #1
 800c762:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	32b0      	adds	r2, #176	; 0xb0
 800c76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c776:	2303      	movs	r3, #3
 800c778:	e025      	b.n	800c7c6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c780:	2b00      	cmp	r3, #0
 800c782:	d11f      	bne.n	800c7c4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2201      	movs	r2, #1
 800c788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c78c:	4b10      	ldr	r3, [pc, #64]	; (800c7d0 <USBD_CDC_TransmitPacket+0x88>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	f003 020f 	and.w	r2, r3, #15
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	4613      	mov	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4403      	add	r3, r0
 800c7a6:	3318      	adds	r3, #24
 800c7a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c7aa:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <USBD_CDC_TransmitPacket+0x88>)
 800c7ac:	7819      	ldrb	r1, [r3, #0]
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f002 f80f 	bl	800e7de <USBD_LL_Transmit>

    ret = USBD_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000093 	.word	0x20000093

0800c7d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	32b0      	adds	r2, #176	; 0xb0
 800c7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	32b0      	adds	r2, #176	; 0xb0
 800c7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d101      	bne.n	800c802 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c7fe:	2303      	movs	r3, #3
 800c800:	e018      	b.n	800c834 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7c1b      	ldrb	r3, [r3, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10a      	bne.n	800c820 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c80a:	4b0c      	ldr	r3, [pc, #48]	; (800c83c <USBD_CDC_ReceivePacket+0x68>)
 800c80c:	7819      	ldrb	r1, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f002 f801 	bl	800e820 <USBD_LL_PrepareReceive>
 800c81e:	e008      	b.n	800c832 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c820:	4b06      	ldr	r3, [pc, #24]	; (800c83c <USBD_CDC_ReceivePacket+0x68>)
 800c822:	7819      	ldrb	r1, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c82a:	2340      	movs	r3, #64	; 0x40
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 fff7 	bl	800e820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	20000094 	.word	0x20000094

0800c840 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4613      	mov	r3, r2
 800c84c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c854:	2303      	movs	r3, #3
 800c856:	e01f      	b.n	800c898 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	79fa      	ldrb	r2, [r7, #7]
 800c88a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f001 fe71 	bl	800e574 <USBD_LL_Init>
 800c892:	4603      	mov	r3, r0
 800c894:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c896:	7dfb      	ldrb	r3, [r7, #23]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e025      	b.n	800c904 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	32ae      	adds	r2, #174	; 0xae
 800c8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00f      	beq.n	800c8f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	32ae      	adds	r2, #174	; 0xae
 800c8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	f107 020e 	add.w	r2, r7, #14
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 fe79 	bl	800e60c <USBD_LL_Start>
 800c91a:	4603      	mov	r3, r0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c92c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	460b      	mov	r3, r1
 800c944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	78fa      	ldrb	r2, [r7, #3]
 800c95e:	4611      	mov	r1, r2
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	4798      	blx	r3
 800c964:	4603      	mov	r3, r0
 800c966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c968:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b084      	sub	sp, #16
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	460b      	mov	r3, r1
 800c97c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c97e:	2300      	movs	r3, #0
 800c980:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	78fa      	ldrb	r2, [r7, #3]
 800c98c:	4611      	mov	r1, r2
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	4798      	blx	r3
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c998:	2303      	movs	r3, #3
 800c99a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f001 f908 	bl	800dbce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9da:	f003 031f 	and.w	r3, r3, #31
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d01a      	beq.n	800ca18 <USBD_LL_SetupStage+0x72>
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d822      	bhi.n	800ca2c <USBD_LL_SetupStage+0x86>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <USBD_LL_SetupStage+0x4a>
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d00a      	beq.n	800ca04 <USBD_LL_SetupStage+0x5e>
 800c9ee:	e01d      	b.n	800ca2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fb5f 	bl	800d0bc <USBD_StdDevReq>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73fb      	strb	r3, [r7, #15]
      break;
 800ca02:	e020      	b.n	800ca46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fbc7 	bl	800d1a0 <USBD_StdItfReq>
 800ca12:	4603      	mov	r3, r0
 800ca14:	73fb      	strb	r3, [r7, #15]
      break;
 800ca16:	e016      	b.n	800ca46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fc29 	bl	800d278 <USBD_StdEPReq>
 800ca26:	4603      	mov	r3, r0
 800ca28:	73fb      	strb	r3, [r7, #15]
      break;
 800ca2a:	e00c      	b.n	800ca46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 fe46 	bl	800e6cc <USBD_LL_StallEP>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
      break;
 800ca44:	bf00      	nop
  }

  return ret;
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca62:	7afb      	ldrb	r3, [r7, #11]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d16e      	bne.n	800cb46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	f040 8098 	bne.w	800cbac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	689a      	ldr	r2, [r3, #8]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d913      	bls.n	800cab0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	689a      	ldr	r2, [r3, #8]
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	1ad2      	subs	r2, r2, r3
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	68da      	ldr	r2, [r3, #12]
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	bf28      	it	cs
 800caa2:	4613      	movcs	r3, r2
 800caa4:	461a      	mov	r2, r3
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f001 f984 	bl	800ddb6 <USBD_CtlContinueRx>
 800caae:	e07d      	b.n	800cbac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cab6:	f003 031f 	and.w	r3, r3, #31
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d014      	beq.n	800cae8 <USBD_LL_DataOutStage+0x98>
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d81d      	bhi.n	800cafe <USBD_LL_DataOutStage+0xae>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d002      	beq.n	800cacc <USBD_LL_DataOutStage+0x7c>
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d003      	beq.n	800cad2 <USBD_LL_DataOutStage+0x82>
 800caca:	e018      	b.n	800cafe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cacc:	2300      	movs	r3, #0
 800cace:	75bb      	strb	r3, [r7, #22]
            break;
 800cad0:	e018      	b.n	800cb04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	4619      	mov	r1, r3
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 fa5e 	bl	800cf9e <USBD_CoreFindIF>
 800cae2:	4603      	mov	r3, r0
 800cae4:	75bb      	strb	r3, [r7, #22]
            break;
 800cae6:	e00d      	b.n	800cb04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	4619      	mov	r1, r3
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 fa60 	bl	800cfb8 <USBD_CoreFindEP>
 800caf8:	4603      	mov	r3, r0
 800cafa:	75bb      	strb	r3, [r7, #22]
            break;
 800cafc:	e002      	b.n	800cb04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cafe:	2300      	movs	r3, #0
 800cb00:	75bb      	strb	r3, [r7, #22]
            break;
 800cb02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cb04:	7dbb      	ldrb	r3, [r7, #22]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d119      	bne.n	800cb3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d113      	bne.n	800cb3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cb16:	7dba      	ldrb	r2, [r7, #22]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	32ae      	adds	r2, #174	; 0xae
 800cb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00b      	beq.n	800cb3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cb26:	7dba      	ldrb	r2, [r7, #22]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb2e:	7dba      	ldrb	r2, [r7, #22]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	32ae      	adds	r2, #174	; 0xae
 800cb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f001 f94a 	bl	800ddd8 <USBD_CtlSendStatus>
 800cb44:	e032      	b.n	800cbac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	4619      	mov	r1, r3
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f000 fa31 	bl	800cfb8 <USBD_CoreFindEP>
 800cb56:	4603      	mov	r3, r0
 800cb58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb5a:	7dbb      	ldrb	r3, [r7, #22]
 800cb5c:	2bff      	cmp	r3, #255	; 0xff
 800cb5e:	d025      	beq.n	800cbac <USBD_LL_DataOutStage+0x15c>
 800cb60:	7dbb      	ldrb	r3, [r7, #22]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d122      	bne.n	800cbac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d117      	bne.n	800cba2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb72:	7dba      	ldrb	r2, [r7, #22]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	32ae      	adds	r2, #174	; 0xae
 800cb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00f      	beq.n	800cba2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb82:	7dba      	ldrb	r2, [r7, #22]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb8a:	7dba      	ldrb	r2, [r7, #22]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	32ae      	adds	r2, #174	; 0xae
 800cb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	7afa      	ldrb	r2, [r7, #11]
 800cb98:	4611      	mov	r1, r2
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	4798      	blx	r3
 800cb9e:	4603      	mov	r3, r0
 800cba0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cba2:	7dfb      	ldrb	r3, [r7, #23]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	e000      	b.n	800cbae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b086      	sub	sp, #24
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	607a      	str	r2, [r7, #4]
 800cbc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d16f      	bne.n	800ccaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3314      	adds	r3, #20
 800cbce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d15a      	bne.n	800cc90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	689a      	ldr	r2, [r3, #8]
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d914      	bls.n	800cc10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	689a      	ldr	r2, [r3, #8]
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	1ad2      	subs	r2, r2, r3
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	6879      	ldr	r1, [r7, #4]
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f001 f8ac 	bl	800dd5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc02:	2300      	movs	r3, #0
 800cc04:	2200      	movs	r2, #0
 800cc06:	2100      	movs	r1, #0
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f001 fe09 	bl	800e820 <USBD_LL_PrepareReceive>
 800cc0e:	e03f      	b.n	800cc90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	68da      	ldr	r2, [r3, #12]
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d11c      	bne.n	800cc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d316      	bcc.n	800cc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d20f      	bcs.n	800cc56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc36:	2200      	movs	r2, #0
 800cc38:	2100      	movs	r1, #0
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f001 f88d 	bl	800dd5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc48:	2300      	movs	r3, #0
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f001 fde6 	bl	800e820 <USBD_LL_PrepareReceive>
 800cc54:	e01c      	b.n	800cc90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d10f      	bne.n	800cc82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d009      	beq.n	800cc82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc82:	2180      	movs	r1, #128	; 0x80
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f001 fd21 	bl	800e6cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f001 f8b7 	bl	800ddfe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d03a      	beq.n	800cd10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff fe42 	bl	800c924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cca8:	e032      	b.n	800cd10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f000 f97f 	bl	800cfb8 <USBD_CoreFindEP>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	2bff      	cmp	r3, #255	; 0xff
 800ccc2:	d025      	beq.n	800cd10 <USBD_LL_DataInStage+0x15a>
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d122      	bne.n	800cd10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d11c      	bne.n	800cd10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ccd6:	7dfa      	ldrb	r2, [r7, #23]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	32ae      	adds	r2, #174	; 0xae
 800ccdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d014      	beq.n	800cd10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cce6:	7dfa      	ldrb	r2, [r7, #23]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ccee:	7dfa      	ldrb	r2, [r7, #23]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	32ae      	adds	r2, #174	; 0xae
 800ccf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	7afa      	ldrb	r2, [r7, #11]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	4798      	blx	r3
 800cd02:	4603      	mov	r3, r0
 800cd04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cd06:	7dbb      	ldrb	r3, [r7, #22]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cd0c:	7dbb      	ldrb	r3, [r7, #22]
 800cd0e:	e000      	b.n	800cd12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d014      	beq.n	800cd80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00e      	beq.n	800cd80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	6852      	ldr	r2, [r2, #4]
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	4611      	mov	r1, r2
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	4798      	blx	r3
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd80:	2340      	movs	r3, #64	; 0x40
 800cd82:	2200      	movs	r2, #0
 800cd84:	2100      	movs	r1, #0
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f001 fc5b 	bl	800e642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2240      	movs	r2, #64	; 0x40
 800cd98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd9c:	2340      	movs	r3, #64	; 0x40
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2180      	movs	r1, #128	; 0x80
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 fc4d 	bl	800e642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2240      	movs	r2, #64	; 0x40
 800cdb2:	621a      	str	r2, [r3, #32]

  return ret;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	78fa      	ldrb	r2, [r7, #3]
 800cdce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b083      	sub	sp, #12
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b04      	cmp	r3, #4
 800ce1c:	d106      	bne.n	800ce2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d110      	bne.n	800ce70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00b      	beq.n	800ce70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce5e:	69db      	ldr	r3, [r3, #28]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	32ae      	adds	r2, #174	; 0xae
 800ce90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e01c      	b.n	800ced6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d115      	bne.n	800ced4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	32ae      	adds	r2, #174	; 0xae
 800ceb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	32ae      	adds	r2, #174	; 0xae
 800cec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceca:	6a1b      	ldr	r3, [r3, #32]
 800cecc:	78fa      	ldrb	r2, [r7, #3]
 800cece:	4611      	mov	r1, r2
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	32ae      	adds	r2, #174	; 0xae
 800cef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cefc:	2303      	movs	r3, #3
 800cefe:	e01c      	b.n	800cf3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d115      	bne.n	800cf38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	32ae      	adds	r2, #174	; 0xae
 800cf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	32ae      	adds	r2, #174	; 0xae
 800cf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	78fa      	ldrb	r2, [r7, #3]
 800cf32:	4611      	mov	r1, r2
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b083      	sub	sp, #12
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00e      	beq.n	800cf94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	6852      	ldr	r2, [r2, #4]
 800cf82:	b2d2      	uxtb	r2, r2
 800cf84:	4611      	mov	r1, r2
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cf90:	2303      	movs	r3, #3
 800cf92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf9e:	b480      	push	{r7}
 800cfa0:	b083      	sub	sp, #12
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	885b      	ldrh	r3, [r3, #2]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d920      	bls.n	800d03c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d002:	e013      	b.n	800d02c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d004:	f107 030a 	add.w	r3, r7, #10
 800d008:	4619      	mov	r1, r3
 800d00a:	6978      	ldr	r0, [r7, #20]
 800d00c:	f000 f81b 	bl	800d046 <USBD_GetNextDesc>
 800d010:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	785b      	ldrb	r3, [r3, #1]
 800d016:	2b05      	cmp	r3, #5
 800d018:	d108      	bne.n	800d02c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	789b      	ldrb	r3, [r3, #2]
 800d022:	78fa      	ldrb	r2, [r7, #3]
 800d024:	429a      	cmp	r2, r3
 800d026:	d008      	beq.n	800d03a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d028:	2300      	movs	r3, #0
 800d02a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	885b      	ldrh	r3, [r3, #2]
 800d030:	b29a      	uxth	r2, r3
 800d032:	897b      	ldrh	r3, [r7, #10]
 800d034:	429a      	cmp	r2, r3
 800d036:	d8e5      	bhi.n	800d004 <USBD_GetEpDesc+0x32>
 800d038:	e000      	b.n	800d03c <USBD_GetEpDesc+0x6a>
          break;
 800d03a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d03c:	693b      	ldr	r3, [r7, #16]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	881a      	ldrh	r2, [r3, #0]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	4413      	add	r3, r2
 800d060:	b29a      	uxth	r2, r3
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4413      	add	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d072:	68fb      	ldr	r3, [r7, #12]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3714      	adds	r7, #20
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d080:	b480      	push	{r7}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	3301      	adds	r3, #1
 800d096:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d09e:	8a3b      	ldrh	r3, [r7, #16]
 800d0a0:	021b      	lsls	r3, r3, #8
 800d0a2:	b21a      	sxth	r2, r3
 800d0a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	b21b      	sxth	r3, r3
 800d0ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d0ae:	89fb      	ldrh	r3, [r7, #14]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	371c      	adds	r7, #28
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0d2:	2b40      	cmp	r3, #64	; 0x40
 800d0d4:	d005      	beq.n	800d0e2 <USBD_StdDevReq+0x26>
 800d0d6:	2b40      	cmp	r3, #64	; 0x40
 800d0d8:	d857      	bhi.n	800d18a <USBD_StdDevReq+0xce>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00f      	beq.n	800d0fe <USBD_StdDevReq+0x42>
 800d0de:	2b20      	cmp	r3, #32
 800d0e0:	d153      	bne.n	800d18a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	32ae      	adds	r2, #174	; 0xae
 800d0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	4798      	blx	r3
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d0fc:	e04a      	b.n	800d194 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	2b09      	cmp	r3, #9
 800d104:	d83b      	bhi.n	800d17e <USBD_StdDevReq+0xc2>
 800d106:	a201      	add	r2, pc, #4	; (adr r2, 800d10c <USBD_StdDevReq+0x50>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d161 	.word	0x0800d161
 800d110:	0800d175 	.word	0x0800d175
 800d114:	0800d17f 	.word	0x0800d17f
 800d118:	0800d16b 	.word	0x0800d16b
 800d11c:	0800d17f 	.word	0x0800d17f
 800d120:	0800d13f 	.word	0x0800d13f
 800d124:	0800d135 	.word	0x0800d135
 800d128:	0800d17f 	.word	0x0800d17f
 800d12c:	0800d157 	.word	0x0800d157
 800d130:	0800d149 	.word	0x0800d149
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fa3c 	bl	800d5b4 <USBD_GetDescriptor>
          break;
 800d13c:	e024      	b.n	800d188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 fba1 	bl	800d888 <USBD_SetAddress>
          break;
 800d146:	e01f      	b.n	800d188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fbe0 	bl	800d910 <USBD_SetConfig>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]
          break;
 800d154:	e018      	b.n	800d188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fc83 	bl	800da64 <USBD_GetConfig>
          break;
 800d15e:	e013      	b.n	800d188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fcb4 	bl	800dad0 <USBD_GetStatus>
          break;
 800d168:	e00e      	b.n	800d188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 fce3 	bl	800db38 <USBD_SetFeature>
          break;
 800d172:	e009      	b.n	800d188 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fd07 	bl	800db8a <USBD_ClrFeature>
          break;
 800d17c:	e004      	b.n	800d188 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d17e:	6839      	ldr	r1, [r7, #0]
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fd5e 	bl	800dc42 <USBD_CtlError>
          break;
 800d186:	bf00      	nop
      }
      break;
 800d188:	e004      	b.n	800d194 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fd58 	bl	800dc42 <USBD_CtlError>
      break;
 800d192:	bf00      	nop
  }

  return ret;
 800d194:	7bfb      	ldrb	r3, [r7, #15]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop

0800d1a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1b6:	2b40      	cmp	r3, #64	; 0x40
 800d1b8:	d005      	beq.n	800d1c6 <USBD_StdItfReq+0x26>
 800d1ba:	2b40      	cmp	r3, #64	; 0x40
 800d1bc:	d852      	bhi.n	800d264 <USBD_StdItfReq+0xc4>
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <USBD_StdItfReq+0x26>
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d14e      	bne.n	800d264 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d840      	bhi.n	800d256 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	889b      	ldrh	r3, [r3, #4]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d836      	bhi.n	800d24c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	889b      	ldrh	r3, [r3, #4]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff fed9 	bl	800cf9e <USBD_CoreFindIF>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
 800d1f2:	2bff      	cmp	r3, #255	; 0xff
 800d1f4:	d01d      	beq.n	800d232 <USBD_StdItfReq+0x92>
 800d1f6:	7bbb      	ldrb	r3, [r7, #14]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d11a      	bne.n	800d232 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d1fc:	7bba      	ldrb	r2, [r7, #14]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	32ae      	adds	r2, #174	; 0xae
 800d202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00f      	beq.n	800d22c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d20c:	7bba      	ldrb	r2, [r7, #14]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d214:	7bba      	ldrb	r2, [r7, #14]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	32ae      	adds	r2, #174	; 0xae
 800d21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	4798      	blx	r3
 800d226:	4603      	mov	r3, r0
 800d228:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d22a:	e004      	b.n	800d236 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d22c:	2303      	movs	r3, #3
 800d22e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d230:	e001      	b.n	800d236 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d232:	2303      	movs	r3, #3
 800d234:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	88db      	ldrh	r3, [r3, #6]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d110      	bne.n	800d260 <USBD_StdItfReq+0xc0>
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10d      	bne.n	800d260 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fdc7 	bl	800ddd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d24a:	e009      	b.n	800d260 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fcf7 	bl	800dc42 <USBD_CtlError>
          break;
 800d254:	e004      	b.n	800d260 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fcf2 	bl	800dc42 <USBD_CtlError>
          break;
 800d25e:	e000      	b.n	800d262 <USBD_StdItfReq+0xc2>
          break;
 800d260:	bf00      	nop
      }
      break;
 800d262:	e004      	b.n	800d26e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fceb 	bl	800dc42 <USBD_CtlError>
      break;
 800d26c:	bf00      	nop
  }

  return ret;
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d282:	2300      	movs	r3, #0
 800d284:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	889b      	ldrh	r3, [r3, #4]
 800d28a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d294:	2b40      	cmp	r3, #64	; 0x40
 800d296:	d007      	beq.n	800d2a8 <USBD_StdEPReq+0x30>
 800d298:	2b40      	cmp	r3, #64	; 0x40
 800d29a:	f200 817f 	bhi.w	800d59c <USBD_StdEPReq+0x324>
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d02a      	beq.n	800d2f8 <USBD_StdEPReq+0x80>
 800d2a2:	2b20      	cmp	r3, #32
 800d2a4:	f040 817a 	bne.w	800d59c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff fe83 	bl	800cfb8 <USBD_CoreFindEP>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2b6:	7b7b      	ldrb	r3, [r7, #13]
 800d2b8:	2bff      	cmp	r3, #255	; 0xff
 800d2ba:	f000 8174 	beq.w	800d5a6 <USBD_StdEPReq+0x32e>
 800d2be:	7b7b      	ldrb	r3, [r7, #13]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f040 8170 	bne.w	800d5a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d2c6:	7b7a      	ldrb	r2, [r7, #13]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d2ce:	7b7a      	ldrb	r2, [r7, #13]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	32ae      	adds	r2, #174	; 0xae
 800d2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 8163 	beq.w	800d5a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d2e0:	7b7a      	ldrb	r2, [r7, #13]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	32ae      	adds	r2, #174	; 0xae
 800d2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	4798      	blx	r3
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d2f6:	e156      	b.n	800d5a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	785b      	ldrb	r3, [r3, #1]
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d008      	beq.n	800d312 <USBD_StdEPReq+0x9a>
 800d300:	2b03      	cmp	r3, #3
 800d302:	f300 8145 	bgt.w	800d590 <USBD_StdEPReq+0x318>
 800d306:	2b00      	cmp	r3, #0
 800d308:	f000 809b 	beq.w	800d442 <USBD_StdEPReq+0x1ca>
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d03c      	beq.n	800d38a <USBD_StdEPReq+0x112>
 800d310:	e13e      	b.n	800d590 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d002      	beq.n	800d324 <USBD_StdEPReq+0xac>
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d016      	beq.n	800d350 <USBD_StdEPReq+0xd8>
 800d322:	e02c      	b.n	800d37e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00d      	beq.n	800d346 <USBD_StdEPReq+0xce>
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	2b80      	cmp	r3, #128	; 0x80
 800d32e:	d00a      	beq.n	800d346 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d330:	7bbb      	ldrb	r3, [r7, #14]
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 f9c9 	bl	800e6cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d33a:	2180      	movs	r1, #128	; 0x80
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f001 f9c5 	bl	800e6cc <USBD_LL_StallEP>
 800d342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d344:	e020      	b.n	800d388 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fc7a 	bl	800dc42 <USBD_CtlError>
              break;
 800d34e:	e01b      	b.n	800d388 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	885b      	ldrh	r3, [r3, #2]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10e      	bne.n	800d376 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d358:	7bbb      	ldrb	r3, [r7, #14]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00b      	beq.n	800d376 <USBD_StdEPReq+0xfe>
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
 800d360:	2b80      	cmp	r3, #128	; 0x80
 800d362:	d008      	beq.n	800d376 <USBD_StdEPReq+0xfe>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	88db      	ldrh	r3, [r3, #6]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d104      	bne.n	800d376 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f001 f9ab 	bl	800e6cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 fd2e 	bl	800ddd8 <USBD_CtlSendStatus>

              break;
 800d37c:	e004      	b.n	800d388 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 fc5e 	bl	800dc42 <USBD_CtlError>
              break;
 800d386:	bf00      	nop
          }
          break;
 800d388:	e107      	b.n	800d59a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b02      	cmp	r3, #2
 800d394:	d002      	beq.n	800d39c <USBD_StdEPReq+0x124>
 800d396:	2b03      	cmp	r3, #3
 800d398:	d016      	beq.n	800d3c8 <USBD_StdEPReq+0x150>
 800d39a:	e04b      	b.n	800d434 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00d      	beq.n	800d3be <USBD_StdEPReq+0x146>
 800d3a2:	7bbb      	ldrb	r3, [r7, #14]
 800d3a4:	2b80      	cmp	r3, #128	; 0x80
 800d3a6:	d00a      	beq.n	800d3be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f001 f98d 	bl	800e6cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3b2:	2180      	movs	r1, #128	; 0x80
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 f989 	bl	800e6cc <USBD_LL_StallEP>
 800d3ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3bc:	e040      	b.n	800d440 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 fc3e 	bl	800dc42 <USBD_CtlError>
              break;
 800d3c6:	e03b      	b.n	800d440 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	885b      	ldrh	r3, [r3, #2]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d136      	bne.n	800d43e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d3d0:	7bbb      	ldrb	r3, [r7, #14]
 800d3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d004      	beq.n	800d3e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d3da:	7bbb      	ldrb	r3, [r7, #14]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f001 f993 	bl	800e70a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fcf7 	bl	800ddd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7ff fde2 	bl	800cfb8 <USBD_CoreFindEP>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3f8:	7b7b      	ldrb	r3, [r7, #13]
 800d3fa:	2bff      	cmp	r3, #255	; 0xff
 800d3fc:	d01f      	beq.n	800d43e <USBD_StdEPReq+0x1c6>
 800d3fe:	7b7b      	ldrb	r3, [r7, #13]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d11c      	bne.n	800d43e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d404:	7b7a      	ldrb	r2, [r7, #13]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d40c:	7b7a      	ldrb	r2, [r7, #13]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	32ae      	adds	r2, #174	; 0xae
 800d412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d010      	beq.n	800d43e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d41c:	7b7a      	ldrb	r2, [r7, #13]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	32ae      	adds	r2, #174	; 0xae
 800d422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	6839      	ldr	r1, [r7, #0]
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	4798      	blx	r3
 800d42e:	4603      	mov	r3, r0
 800d430:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d432:	e004      	b.n	800d43e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 fc03 	bl	800dc42 <USBD_CtlError>
              break;
 800d43c:	e000      	b.n	800d440 <USBD_StdEPReq+0x1c8>
              break;
 800d43e:	bf00      	nop
          }
          break;
 800d440:	e0ab      	b.n	800d59a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d002      	beq.n	800d454 <USBD_StdEPReq+0x1dc>
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d032      	beq.n	800d4b8 <USBD_StdEPReq+0x240>
 800d452:	e097      	b.n	800d584 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <USBD_StdEPReq+0x1f2>
 800d45a:	7bbb      	ldrb	r3, [r7, #14]
 800d45c:	2b80      	cmp	r3, #128	; 0x80
 800d45e:	d004      	beq.n	800d46a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fbed 	bl	800dc42 <USBD_CtlError>
                break;
 800d468:	e091      	b.n	800d58e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d46a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	da0b      	bge.n	800d48a <USBD_StdEPReq+0x212>
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d478:	4613      	mov	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4413      	add	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	3310      	adds	r3, #16
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	4413      	add	r3, r2
 800d486:	3304      	adds	r3, #4
 800d488:	e00b      	b.n	800d4a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d48a:	7bbb      	ldrb	r3, [r7, #14]
 800d48c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d490:	4613      	mov	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	4413      	add	r3, r2
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fc37 	bl	800dd24 <USBD_CtlSendData>
              break;
 800d4b6:	e06a      	b.n	800d58e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	da11      	bge.n	800d4e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	f003 020f 	and.w	r2, r3, #15
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	4413      	add	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	440b      	add	r3, r1
 800d4d2:	3324      	adds	r3, #36	; 0x24
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d117      	bne.n	800d50a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 fbb0 	bl	800dc42 <USBD_CtlError>
                  break;
 800d4e2:	e054      	b.n	800d58e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	f003 020f 	and.w	r2, r3, #15
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	440b      	add	r3, r1
 800d4f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d4fa:	881b      	ldrh	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d104      	bne.n	800d50a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fb9d 	bl	800dc42 <USBD_CtlError>
                  break;
 800d508:	e041      	b.n	800d58e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d50a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	da0b      	bge.n	800d52a <USBD_StdEPReq+0x2b2>
 800d512:	7bbb      	ldrb	r3, [r7, #14]
 800d514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	3310      	adds	r3, #16
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	4413      	add	r3, r2
 800d526:	3304      	adds	r3, #4
 800d528:	e00b      	b.n	800d542 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d52a:	7bbb      	ldrb	r3, [r7, #14]
 800d52c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d530:	4613      	mov	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	4413      	add	r3, r2
 800d540:	3304      	adds	r3, #4
 800d542:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <USBD_StdEPReq+0x2d8>
 800d54a:	7bbb      	ldrb	r3, [r7, #14]
 800d54c:	2b80      	cmp	r3, #128	; 0x80
 800d54e:	d103      	bne.n	800d558 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	e00e      	b.n	800d576 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d558:	7bbb      	ldrb	r3, [r7, #14]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f001 f8f3 	bl	800e748 <USBD_LL_IsStallEP>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d003      	beq.n	800d570 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2201      	movs	r2, #1
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	e002      	b.n	800d576 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	2202      	movs	r2, #2
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fbd1 	bl	800dd24 <USBD_CtlSendData>
              break;
 800d582:	e004      	b.n	800d58e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fb5b 	bl	800dc42 <USBD_CtlError>
              break;
 800d58c:	bf00      	nop
          }
          break;
 800d58e:	e004      	b.n	800d59a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fb55 	bl	800dc42 <USBD_CtlError>
          break;
 800d598:	bf00      	nop
      }
      break;
 800d59a:	e005      	b.n	800d5a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d59c:	6839      	ldr	r1, [r7, #0]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 fb4f 	bl	800dc42 <USBD_CtlError>
      break;
 800d5a4:	e000      	b.n	800d5a8 <USBD_StdEPReq+0x330>
      break;
 800d5a6:	bf00      	nop
  }

  return ret;
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	885b      	ldrh	r3, [r3, #2]
 800d5ce:	0a1b      	lsrs	r3, r3, #8
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	2b06      	cmp	r3, #6
 800d5d6:	f200 8128 	bhi.w	800d82a <USBD_GetDescriptor+0x276>
 800d5da:	a201      	add	r2, pc, #4	; (adr r2, 800d5e0 <USBD_GetDescriptor+0x2c>)
 800d5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e0:	0800d5fd 	.word	0x0800d5fd
 800d5e4:	0800d615 	.word	0x0800d615
 800d5e8:	0800d655 	.word	0x0800d655
 800d5ec:	0800d82b 	.word	0x0800d82b
 800d5f0:	0800d82b 	.word	0x0800d82b
 800d5f4:	0800d7cb 	.word	0x0800d7cb
 800d5f8:	0800d7f7 	.word	0x0800d7f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	7c12      	ldrb	r2, [r2, #16]
 800d608:	f107 0108 	add.w	r1, r7, #8
 800d60c:	4610      	mov	r0, r2
 800d60e:	4798      	blx	r3
 800d610:	60f8      	str	r0, [r7, #12]
      break;
 800d612:	e112      	b.n	800d83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	7c1b      	ldrb	r3, [r3, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10d      	bne.n	800d638 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d624:	f107 0208 	add.w	r2, r7, #8
 800d628:	4610      	mov	r0, r2
 800d62a:	4798      	blx	r3
 800d62c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3301      	adds	r3, #1
 800d632:	2202      	movs	r2, #2
 800d634:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d636:	e100      	b.n	800d83a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d640:	f107 0208 	add.w	r2, r7, #8
 800d644:	4610      	mov	r0, r2
 800d646:	4798      	blx	r3
 800d648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3301      	adds	r3, #1
 800d64e:	2202      	movs	r2, #2
 800d650:	701a      	strb	r2, [r3, #0]
      break;
 800d652:	e0f2      	b.n	800d83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	885b      	ldrh	r3, [r3, #2]
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b05      	cmp	r3, #5
 800d65c:	f200 80ac 	bhi.w	800d7b8 <USBD_GetDescriptor+0x204>
 800d660:	a201      	add	r2, pc, #4	; (adr r2, 800d668 <USBD_GetDescriptor+0xb4>)
 800d662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d666:	bf00      	nop
 800d668:	0800d681 	.word	0x0800d681
 800d66c:	0800d6b5 	.word	0x0800d6b5
 800d670:	0800d6e9 	.word	0x0800d6e9
 800d674:	0800d71d 	.word	0x0800d71d
 800d678:	0800d751 	.word	0x0800d751
 800d67c:	0800d785 	.word	0x0800d785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00b      	beq.n	800d6a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	7c12      	ldrb	r2, [r2, #16]
 800d698:	f107 0108 	add.w	r1, r7, #8
 800d69c:	4610      	mov	r0, r2
 800d69e:	4798      	blx	r3
 800d6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6a2:	e091      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 facb 	bl	800dc42 <USBD_CtlError>
            err++;
 800d6ac:	7afb      	ldrb	r3, [r7, #11]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6b2:	e089      	b.n	800d7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00b      	beq.n	800d6d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	7c12      	ldrb	r2, [r2, #16]
 800d6cc:	f107 0108 	add.w	r1, r7, #8
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	4798      	blx	r3
 800d6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6d6:	e077      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fab1 	bl	800dc42 <USBD_CtlError>
            err++;
 800d6e0:	7afb      	ldrb	r3, [r7, #11]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d6e6:	e06f      	b.n	800d7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00b      	beq.n	800d70c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	7c12      	ldrb	r2, [r2, #16]
 800d700:	f107 0108 	add.w	r1, r7, #8
 800d704:	4610      	mov	r0, r2
 800d706:	4798      	blx	r3
 800d708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d70a:	e05d      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d70c:	6839      	ldr	r1, [r7, #0]
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 fa97 	bl	800dc42 <USBD_CtlError>
            err++;
 800d714:	7afb      	ldrb	r3, [r7, #11]
 800d716:	3301      	adds	r3, #1
 800d718:	72fb      	strb	r3, [r7, #11]
          break;
 800d71a:	e055      	b.n	800d7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00b      	beq.n	800d740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	7c12      	ldrb	r2, [r2, #16]
 800d734:	f107 0108 	add.w	r1, r7, #8
 800d738:	4610      	mov	r0, r2
 800d73a:	4798      	blx	r3
 800d73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d73e:	e043      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d740:	6839      	ldr	r1, [r7, #0]
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fa7d 	bl	800dc42 <USBD_CtlError>
            err++;
 800d748:	7afb      	ldrb	r3, [r7, #11]
 800d74a:	3301      	adds	r3, #1
 800d74c:	72fb      	strb	r3, [r7, #11]
          break;
 800d74e:	e03b      	b.n	800d7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d00b      	beq.n	800d774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d762:	695b      	ldr	r3, [r3, #20]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	7c12      	ldrb	r2, [r2, #16]
 800d768:	f107 0108 	add.w	r1, r7, #8
 800d76c:	4610      	mov	r0, r2
 800d76e:	4798      	blx	r3
 800d770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d772:	e029      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d774:	6839      	ldr	r1, [r7, #0]
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fa63 	bl	800dc42 <USBD_CtlError>
            err++;
 800d77c:	7afb      	ldrb	r3, [r7, #11]
 800d77e:	3301      	adds	r3, #1
 800d780:	72fb      	strb	r3, [r7, #11]
          break;
 800d782:	e021      	b.n	800d7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00b      	beq.n	800d7a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	7c12      	ldrb	r2, [r2, #16]
 800d79c:	f107 0108 	add.w	r1, r7, #8
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	4798      	blx	r3
 800d7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7a6:	e00f      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fa49 	bl	800dc42 <USBD_CtlError>
            err++;
 800d7b0:	7afb      	ldrb	r3, [r7, #11]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7b6:	e007      	b.n	800d7c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d7b8:	6839      	ldr	r1, [r7, #0]
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 fa41 	bl	800dc42 <USBD_CtlError>
          err++;
 800d7c0:	7afb      	ldrb	r3, [r7, #11]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d7c6:	bf00      	nop
      }
      break;
 800d7c8:	e037      	b.n	800d83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	7c1b      	ldrb	r3, [r3, #16]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d109      	bne.n	800d7e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7da:	f107 0208 	add.w	r2, r7, #8
 800d7de:	4610      	mov	r0, r2
 800d7e0:	4798      	blx	r3
 800d7e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7e4:	e029      	b.n	800d83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fa2a 	bl	800dc42 <USBD_CtlError>
        err++;
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d7f4:	e021      	b.n	800d83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7c1b      	ldrb	r3, [r3, #16]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10d      	bne.n	800d81a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d806:	f107 0208 	add.w	r2, r7, #8
 800d80a:	4610      	mov	r0, r2
 800d80c:	4798      	blx	r3
 800d80e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	3301      	adds	r3, #1
 800d814:	2207      	movs	r2, #7
 800d816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d818:	e00f      	b.n	800d83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d81a:	6839      	ldr	r1, [r7, #0]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fa10 	bl	800dc42 <USBD_CtlError>
        err++;
 800d822:	7afb      	ldrb	r3, [r7, #11]
 800d824:	3301      	adds	r3, #1
 800d826:	72fb      	strb	r3, [r7, #11]
      break;
 800d828:	e007      	b.n	800d83a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fa08 	bl	800dc42 <USBD_CtlError>
      err++;
 800d832:	7afb      	ldrb	r3, [r7, #11]
 800d834:	3301      	adds	r3, #1
 800d836:	72fb      	strb	r3, [r7, #11]
      break;
 800d838:	bf00      	nop
  }

  if (err != 0U)
 800d83a:	7afb      	ldrb	r3, [r7, #11]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d11e      	bne.n	800d87e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	88db      	ldrh	r3, [r3, #6]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d016      	beq.n	800d876 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d848:	893b      	ldrh	r3, [r7, #8]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00e      	beq.n	800d86c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	88da      	ldrh	r2, [r3, #6]
 800d852:	893b      	ldrh	r3, [r7, #8]
 800d854:	4293      	cmp	r3, r2
 800d856:	bf28      	it	cs
 800d858:	4613      	movcs	r3, r2
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d85e:	893b      	ldrh	r3, [r7, #8]
 800d860:	461a      	mov	r2, r3
 800d862:	68f9      	ldr	r1, [r7, #12]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 fa5d 	bl	800dd24 <USBD_CtlSendData>
 800d86a:	e009      	b.n	800d880 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 f9e7 	bl	800dc42 <USBD_CtlError>
 800d874:	e004      	b.n	800d880 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 faae 	bl	800ddd8 <USBD_CtlSendStatus>
 800d87c:	e000      	b.n	800d880 <USBD_GetDescriptor+0x2cc>
    return;
 800d87e:	bf00      	nop
  }
}
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop

0800d888 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	889b      	ldrh	r3, [r3, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d131      	bne.n	800d8fe <USBD_SetAddress+0x76>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	88db      	ldrh	r3, [r3, #6]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d12d      	bne.n	800d8fe <USBD_SetAddress+0x76>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	2b7f      	cmp	r3, #127	; 0x7f
 800d8a8:	d829      	bhi.n	800d8fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	885b      	ldrh	r3, [r3, #2]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d104      	bne.n	800d8cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f9bc 	bl	800dc42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ca:	e01d      	b.n	800d908 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7bfa      	ldrb	r2, [r7, #15]
 800d8d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 ff61 	bl	800e7a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fa7a 	bl	800ddd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d004      	beq.n	800d8f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8f2:	e009      	b.n	800d908 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8fc:	e004      	b.n	800d908 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f99e 	bl	800dc42 <USBD_CtlError>
  }
}
 800d906:	bf00      	nop
 800d908:	bf00      	nop
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d91a:	2300      	movs	r3, #0
 800d91c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	885b      	ldrh	r3, [r3, #2]
 800d922:	b2da      	uxtb	r2, r3
 800d924:	4b4e      	ldr	r3, [pc, #312]	; (800da60 <USBD_SetConfig+0x150>)
 800d926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d928:	4b4d      	ldr	r3, [pc, #308]	; (800da60 <USBD_SetConfig+0x150>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d905      	bls.n	800d93c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f985 	bl	800dc42 <USBD_CtlError>
    return USBD_FAIL;
 800d938:	2303      	movs	r3, #3
 800d93a:	e08c      	b.n	800da56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d942:	b2db      	uxtb	r3, r3
 800d944:	2b02      	cmp	r3, #2
 800d946:	d002      	beq.n	800d94e <USBD_SetConfig+0x3e>
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d029      	beq.n	800d9a0 <USBD_SetConfig+0x90>
 800d94c:	e075      	b.n	800da3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d94e:	4b44      	ldr	r3, [pc, #272]	; (800da60 <USBD_SetConfig+0x150>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d020      	beq.n	800d998 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d956:	4b42      	ldr	r3, [pc, #264]	; (800da60 <USBD_SetConfig+0x150>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d960:	4b3f      	ldr	r3, [pc, #252]	; (800da60 <USBD_SetConfig+0x150>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7fe ffe7 	bl	800c93a <USBD_SetClassConfig>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d970:	7bfb      	ldrb	r3, [r7, #15]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d008      	beq.n	800d988 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d976:	6839      	ldr	r1, [r7, #0]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 f962 	bl	800dc42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2202      	movs	r2, #2
 800d982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d986:	e065      	b.n	800da54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 fa25 	bl	800ddd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2203      	movs	r2, #3
 800d992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d996:	e05d      	b.n	800da54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fa1d 	bl	800ddd8 <USBD_CtlSendStatus>
      break;
 800d99e:	e059      	b.n	800da54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d9a0:	4b2f      	ldr	r3, [pc, #188]	; (800da60 <USBD_SetConfig+0x150>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d112      	bne.n	800d9ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d9b0:	4b2b      	ldr	r3, [pc, #172]	; (800da60 <USBD_SetConfig+0x150>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9ba:	4b29      	ldr	r3, [pc, #164]	; (800da60 <USBD_SetConfig+0x150>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7fe ffd6 	bl	800c972 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa06 	bl	800ddd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9cc:	e042      	b.n	800da54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d9ce:	4b24      	ldr	r3, [pc, #144]	; (800da60 <USBD_SetConfig+0x150>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d02a      	beq.n	800da32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7fe ffc4 	bl	800c972 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9ea:	4b1d      	ldr	r3, [pc, #116]	; (800da60 <USBD_SetConfig+0x150>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	; (800da60 <USBD_SetConfig+0x150>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7fe ff9d 	bl	800c93a <USBD_SetClassConfig>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00f      	beq.n	800da2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f918 	bl	800dc42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	b2db      	uxtb	r3, r3
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7fe ffa9 	bl	800c972 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da28:	e014      	b.n	800da54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f9d4 	bl	800ddd8 <USBD_CtlSendStatus>
      break;
 800da30:	e010      	b.n	800da54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f9d0 	bl	800ddd8 <USBD_CtlSendStatus>
      break;
 800da38:	e00c      	b.n	800da54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f900 	bl	800dc42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da42:	4b07      	ldr	r3, [pc, #28]	; (800da60 <USBD_SetConfig+0x150>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7fe ff92 	bl	800c972 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da4e:	2303      	movs	r3, #3
 800da50:	73fb      	strb	r3, [r7, #15]
      break;
 800da52:	bf00      	nop
  }

  return ret;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	200005ac 	.word	0x200005ac

0800da64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	88db      	ldrh	r3, [r3, #6]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d004      	beq.n	800da80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f8e2 	bl	800dc42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da7e:	e023      	b.n	800dac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b02      	cmp	r3, #2
 800da8a:	dc02      	bgt.n	800da92 <USBD_GetConfig+0x2e>
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	dc03      	bgt.n	800da98 <USBD_GetConfig+0x34>
 800da90:	e015      	b.n	800dabe <USBD_GetConfig+0x5a>
 800da92:	2b03      	cmp	r3, #3
 800da94:	d00b      	beq.n	800daae <USBD_GetConfig+0x4a>
 800da96:	e012      	b.n	800dabe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3308      	adds	r3, #8
 800daa2:	2201      	movs	r2, #1
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f93c 	bl	800dd24 <USBD_CtlSendData>
        break;
 800daac:	e00c      	b.n	800dac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3304      	adds	r3, #4
 800dab2:	2201      	movs	r2, #1
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f934 	bl	800dd24 <USBD_CtlSendData>
        break;
 800dabc:	e004      	b.n	800dac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f8be 	bl	800dc42 <USBD_CtlError>
        break;
 800dac6:	bf00      	nop
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	3b01      	subs	r3, #1
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d81e      	bhi.n	800db26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	88db      	ldrh	r3, [r3, #6]
 800daec:	2b02      	cmp	r3, #2
 800daee:	d004      	beq.n	800dafa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f8a5 	bl	800dc42 <USBD_CtlError>
        break;
 800daf8:	e01a      	b.n	800db30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d005      	beq.n	800db16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	f043 0202 	orr.w	r2, r3, #2
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	330c      	adds	r3, #12
 800db1a:	2202      	movs	r2, #2
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f900 	bl	800dd24 <USBD_CtlSendData>
      break;
 800db24:	e004      	b.n	800db30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f88a 	bl	800dc42 <USBD_CtlError>
      break;
 800db2e:	bf00      	nop
  }
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	885b      	ldrh	r3, [r3, #2]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d107      	bne.n	800db5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f940 	bl	800ddd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800db58:	e013      	b.n	800db82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	885b      	ldrh	r3, [r3, #2]
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d10b      	bne.n	800db7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	889b      	ldrh	r3, [r3, #4]
 800db66:	0a1b      	lsrs	r3, r3, #8
 800db68:	b29b      	uxth	r3, r3
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f930 	bl	800ddd8 <USBD_CtlSendStatus>
}
 800db78:	e003      	b.n	800db82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f860 	bl	800dc42 <USBD_CtlError>
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b082      	sub	sp, #8
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	3b01      	subs	r3, #1
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d80b      	bhi.n	800dbba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	885b      	ldrh	r3, [r3, #2]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d10c      	bne.n	800dbc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 f910 	bl	800ddd8 <USBD_CtlSendStatus>
      }
      break;
 800dbb8:	e004      	b.n	800dbc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 f840 	bl	800dc42 <USBD_CtlError>
      break;
 800dbc2:	e000      	b.n	800dbc6 <USBD_ClrFeature+0x3c>
      break;
 800dbc4:	bf00      	nop
  }
}
 800dbc6:	bf00      	nop
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	781a      	ldrb	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7ff fa41 	bl	800d080 <SWAPBYTE>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	461a      	mov	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff fa34 	bl	800d080 <SWAPBYTE>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3301      	adds	r3, #1
 800dc24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7ff fa27 	bl	800d080 <SWAPBYTE>
 800dc32:	4603      	mov	r3, r0
 800dc34:	461a      	mov	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	80da      	strh	r2, [r3, #6]
}
 800dc3a:	bf00      	nop
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b082      	sub	sp, #8
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc4c:	2180      	movs	r1, #128	; 0x80
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fd3c 	bl	800e6cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc54:	2100      	movs	r1, #0
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fd38 	bl	800e6cc <USBD_LL_StallEP>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc70:	2300      	movs	r3, #0
 800dc72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d036      	beq.n	800dce8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc7e:	6938      	ldr	r0, [r7, #16]
 800dc80:	f000 f836 	bl	800dcf0 <USBD_GetLen>
 800dc84:	4603      	mov	r3, r0
 800dc86:	3301      	adds	r3, #1
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	4413      	add	r3, r2
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	7812      	ldrb	r2, [r2, #0]
 800dc9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	3301      	adds	r3, #1
 800dca2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	4413      	add	r3, r2
 800dcaa:	2203      	movs	r2, #3
 800dcac:	701a      	strb	r2, [r3, #0]
  idx++;
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dcb4:	e013      	b.n	800dcde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dcb6:	7dfb      	ldrb	r3, [r7, #23]
 800dcb8:	68ba      	ldr	r2, [r7, #8]
 800dcba:	4413      	add	r3, r2
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	7812      	ldrb	r2, [r2, #0]
 800dcc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	613b      	str	r3, [r7, #16]
    idx++;
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	3301      	adds	r3, #1
 800dccc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dcce:	7dfb      	ldrb	r3, [r7, #23]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1e7      	bne.n	800dcb6 <USBD_GetString+0x52>
 800dce6:	e000      	b.n	800dcea <USBD_GetString+0x86>
    return;
 800dce8:	bf00      	nop
  }
}
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dd00:	e005      	b.n	800dd0e <USBD_GetLen+0x1e>
  {
    len++;
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	3301      	adds	r3, #1
 800dd06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1f5      	bne.n	800dd02 <USBD_GetLen+0x12>
  }

  return len;
 800dd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2202      	movs	r2, #2
 800dd34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	2100      	movs	r1, #0
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f000 fd47 	bl	800e7de <USBD_LL_Transmit>

  return USBD_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	60b9      	str	r1, [r7, #8]
 800dd64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f000 fd36 	bl	800e7de <USBD_LL_Transmit>

  return USBD_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2203      	movs	r2, #3
 800dd8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	2100      	movs	r1, #0
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 fd3a 	bl	800e820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f000 fd29 	bl	800e820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2204      	movs	r2, #4
 800dde4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dde8:	2300      	movs	r3, #0
 800ddea:	2200      	movs	r2, #0
 800ddec:	2100      	movs	r1, #0
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fcf5 	bl	800e7de <USBD_LL_Transmit>

  return USBD_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b082      	sub	sp, #8
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2205      	movs	r2, #5
 800de0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de0e:	2300      	movs	r3, #0
 800de10:	2200      	movs	r2, #0
 800de12:	2100      	movs	r1, #0
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fd03 	bl	800e820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	4613      	mov	r3, r2
 800de30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de32:	2301      	movs	r3, #1
 800de34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de3a:	4b1f      	ldr	r3, [pc, #124]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de3c:	7a5b      	ldrb	r3, [r3, #9]
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b00      	cmp	r3, #0
 800de42:	d131      	bne.n	800dea8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de44:	4b1c      	ldr	r3, [pc, #112]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de46:	7a5b      	ldrb	r3, [r3, #9]
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	461a      	mov	r2, r3
 800de4c:	4b1a      	ldr	r3, [pc, #104]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de4e:	2100      	movs	r1, #0
 800de50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de52:	4b19      	ldr	r3, [pc, #100]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de54:	7a5b      	ldrb	r3, [r3, #9]
 800de56:	b2db      	uxtb	r3, r3
 800de58:	4a17      	ldr	r2, [pc, #92]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de62:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de64:	7a5b      	ldrb	r3, [r3, #9]
 800de66:	b2db      	uxtb	r3, r3
 800de68:	461a      	mov	r2, r3
 800de6a:	4b13      	ldr	r3, [pc, #76]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de6c:	4413      	add	r3, r2
 800de6e:	79fa      	ldrb	r2, [r7, #7]
 800de70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de72:	4b11      	ldr	r3, [pc, #68]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de74:	7a5b      	ldrb	r3, [r3, #9]
 800de76:	b2db      	uxtb	r3, r3
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	b2d1      	uxtb	r1, r2
 800de7c:	4a0e      	ldr	r2, [pc, #56]	; (800deb8 <FATFS_LinkDriverEx+0x94>)
 800de7e:	7251      	strb	r1, [r2, #9]
 800de80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de82:	7dbb      	ldrb	r3, [r7, #22]
 800de84:	3330      	adds	r3, #48	; 0x30
 800de86:	b2da      	uxtb	r2, r3
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	3301      	adds	r3, #1
 800de90:	223a      	movs	r2, #58	; 0x3a
 800de92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	3302      	adds	r3, #2
 800de98:	222f      	movs	r2, #47	; 0x2f
 800de9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	3303      	adds	r3, #3
 800dea0:	2200      	movs	r2, #0
 800dea2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	200005b0 	.word	0x200005b0

0800debc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dec6:	2200      	movs	r2, #0
 800dec8:	6839      	ldr	r1, [r7, #0]
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff ffaa 	bl	800de24 <FATFS_LinkDriverEx>
 800ded0:	4603      	mov	r3, r0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dee0:	2200      	movs	r2, #0
 800dee2:	4912      	ldr	r1, [pc, #72]	; (800df2c <MX_USB_DEVICE_Init+0x50>)
 800dee4:	4812      	ldr	r0, [pc, #72]	; (800df30 <MX_USB_DEVICE_Init+0x54>)
 800dee6:	f7fe fcab 	bl	800c840 <USBD_Init>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800def0:	f7f4 f894 	bl	800201c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800def4:	490f      	ldr	r1, [pc, #60]	; (800df34 <MX_USB_DEVICE_Init+0x58>)
 800def6:	480e      	ldr	r0, [pc, #56]	; (800df30 <MX_USB_DEVICE_Init+0x54>)
 800def8:	f7fe fcd2 	bl	800c8a0 <USBD_RegisterClass>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df02:	f7f4 f88b 	bl	800201c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df06:	490c      	ldr	r1, [pc, #48]	; (800df38 <MX_USB_DEVICE_Init+0x5c>)
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <MX_USB_DEVICE_Init+0x54>)
 800df0a:	f7fe fbc3 	bl	800c694 <USBD_CDC_RegisterInterface>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df14:	f7f4 f882 	bl	800201c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df18:	4805      	ldr	r0, [pc, #20]	; (800df30 <MX_USB_DEVICE_Init+0x54>)
 800df1a:	f7fe fcf7 	bl	800c90c <USBD_Start>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df24:	f7f4 f87a 	bl	800201c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df28:	bf00      	nop
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	200000ac 	.word	0x200000ac
 800df30:	200005bc 	.word	0x200005bc
 800df34:	20000018 	.word	0x20000018
 800df38:	20000098 	.word	0x20000098

0800df3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df40:	2200      	movs	r2, #0
 800df42:	4905      	ldr	r1, [pc, #20]	; (800df58 <CDC_Init_FS+0x1c>)
 800df44:	4805      	ldr	r0, [pc, #20]	; (800df5c <CDC_Init_FS+0x20>)
 800df46:	f7fe fbbf 	bl	800c6c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df4a:	4905      	ldr	r1, [pc, #20]	; (800df60 <CDC_Init_FS+0x24>)
 800df4c:	4803      	ldr	r0, [pc, #12]	; (800df5c <CDC_Init_FS+0x20>)
 800df4e:	f7fe fbdd 	bl	800c70c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df54:	4618      	mov	r0, r3
 800df56:	bd80      	pop	{r7, pc}
 800df58:	20001098 	.word	0x20001098
 800df5c:	200005bc 	.word	0x200005bc
 800df60:	20000898 	.word	0x20000898

0800df64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	6039      	str	r1, [r7, #0]
 800df7e:	71fb      	strb	r3, [r7, #7]
 800df80:	4613      	mov	r3, r2
 800df82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800df84:	79fb      	ldrb	r3, [r7, #7]
 800df86:	2b23      	cmp	r3, #35	; 0x23
 800df88:	d84a      	bhi.n	800e020 <CDC_Control_FS+0xac>
 800df8a:	a201      	add	r2, pc, #4	; (adr r2, 800df90 <CDC_Control_FS+0x1c>)
 800df8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df90:	0800e021 	.word	0x0800e021
 800df94:	0800e021 	.word	0x0800e021
 800df98:	0800e021 	.word	0x0800e021
 800df9c:	0800e021 	.word	0x0800e021
 800dfa0:	0800e021 	.word	0x0800e021
 800dfa4:	0800e021 	.word	0x0800e021
 800dfa8:	0800e021 	.word	0x0800e021
 800dfac:	0800e021 	.word	0x0800e021
 800dfb0:	0800e021 	.word	0x0800e021
 800dfb4:	0800e021 	.word	0x0800e021
 800dfb8:	0800e021 	.word	0x0800e021
 800dfbc:	0800e021 	.word	0x0800e021
 800dfc0:	0800e021 	.word	0x0800e021
 800dfc4:	0800e021 	.word	0x0800e021
 800dfc8:	0800e021 	.word	0x0800e021
 800dfcc:	0800e021 	.word	0x0800e021
 800dfd0:	0800e021 	.word	0x0800e021
 800dfd4:	0800e021 	.word	0x0800e021
 800dfd8:	0800e021 	.word	0x0800e021
 800dfdc:	0800e021 	.word	0x0800e021
 800dfe0:	0800e021 	.word	0x0800e021
 800dfe4:	0800e021 	.word	0x0800e021
 800dfe8:	0800e021 	.word	0x0800e021
 800dfec:	0800e021 	.word	0x0800e021
 800dff0:	0800e021 	.word	0x0800e021
 800dff4:	0800e021 	.word	0x0800e021
 800dff8:	0800e021 	.word	0x0800e021
 800dffc:	0800e021 	.word	0x0800e021
 800e000:	0800e021 	.word	0x0800e021
 800e004:	0800e021 	.word	0x0800e021
 800e008:	0800e021 	.word	0x0800e021
 800e00c:	0800e021 	.word	0x0800e021
 800e010:	0800e021 	.word	0x0800e021
 800e014:	0800e021 	.word	0x0800e021
 800e018:	0800e021 	.word	0x0800e021
 800e01c:	0800e021 	.word	0x0800e021
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e020:	bf00      	nop
  }

  return (USBD_OK);
 800e022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e024:	4618      	mov	r0, r3
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e03a:	6879      	ldr	r1, [r7, #4]
 800e03c:	4805      	ldr	r0, [pc, #20]	; (800e054 <CDC_Receive_FS+0x24>)
 800e03e:	f7fe fb65 	bl	800c70c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e042:	4804      	ldr	r0, [pc, #16]	; (800e054 <CDC_Receive_FS+0x24>)
 800e044:	f7fe fbc6 	bl	800c7d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e048:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	200005bc 	.word	0x200005bc

0800e058 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e068:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <CDC_Transmit_FS+0x48>)
 800e06a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e06e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e00b      	b.n	800e096 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e07e:	887b      	ldrh	r3, [r7, #2]
 800e080:	461a      	mov	r2, r3
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4806      	ldr	r0, [pc, #24]	; (800e0a0 <CDC_Transmit_FS+0x48>)
 800e086:	f7fe fb1f 	bl	800c6c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e08a:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <CDC_Transmit_FS+0x48>)
 800e08c:	f7fe fb5c 	bl	800c748 <USBD_CDC_TransmitPacket>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e094:	7bfb      	ldrb	r3, [r7, #15]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	200005bc 	.word	0x200005bc

0800e0a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b087      	sub	sp, #28
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	371c      	adds	r7, #28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
	...

0800e0c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	6039      	str	r1, [r7, #0]
 800e0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2212      	movs	r2, #18
 800e0d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0da:	4b03      	ldr	r3, [pc, #12]	; (800e0e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	200000c8 	.word	0x200000c8

0800e0ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	6039      	str	r1, [r7, #0]
 800e0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2204      	movs	r2, #4
 800e0fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e0fe:	4b03      	ldr	r3, [pc, #12]	; (800e10c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e100:	4618      	mov	r0, r3
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	200000dc 	.word	0x200000dc

0800e110 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	6039      	str	r1, [r7, #0]
 800e11a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d105      	bne.n	800e12e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e122:	683a      	ldr	r2, [r7, #0]
 800e124:	4907      	ldr	r1, [pc, #28]	; (800e144 <USBD_FS_ProductStrDescriptor+0x34>)
 800e126:	4808      	ldr	r0, [pc, #32]	; (800e148 <USBD_FS_ProductStrDescriptor+0x38>)
 800e128:	f7ff fd9c 	bl	800dc64 <USBD_GetString>
 800e12c:	e004      	b.n	800e138 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	4904      	ldr	r1, [pc, #16]	; (800e144 <USBD_FS_ProductStrDescriptor+0x34>)
 800e132:	4805      	ldr	r0, [pc, #20]	; (800e148 <USBD_FS_ProductStrDescriptor+0x38>)
 800e134:	f7ff fd96 	bl	800dc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e138:	4b02      	ldr	r3, [pc, #8]	; (800e144 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20001898 	.word	0x20001898
 800e148:	08011564 	.word	0x08011564

0800e14c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	4603      	mov	r3, r0
 800e154:	6039      	str	r1, [r7, #0]
 800e156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	4904      	ldr	r1, [pc, #16]	; (800e16c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e15c:	4804      	ldr	r0, [pc, #16]	; (800e170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e15e:	f7ff fd81 	bl	800dc64 <USBD_GetString>
  return USBD_StrDesc;
 800e162:	4b02      	ldr	r3, [pc, #8]	; (800e16c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e164:	4618      	mov	r0, r3
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20001898 	.word	0x20001898
 800e170:	0801157c 	.word	0x0801157c

0800e174 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	4603      	mov	r3, r0
 800e17c:	6039      	str	r1, [r7, #0]
 800e17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	221a      	movs	r2, #26
 800e184:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e186:	f000 f843 	bl	800e210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e18a:	4b02      	ldr	r3, [pc, #8]	; (800e194 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	200000e0 	.word	0x200000e0

0800e198 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	6039      	str	r1, [r7, #0]
 800e1a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d105      	bne.n	800e1b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	4907      	ldr	r1, [pc, #28]	; (800e1cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1ae:	4808      	ldr	r0, [pc, #32]	; (800e1d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1b0:	f7ff fd58 	bl	800dc64 <USBD_GetString>
 800e1b4:	e004      	b.n	800e1c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	4904      	ldr	r1, [pc, #16]	; (800e1cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1ba:	4805      	ldr	r0, [pc, #20]	; (800e1d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1bc:	f7ff fd52 	bl	800dc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1c0:	4b02      	ldr	r3, [pc, #8]	; (800e1cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20001898 	.word	0x20001898
 800e1d0:	08011590 	.word	0x08011590

0800e1d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	6039      	str	r1, [r7, #0]
 800e1de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1e0:	79fb      	ldrb	r3, [r7, #7]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d105      	bne.n	800e1f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	4907      	ldr	r1, [pc, #28]	; (800e208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1ea:	4808      	ldr	r0, [pc, #32]	; (800e20c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1ec:	f7ff fd3a 	bl	800dc64 <USBD_GetString>
 800e1f0:	e004      	b.n	800e1fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	4904      	ldr	r1, [pc, #16]	; (800e208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1f6:	4805      	ldr	r0, [pc, #20]	; (800e20c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1f8:	f7ff fd34 	bl	800dc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1fc:	4b02      	ldr	r3, [pc, #8]	; (800e208 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	20001898 	.word	0x20001898
 800e20c:	0801159c 	.word	0x0801159c

0800e210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <Get_SerialNum+0x44>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e21c:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <Get_SerialNum+0x48>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e222:	4b0e      	ldr	r3, [pc, #56]	; (800e25c <Get_SerialNum+0x4c>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d009      	beq.n	800e24a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e236:	2208      	movs	r2, #8
 800e238:	4909      	ldr	r1, [pc, #36]	; (800e260 <Get_SerialNum+0x50>)
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f000 f814 	bl	800e268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e240:	2204      	movs	r2, #4
 800e242:	4908      	ldr	r1, [pc, #32]	; (800e264 <Get_SerialNum+0x54>)
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	f000 f80f 	bl	800e268 <IntToUnicode>
  }
}
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	1fff7a10 	.word	0x1fff7a10
 800e258:	1fff7a14 	.word	0x1fff7a14
 800e25c:	1fff7a18 	.word	0x1fff7a18
 800e260:	200000e2 	.word	0x200000e2
 800e264:	200000f2 	.word	0x200000f2

0800e268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	4613      	mov	r3, r2
 800e274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e27a:	2300      	movs	r3, #0
 800e27c:	75fb      	strb	r3, [r7, #23]
 800e27e:	e027      	b.n	800e2d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	0f1b      	lsrs	r3, r3, #28
 800e284:	2b09      	cmp	r3, #9
 800e286:	d80b      	bhi.n	800e2a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	0f1b      	lsrs	r3, r3, #28
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	4619      	mov	r1, r3
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	440b      	add	r3, r1
 800e298:	3230      	adds	r2, #48	; 0x30
 800e29a:	b2d2      	uxtb	r2, r2
 800e29c:	701a      	strb	r2, [r3, #0]
 800e29e:	e00a      	b.n	800e2b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	0f1b      	lsrs	r3, r3, #28
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	440b      	add	r3, r1
 800e2b0:	3237      	adds	r2, #55	; 0x37
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	011b      	lsls	r3, r3, #4
 800e2ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	75fb      	strb	r3, [r7, #23]
 800e2d0:	7dfa      	ldrb	r2, [r7, #23]
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d3d3      	bcc.n	800e280 <IntToUnicode+0x18>
  }
}
 800e2d8:	bf00      	nop
 800e2da:	bf00      	nop
 800e2dc:	371c      	adds	r7, #28
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08a      	sub	sp, #40	; 0x28
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2f0:	f107 0314 	add.w	r3, r7, #20
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	605a      	str	r2, [r3, #4]
 800e2fa:	609a      	str	r2, [r3, #8]
 800e2fc:	60da      	str	r2, [r3, #12]
 800e2fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e308:	d13a      	bne.n	800e380 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e30a:	2300      	movs	r3, #0
 800e30c:	613b      	str	r3, [r7, #16]
 800e30e:	4b1e      	ldr	r3, [pc, #120]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	4a1d      	ldr	r2, [pc, #116]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e314:	f043 0301 	orr.w	r3, r3, #1
 800e318:	6313      	str	r3, [r2, #48]	; 0x30
 800e31a:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	613b      	str	r3, [r7, #16]
 800e324:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e32a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e32c:	2302      	movs	r3, #2
 800e32e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e330:	2300      	movs	r3, #0
 800e332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e334:	2303      	movs	r3, #3
 800e336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e338:	230a      	movs	r3, #10
 800e33a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e33c:	f107 0314 	add.w	r3, r7, #20
 800e340:	4619      	mov	r1, r3
 800e342:	4812      	ldr	r0, [pc, #72]	; (800e38c <HAL_PCD_MspInit+0xa4>)
 800e344:	f7f5 fab4 	bl	80038b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e348:	4b0f      	ldr	r3, [pc, #60]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34c:	4a0e      	ldr	r2, [pc, #56]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e352:	6353      	str	r3, [r2, #52]	; 0x34
 800e354:	2300      	movs	r3, #0
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	4b0b      	ldr	r3, [pc, #44]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e35c:	4a0a      	ldr	r2, [pc, #40]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e35e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e362:	6453      	str	r3, [r2, #68]	; 0x44
 800e364:	4b08      	ldr	r3, [pc, #32]	; (800e388 <HAL_PCD_MspInit+0xa0>)
 800e366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e36c:	60fb      	str	r3, [r7, #12]
 800e36e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e370:	2200      	movs	r2, #0
 800e372:	2100      	movs	r1, #0
 800e374:	2043      	movs	r0, #67	; 0x43
 800e376:	f7f4 fee8 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e37a:	2043      	movs	r0, #67	; 0x43
 800e37c:	f7f4 ff01 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e380:	bf00      	nop
 800e382:	3728      	adds	r7, #40	; 0x28
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	40023800 	.word	0x40023800
 800e38c:	40020000 	.word	0x40020000

0800e390 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	f7fe fafd 	bl	800c9a6 <USBD_LL_SetupStage>
}
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e3c6:	78fa      	ldrb	r2, [r7, #3]
 800e3c8:	6879      	ldr	r1, [r7, #4]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	00db      	lsls	r3, r3, #3
 800e3ce:	4413      	add	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	440b      	add	r3, r1
 800e3d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	f7fe fb37 	bl	800ca50 <USBD_LL_DataOutStage>
}
 800e3e2:	bf00      	nop
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e3fc:	78fa      	ldrb	r2, [r7, #3]
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	4613      	mov	r3, r2
 800e402:	00db      	lsls	r3, r3, #3
 800e404:	4413      	add	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	440b      	add	r3, r1
 800e40a:	334c      	adds	r3, #76	; 0x4c
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	78fb      	ldrb	r3, [r7, #3]
 800e410:	4619      	mov	r1, r3
 800e412:	f7fe fbd0 	bl	800cbb6 <USBD_LL_DataInStage>
}
 800e416:	bf00      	nop
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b082      	sub	sp, #8
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fd04 	bl	800ce3a <USBD_LL_SOF>
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b084      	sub	sp, #16
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e442:	2301      	movs	r3, #1
 800e444:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d102      	bne.n	800e454 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e44e:	2300      	movs	r3, #0
 800e450:	73fb      	strb	r3, [r7, #15]
 800e452:	e008      	b.n	800e466 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d102      	bne.n	800e462 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e45c:	2301      	movs	r3, #1
 800e45e:	73fb      	strb	r3, [r7, #15]
 800e460:	e001      	b.n	800e466 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e462:	f7f3 fddb 	bl	800201c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e46c:	7bfa      	ldrb	r2, [r7, #15]
 800e46e:	4611      	mov	r1, r2
 800e470:	4618      	mov	r0, r3
 800e472:	f7fe fca4 	bl	800cdbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fc4c 	bl	800cd1a <USBD_LL_Reset>
}
 800e482:	bf00      	nop
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe fc9f 	bl	800cdde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	6812      	ldr	r2, [r2, #0]
 800e4ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e4b2:	f043 0301 	orr.w	r3, r3, #1
 800e4b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a1b      	ldr	r3, [r3, #32]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d005      	beq.n	800e4cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e4c0:	4b04      	ldr	r3, [pc, #16]	; (800e4d4 <HAL_PCD_SuspendCallback+0x48>)
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	4a03      	ldr	r2, [pc, #12]	; (800e4d4 <HAL_PCD_SuspendCallback+0x48>)
 800e4c6:	f043 0306 	orr.w	r3, r3, #6
 800e4ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	e000ed00 	.word	0xe000ed00

0800e4d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fc8f 	bl	800ce0a <USBD_LL_Resume>
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	4611      	mov	r1, r2
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe fce7 	bl	800cede <USBD_LL_IsoOUTIncomplete>
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e52a:	78fa      	ldrb	r2, [r7, #3]
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fca3 	bl	800ce7a <USBD_LL_IsoINIncomplete>
}
 800e534:	bf00      	nop
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fcf9 	bl	800cf42 <USBD_LL_DevConnected>
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fcf6 	bl	800cf58 <USBD_LL_DevDisconnected>
}
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d13c      	bne.n	800e5fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e584:	4a20      	ldr	r2, [pc, #128]	; (800e608 <USBD_LL_Init+0x94>)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a1e      	ldr	r2, [pc, #120]	; (800e608 <USBD_LL_Init+0x94>)
 800e590:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e594:	4b1c      	ldr	r3, [pc, #112]	; (800e608 <USBD_LL_Init+0x94>)
 800e596:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e59a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e59c:	4b1a      	ldr	r3, [pc, #104]	; (800e608 <USBD_LL_Init+0x94>)
 800e59e:	2204      	movs	r2, #4
 800e5a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5a2:	4b19      	ldr	r3, [pc, #100]	; (800e608 <USBD_LL_Init+0x94>)
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5a8:	4b17      	ldr	r3, [pc, #92]	; (800e608 <USBD_LL_Init+0x94>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5ae:	4b16      	ldr	r3, [pc, #88]	; (800e608 <USBD_LL_Init+0x94>)
 800e5b0:	2202      	movs	r2, #2
 800e5b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5b4:	4b14      	ldr	r3, [pc, #80]	; (800e608 <USBD_LL_Init+0x94>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e5ba:	4b13      	ldr	r3, [pc, #76]	; (800e608 <USBD_LL_Init+0x94>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e5c0:	4b11      	ldr	r3, [pc, #68]	; (800e608 <USBD_LL_Init+0x94>)
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e5c6:	4b10      	ldr	r3, [pc, #64]	; (800e608 <USBD_LL_Init+0x94>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e5cc:	4b0e      	ldr	r3, [pc, #56]	; (800e608 <USBD_LL_Init+0x94>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e5d2:	480d      	ldr	r0, [pc, #52]	; (800e608 <USBD_LL_Init+0x94>)
 800e5d4:	f7f6 fab7 	bl	8004b46 <HAL_PCD_Init>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e5de:	f7f3 fd1d 	bl	800201c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e5e2:	2180      	movs	r1, #128	; 0x80
 800e5e4:	4808      	ldr	r0, [pc, #32]	; (800e608 <USBD_LL_Init+0x94>)
 800e5e6:	f7f7 fd0e 	bl	8006006 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e5ea:	2240      	movs	r2, #64	; 0x40
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	4806      	ldr	r0, [pc, #24]	; (800e608 <USBD_LL_Init+0x94>)
 800e5f0:	f7f7 fcc2 	bl	8005f78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e5f4:	2280      	movs	r2, #128	; 0x80
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	4803      	ldr	r0, [pc, #12]	; (800e608 <USBD_LL_Init+0x94>)
 800e5fa:	f7f7 fcbd 	bl	8005f78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	20001a98 	.word	0x20001a98

0800e60c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e622:	4618      	mov	r0, r3
 800e624:	f7f6 fbac 	bl	8004d80 <HAL_PCD_Start>
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 f942 	bl	800e8b8 <USBD_Get_USB_Status>
 800e634:	4603      	mov	r3, r0
 800e636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e638:	7bbb      	ldrb	r3, [r7, #14]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
 800e64a:	4608      	mov	r0, r1
 800e64c:	4611      	mov	r1, r2
 800e64e:	461a      	mov	r2, r3
 800e650:	4603      	mov	r3, r0
 800e652:	70fb      	strb	r3, [r7, #3]
 800e654:	460b      	mov	r3, r1
 800e656:	70bb      	strb	r3, [r7, #2]
 800e658:	4613      	mov	r3, r2
 800e65a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e66a:	78bb      	ldrb	r3, [r7, #2]
 800e66c:	883a      	ldrh	r2, [r7, #0]
 800e66e:	78f9      	ldrb	r1, [r7, #3]
 800e670:	f7f7 f87d 	bl	800576e <HAL_PCD_EP_Open>
 800e674:	4603      	mov	r3, r0
 800e676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 f91c 	bl	800e8b8 <USBD_Get_USB_Status>
 800e680:	4603      	mov	r3, r0
 800e682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e684:	7bbb      	ldrb	r3, [r7, #14]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b084      	sub	sp, #16
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f7 f8c6 	bl	800583e <HAL_PCD_EP_Close>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 f8fd 	bl	800e8b8 <USBD_Get_USB_Status>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6e6:	78fa      	ldrb	r2, [r7, #3]
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7f7 f99e 	bl	8005a2c <HAL_PCD_EP_SetStall>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 f8de 	bl	800e8b8 <USBD_Get_USB_Status>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e700:	7bbb      	ldrb	r3, [r7, #14]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e716:	2300      	movs	r3, #0
 800e718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e724:	78fa      	ldrb	r2, [r7, #3]
 800e726:	4611      	mov	r1, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f7f7 f9e3 	bl	8005af4 <HAL_PCD_EP_ClrStall>
 800e72e:	4603      	mov	r3, r0
 800e730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e732:	7bfb      	ldrb	r3, [r7, #15]
 800e734:	4618      	mov	r0, r3
 800e736:	f000 f8bf 	bl	800e8b8 <USBD_Get_USB_Status>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e73e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	460b      	mov	r3, r1
 800e752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e75a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e75c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e760:	2b00      	cmp	r3, #0
 800e762:	da0b      	bge.n	800e77c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e76a:	68f9      	ldr	r1, [r7, #12]
 800e76c:	4613      	mov	r3, r2
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	4413      	add	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	440b      	add	r3, r1
 800e776:	333e      	adds	r3, #62	; 0x3e
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	e00b      	b.n	800e794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e77c:	78fb      	ldrb	r3, [r7, #3]
 800e77e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e782:	68f9      	ldr	r1, [r7, #12]
 800e784:	4613      	mov	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	4413      	add	r3, r2
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	440b      	add	r3, r1
 800e78e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e792:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e794:	4618      	mov	r0, r3
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7ba:	78fa      	ldrb	r2, [r7, #3]
 800e7bc:	4611      	mov	r1, r2
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7f6 ffb0 	bl	8005724 <HAL_PCD_SetAddress>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 f874 	bl	800e8b8 <USBD_Get_USB_Status>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b086      	sub	sp, #24
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	607a      	str	r2, [r7, #4]
 800e7e8:	603b      	str	r3, [r7, #0]
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e7fc:	7af9      	ldrb	r1, [r7, #11]
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	f7f7 f8c9 	bl	8005998 <HAL_PCD_EP_Transmit>
 800e806:	4603      	mov	r3, r0
 800e808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 f853 	bl	800e8b8 <USBD_Get_USB_Status>
 800e812:	4603      	mov	r3, r0
 800e814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e816:	7dbb      	ldrb	r3, [r7, #22]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	607a      	str	r2, [r7, #4]
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	460b      	mov	r3, r1
 800e82e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e83e:	7af9      	ldrb	r1, [r7, #11]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	f7f7 f845 	bl	80058d2 <HAL_PCD_EP_Receive>
 800e848:	4603      	mov	r3, r0
 800e84a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	4618      	mov	r0, r3
 800e850:	f000 f832 	bl	800e8b8 <USBD_Get_USB_Status>
 800e854:	4603      	mov	r3, r0
 800e856:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e858:	7dbb      	ldrb	r3, [r7, #22]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b082      	sub	sp, #8
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	460b      	mov	r3, r1
 800e86c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e874:	78fa      	ldrb	r2, [r7, #3]
 800e876:	4611      	mov	r1, r2
 800e878:	4618      	mov	r0, r3
 800e87a:	f7f7 f875 	bl	8005968 <HAL_PCD_EP_GetRxCount>
 800e87e:	4603      	mov	r3, r0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e890:	4b03      	ldr	r3, [pc, #12]	; (800e8a0 <USBD_static_malloc+0x18>)
}
 800e892:	4618      	mov	r0, r3
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	20001fa4 	.word	0x20001fa4

0800e8a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]

}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d817      	bhi.n	800e8fc <USBD_Get_USB_Status+0x44>
 800e8cc:	a201      	add	r2, pc, #4	; (adr r2, 800e8d4 <USBD_Get_USB_Status+0x1c>)
 800e8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d2:	bf00      	nop
 800e8d4:	0800e8e5 	.word	0x0800e8e5
 800e8d8:	0800e8eb 	.word	0x0800e8eb
 800e8dc:	0800e8f1 	.word	0x0800e8f1
 800e8e0:	0800e8f7 	.word	0x0800e8f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8e8:	e00b      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ee:	e008      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8f4:	e005      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e8fa:	e002      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e900:	bf00      	nop
  }
  return usb_status;
 800e902:	7bfb      	ldrb	r3, [r7, #15]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <__errno>:
 800e910:	4b01      	ldr	r3, [pc, #4]	; (800e918 <__errno+0x8>)
 800e912:	6818      	ldr	r0, [r3, #0]
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	200000fc 	.word	0x200000fc

0800e91c <__libc_init_array>:
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	4d0d      	ldr	r5, [pc, #52]	; (800e954 <__libc_init_array+0x38>)
 800e920:	4c0d      	ldr	r4, [pc, #52]	; (800e958 <__libc_init_array+0x3c>)
 800e922:	1b64      	subs	r4, r4, r5
 800e924:	10a4      	asrs	r4, r4, #2
 800e926:	2600      	movs	r6, #0
 800e928:	42a6      	cmp	r6, r4
 800e92a:	d109      	bne.n	800e940 <__libc_init_array+0x24>
 800e92c:	4d0b      	ldr	r5, [pc, #44]	; (800e95c <__libc_init_array+0x40>)
 800e92e:	4c0c      	ldr	r4, [pc, #48]	; (800e960 <__libc_init_array+0x44>)
 800e930:	f002 fdc4 	bl	80114bc <_init>
 800e934:	1b64      	subs	r4, r4, r5
 800e936:	10a4      	asrs	r4, r4, #2
 800e938:	2600      	movs	r6, #0
 800e93a:	42a6      	cmp	r6, r4
 800e93c:	d105      	bne.n	800e94a <__libc_init_array+0x2e>
 800e93e:	bd70      	pop	{r4, r5, r6, pc}
 800e940:	f855 3b04 	ldr.w	r3, [r5], #4
 800e944:	4798      	blx	r3
 800e946:	3601      	adds	r6, #1
 800e948:	e7ee      	b.n	800e928 <__libc_init_array+0xc>
 800e94a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e94e:	4798      	blx	r3
 800e950:	3601      	adds	r6, #1
 800e952:	e7f2      	b.n	800e93a <__libc_init_array+0x1e>
 800e954:	080119c4 	.word	0x080119c4
 800e958:	080119c4 	.word	0x080119c4
 800e95c:	080119c4 	.word	0x080119c4
 800e960:	080119c8 	.word	0x080119c8

0800e964 <memset>:
 800e964:	4402      	add	r2, r0
 800e966:	4603      	mov	r3, r0
 800e968:	4293      	cmp	r3, r2
 800e96a:	d100      	bne.n	800e96e <memset+0xa>
 800e96c:	4770      	bx	lr
 800e96e:	f803 1b01 	strb.w	r1, [r3], #1
 800e972:	e7f9      	b.n	800e968 <memset+0x4>

0800e974 <__cvt>:
 800e974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e978:	ec55 4b10 	vmov	r4, r5, d0
 800e97c:	2d00      	cmp	r5, #0
 800e97e:	460e      	mov	r6, r1
 800e980:	4619      	mov	r1, r3
 800e982:	462b      	mov	r3, r5
 800e984:	bfbb      	ittet	lt
 800e986:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e98a:	461d      	movlt	r5, r3
 800e98c:	2300      	movge	r3, #0
 800e98e:	232d      	movlt	r3, #45	; 0x2d
 800e990:	700b      	strb	r3, [r1, #0]
 800e992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e994:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e998:	4691      	mov	r9, r2
 800e99a:	f023 0820 	bic.w	r8, r3, #32
 800e99e:	bfbc      	itt	lt
 800e9a0:	4622      	movlt	r2, r4
 800e9a2:	4614      	movlt	r4, r2
 800e9a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9a8:	d005      	beq.n	800e9b6 <__cvt+0x42>
 800e9aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e9ae:	d100      	bne.n	800e9b2 <__cvt+0x3e>
 800e9b0:	3601      	adds	r6, #1
 800e9b2:	2102      	movs	r1, #2
 800e9b4:	e000      	b.n	800e9b8 <__cvt+0x44>
 800e9b6:	2103      	movs	r1, #3
 800e9b8:	ab03      	add	r3, sp, #12
 800e9ba:	9301      	str	r3, [sp, #4]
 800e9bc:	ab02      	add	r3, sp, #8
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	ec45 4b10 	vmov	d0, r4, r5
 800e9c4:	4653      	mov	r3, sl
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	f000 fe1a 	bl	800f600 <_dtoa_r>
 800e9cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e9d0:	4607      	mov	r7, r0
 800e9d2:	d102      	bne.n	800e9da <__cvt+0x66>
 800e9d4:	f019 0f01 	tst.w	r9, #1
 800e9d8:	d022      	beq.n	800ea20 <__cvt+0xac>
 800e9da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9de:	eb07 0906 	add.w	r9, r7, r6
 800e9e2:	d110      	bne.n	800ea06 <__cvt+0x92>
 800e9e4:	783b      	ldrb	r3, [r7, #0]
 800e9e6:	2b30      	cmp	r3, #48	; 0x30
 800e9e8:	d10a      	bne.n	800ea00 <__cvt+0x8c>
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	f7f2 f871 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9f6:	b918      	cbnz	r0, 800ea00 <__cvt+0x8c>
 800e9f8:	f1c6 0601 	rsb	r6, r6, #1
 800e9fc:	f8ca 6000 	str.w	r6, [sl]
 800ea00:	f8da 3000 	ldr.w	r3, [sl]
 800ea04:	4499      	add	r9, r3
 800ea06:	2200      	movs	r2, #0
 800ea08:	2300      	movs	r3, #0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f2 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea12:	b108      	cbz	r0, 800ea18 <__cvt+0xa4>
 800ea14:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea18:	2230      	movs	r2, #48	; 0x30
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	454b      	cmp	r3, r9
 800ea1e:	d307      	bcc.n	800ea30 <__cvt+0xbc>
 800ea20:	9b03      	ldr	r3, [sp, #12]
 800ea22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea24:	1bdb      	subs	r3, r3, r7
 800ea26:	4638      	mov	r0, r7
 800ea28:	6013      	str	r3, [r2, #0]
 800ea2a:	b004      	add	sp, #16
 800ea2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea30:	1c59      	adds	r1, r3, #1
 800ea32:	9103      	str	r1, [sp, #12]
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	e7f0      	b.n	800ea1a <__cvt+0xa6>

0800ea38 <__exponent>:
 800ea38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2900      	cmp	r1, #0
 800ea3e:	bfb8      	it	lt
 800ea40:	4249      	neglt	r1, r1
 800ea42:	f803 2b02 	strb.w	r2, [r3], #2
 800ea46:	bfb4      	ite	lt
 800ea48:	222d      	movlt	r2, #45	; 0x2d
 800ea4a:	222b      	movge	r2, #43	; 0x2b
 800ea4c:	2909      	cmp	r1, #9
 800ea4e:	7042      	strb	r2, [r0, #1]
 800ea50:	dd2a      	ble.n	800eaa8 <__exponent+0x70>
 800ea52:	f10d 0407 	add.w	r4, sp, #7
 800ea56:	46a4      	mov	ip, r4
 800ea58:	270a      	movs	r7, #10
 800ea5a:	46a6      	mov	lr, r4
 800ea5c:	460a      	mov	r2, r1
 800ea5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ea62:	fb07 1516 	mls	r5, r7, r6, r1
 800ea66:	3530      	adds	r5, #48	; 0x30
 800ea68:	2a63      	cmp	r2, #99	; 0x63
 800ea6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ea6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ea72:	4631      	mov	r1, r6
 800ea74:	dcf1      	bgt.n	800ea5a <__exponent+0x22>
 800ea76:	3130      	adds	r1, #48	; 0x30
 800ea78:	f1ae 0502 	sub.w	r5, lr, #2
 800ea7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea80:	1c44      	adds	r4, r0, #1
 800ea82:	4629      	mov	r1, r5
 800ea84:	4561      	cmp	r1, ip
 800ea86:	d30a      	bcc.n	800ea9e <__exponent+0x66>
 800ea88:	f10d 0209 	add.w	r2, sp, #9
 800ea8c:	eba2 020e 	sub.w	r2, r2, lr
 800ea90:	4565      	cmp	r5, ip
 800ea92:	bf88      	it	hi
 800ea94:	2200      	movhi	r2, #0
 800ea96:	4413      	add	r3, r2
 800ea98:	1a18      	subs	r0, r3, r0
 800ea9a:	b003      	add	sp, #12
 800ea9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaa2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eaa6:	e7ed      	b.n	800ea84 <__exponent+0x4c>
 800eaa8:	2330      	movs	r3, #48	; 0x30
 800eaaa:	3130      	adds	r1, #48	; 0x30
 800eaac:	7083      	strb	r3, [r0, #2]
 800eaae:	70c1      	strb	r1, [r0, #3]
 800eab0:	1d03      	adds	r3, r0, #4
 800eab2:	e7f1      	b.n	800ea98 <__exponent+0x60>

0800eab4 <_printf_float>:
 800eab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab8:	ed2d 8b02 	vpush	{d8}
 800eabc:	b08d      	sub	sp, #52	; 0x34
 800eabe:	460c      	mov	r4, r1
 800eac0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eac4:	4616      	mov	r6, r2
 800eac6:	461f      	mov	r7, r3
 800eac8:	4605      	mov	r5, r0
 800eaca:	f001 fd3f 	bl	801054c <_localeconv_r>
 800eace:	f8d0 a000 	ldr.w	sl, [r0]
 800ead2:	4650      	mov	r0, sl
 800ead4:	f7f1 fb84 	bl	80001e0 <strlen>
 800ead8:	2300      	movs	r3, #0
 800eada:	930a      	str	r3, [sp, #40]	; 0x28
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	9305      	str	r3, [sp, #20]
 800eae0:	f8d8 3000 	ldr.w	r3, [r8]
 800eae4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eae8:	3307      	adds	r3, #7
 800eaea:	f023 0307 	bic.w	r3, r3, #7
 800eaee:	f103 0208 	add.w	r2, r3, #8
 800eaf2:	f8c8 2000 	str.w	r2, [r8]
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eafe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eb02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb06:	9307      	str	r3, [sp, #28]
 800eb08:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb0c:	ee08 0a10 	vmov	s16, r0
 800eb10:	4b9f      	ldr	r3, [pc, #636]	; (800ed90 <_printf_float+0x2dc>)
 800eb12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb16:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1a:	f7f2 f80f 	bl	8000b3c <__aeabi_dcmpun>
 800eb1e:	bb88      	cbnz	r0, 800eb84 <_printf_float+0xd0>
 800eb20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb24:	4b9a      	ldr	r3, [pc, #616]	; (800ed90 <_printf_float+0x2dc>)
 800eb26:	f04f 32ff 	mov.w	r2, #4294967295
 800eb2a:	f7f1 ffe9 	bl	8000b00 <__aeabi_dcmple>
 800eb2e:	bb48      	cbnz	r0, 800eb84 <_printf_float+0xd0>
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	4640      	mov	r0, r8
 800eb36:	4649      	mov	r1, r9
 800eb38:	f7f1 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800eb3c:	b110      	cbz	r0, 800eb44 <_printf_float+0x90>
 800eb3e:	232d      	movs	r3, #45	; 0x2d
 800eb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb44:	4b93      	ldr	r3, [pc, #588]	; (800ed94 <_printf_float+0x2e0>)
 800eb46:	4894      	ldr	r0, [pc, #592]	; (800ed98 <_printf_float+0x2e4>)
 800eb48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eb4c:	bf94      	ite	ls
 800eb4e:	4698      	movls	r8, r3
 800eb50:	4680      	movhi	r8, r0
 800eb52:	2303      	movs	r3, #3
 800eb54:	6123      	str	r3, [r4, #16]
 800eb56:	9b05      	ldr	r3, [sp, #20]
 800eb58:	f023 0204 	bic.w	r2, r3, #4
 800eb5c:	6022      	str	r2, [r4, #0]
 800eb5e:	f04f 0900 	mov.w	r9, #0
 800eb62:	9700      	str	r7, [sp, #0]
 800eb64:	4633      	mov	r3, r6
 800eb66:	aa0b      	add	r2, sp, #44	; 0x2c
 800eb68:	4621      	mov	r1, r4
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f000 f9d8 	bl	800ef20 <_printf_common>
 800eb70:	3001      	adds	r0, #1
 800eb72:	f040 8090 	bne.w	800ec96 <_printf_float+0x1e2>
 800eb76:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7a:	b00d      	add	sp, #52	; 0x34
 800eb7c:	ecbd 8b02 	vpop	{d8}
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb84:	4642      	mov	r2, r8
 800eb86:	464b      	mov	r3, r9
 800eb88:	4640      	mov	r0, r8
 800eb8a:	4649      	mov	r1, r9
 800eb8c:	f7f1 ffd6 	bl	8000b3c <__aeabi_dcmpun>
 800eb90:	b140      	cbz	r0, 800eba4 <_printf_float+0xf0>
 800eb92:	464b      	mov	r3, r9
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	bfbc      	itt	lt
 800eb98:	232d      	movlt	r3, #45	; 0x2d
 800eb9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb9e:	487f      	ldr	r0, [pc, #508]	; (800ed9c <_printf_float+0x2e8>)
 800eba0:	4b7f      	ldr	r3, [pc, #508]	; (800eda0 <_printf_float+0x2ec>)
 800eba2:	e7d1      	b.n	800eb48 <_printf_float+0x94>
 800eba4:	6863      	ldr	r3, [r4, #4]
 800eba6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ebaa:	9206      	str	r2, [sp, #24]
 800ebac:	1c5a      	adds	r2, r3, #1
 800ebae:	d13f      	bne.n	800ec30 <_printf_float+0x17c>
 800ebb0:	2306      	movs	r3, #6
 800ebb2:	6063      	str	r3, [r4, #4]
 800ebb4:	9b05      	ldr	r3, [sp, #20]
 800ebb6:	6861      	ldr	r1, [r4, #4]
 800ebb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	9303      	str	r3, [sp, #12]
 800ebc0:	ab0a      	add	r3, sp, #40	; 0x28
 800ebc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ebc6:	ab09      	add	r3, sp, #36	; 0x24
 800ebc8:	ec49 8b10 	vmov	d0, r8, r9
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	6022      	str	r2, [r4, #0]
 800ebd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	f7ff fecd 	bl	800e974 <__cvt>
 800ebda:	9b06      	ldr	r3, [sp, #24]
 800ebdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebde:	2b47      	cmp	r3, #71	; 0x47
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	d108      	bne.n	800ebf6 <_printf_float+0x142>
 800ebe4:	1cc8      	adds	r0, r1, #3
 800ebe6:	db02      	blt.n	800ebee <_printf_float+0x13a>
 800ebe8:	6863      	ldr	r3, [r4, #4]
 800ebea:	4299      	cmp	r1, r3
 800ebec:	dd41      	ble.n	800ec72 <_printf_float+0x1be>
 800ebee:	f1ab 0b02 	sub.w	fp, fp, #2
 800ebf2:	fa5f fb8b 	uxtb.w	fp, fp
 800ebf6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ebfa:	d820      	bhi.n	800ec3e <_printf_float+0x18a>
 800ebfc:	3901      	subs	r1, #1
 800ebfe:	465a      	mov	r2, fp
 800ec00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec04:	9109      	str	r1, [sp, #36]	; 0x24
 800ec06:	f7ff ff17 	bl	800ea38 <__exponent>
 800ec0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec0c:	1813      	adds	r3, r2, r0
 800ec0e:	2a01      	cmp	r2, #1
 800ec10:	4681      	mov	r9, r0
 800ec12:	6123      	str	r3, [r4, #16]
 800ec14:	dc02      	bgt.n	800ec1c <_printf_float+0x168>
 800ec16:	6822      	ldr	r2, [r4, #0]
 800ec18:	07d2      	lsls	r2, r2, #31
 800ec1a:	d501      	bpl.n	800ec20 <_printf_float+0x16c>
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d09c      	beq.n	800eb62 <_printf_float+0xae>
 800ec28:	232d      	movs	r3, #45	; 0x2d
 800ec2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec2e:	e798      	b.n	800eb62 <_printf_float+0xae>
 800ec30:	9a06      	ldr	r2, [sp, #24]
 800ec32:	2a47      	cmp	r2, #71	; 0x47
 800ec34:	d1be      	bne.n	800ebb4 <_printf_float+0x100>
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1bc      	bne.n	800ebb4 <_printf_float+0x100>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e7b9      	b.n	800ebb2 <_printf_float+0xfe>
 800ec3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ec42:	d118      	bne.n	800ec76 <_printf_float+0x1c2>
 800ec44:	2900      	cmp	r1, #0
 800ec46:	6863      	ldr	r3, [r4, #4]
 800ec48:	dd0b      	ble.n	800ec62 <_printf_float+0x1ae>
 800ec4a:	6121      	str	r1, [r4, #16]
 800ec4c:	b913      	cbnz	r3, 800ec54 <_printf_float+0x1a0>
 800ec4e:	6822      	ldr	r2, [r4, #0]
 800ec50:	07d0      	lsls	r0, r2, #31
 800ec52:	d502      	bpl.n	800ec5a <_printf_float+0x1a6>
 800ec54:	3301      	adds	r3, #1
 800ec56:	440b      	add	r3, r1
 800ec58:	6123      	str	r3, [r4, #16]
 800ec5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ec5c:	f04f 0900 	mov.w	r9, #0
 800ec60:	e7de      	b.n	800ec20 <_printf_float+0x16c>
 800ec62:	b913      	cbnz	r3, 800ec6a <_printf_float+0x1b6>
 800ec64:	6822      	ldr	r2, [r4, #0]
 800ec66:	07d2      	lsls	r2, r2, #31
 800ec68:	d501      	bpl.n	800ec6e <_printf_float+0x1ba>
 800ec6a:	3302      	adds	r3, #2
 800ec6c:	e7f4      	b.n	800ec58 <_printf_float+0x1a4>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e7f2      	b.n	800ec58 <_printf_float+0x1a4>
 800ec72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec78:	4299      	cmp	r1, r3
 800ec7a:	db05      	blt.n	800ec88 <_printf_float+0x1d4>
 800ec7c:	6823      	ldr	r3, [r4, #0]
 800ec7e:	6121      	str	r1, [r4, #16]
 800ec80:	07d8      	lsls	r0, r3, #31
 800ec82:	d5ea      	bpl.n	800ec5a <_printf_float+0x1a6>
 800ec84:	1c4b      	adds	r3, r1, #1
 800ec86:	e7e7      	b.n	800ec58 <_printf_float+0x1a4>
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	bfd4      	ite	le
 800ec8c:	f1c1 0202 	rsble	r2, r1, #2
 800ec90:	2201      	movgt	r2, #1
 800ec92:	4413      	add	r3, r2
 800ec94:	e7e0      	b.n	800ec58 <_printf_float+0x1a4>
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	055a      	lsls	r2, r3, #21
 800ec9a:	d407      	bmi.n	800ecac <_printf_float+0x1f8>
 800ec9c:	6923      	ldr	r3, [r4, #16]
 800ec9e:	4642      	mov	r2, r8
 800eca0:	4631      	mov	r1, r6
 800eca2:	4628      	mov	r0, r5
 800eca4:	47b8      	blx	r7
 800eca6:	3001      	adds	r0, #1
 800eca8:	d12c      	bne.n	800ed04 <_printf_float+0x250>
 800ecaa:	e764      	b.n	800eb76 <_printf_float+0xc2>
 800ecac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ecb0:	f240 80e0 	bls.w	800ee74 <_printf_float+0x3c0>
 800ecb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f7f1 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d034      	beq.n	800ed2e <_printf_float+0x27a>
 800ecc4:	4a37      	ldr	r2, [pc, #220]	; (800eda4 <_printf_float+0x2f0>)
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	4631      	mov	r1, r6
 800ecca:	4628      	mov	r0, r5
 800eccc:	47b8      	blx	r7
 800ecce:	3001      	adds	r0, #1
 800ecd0:	f43f af51 	beq.w	800eb76 <_printf_float+0xc2>
 800ecd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	db02      	blt.n	800ece2 <_printf_float+0x22e>
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	07d8      	lsls	r0, r3, #31
 800ece0:	d510      	bpl.n	800ed04 <_printf_float+0x250>
 800ece2:	ee18 3a10 	vmov	r3, s16
 800ece6:	4652      	mov	r2, sl
 800ece8:	4631      	mov	r1, r6
 800ecea:	4628      	mov	r0, r5
 800ecec:	47b8      	blx	r7
 800ecee:	3001      	adds	r0, #1
 800ecf0:	f43f af41 	beq.w	800eb76 <_printf_float+0xc2>
 800ecf4:	f04f 0800 	mov.w	r8, #0
 800ecf8:	f104 091a 	add.w	r9, r4, #26
 800ecfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	4543      	cmp	r3, r8
 800ed02:	dc09      	bgt.n	800ed18 <_printf_float+0x264>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	079b      	lsls	r3, r3, #30
 800ed08:	f100 8105 	bmi.w	800ef16 <_printf_float+0x462>
 800ed0c:	68e0      	ldr	r0, [r4, #12]
 800ed0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed10:	4298      	cmp	r0, r3
 800ed12:	bfb8      	it	lt
 800ed14:	4618      	movlt	r0, r3
 800ed16:	e730      	b.n	800eb7a <_printf_float+0xc6>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	464a      	mov	r2, r9
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	4628      	mov	r0, r5
 800ed20:	47b8      	blx	r7
 800ed22:	3001      	adds	r0, #1
 800ed24:	f43f af27 	beq.w	800eb76 <_printf_float+0xc2>
 800ed28:	f108 0801 	add.w	r8, r8, #1
 800ed2c:	e7e6      	b.n	800ecfc <_printf_float+0x248>
 800ed2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	dc39      	bgt.n	800eda8 <_printf_float+0x2f4>
 800ed34:	4a1b      	ldr	r2, [pc, #108]	; (800eda4 <_printf_float+0x2f0>)
 800ed36:	2301      	movs	r3, #1
 800ed38:	4631      	mov	r1, r6
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	47b8      	blx	r7
 800ed3e:	3001      	adds	r0, #1
 800ed40:	f43f af19 	beq.w	800eb76 <_printf_float+0xc2>
 800ed44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	d102      	bne.n	800ed52 <_printf_float+0x29e>
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	07d9      	lsls	r1, r3, #31
 800ed50:	d5d8      	bpl.n	800ed04 <_printf_float+0x250>
 800ed52:	ee18 3a10 	vmov	r3, s16
 800ed56:	4652      	mov	r2, sl
 800ed58:	4631      	mov	r1, r6
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	47b8      	blx	r7
 800ed5e:	3001      	adds	r0, #1
 800ed60:	f43f af09 	beq.w	800eb76 <_printf_float+0xc2>
 800ed64:	f04f 0900 	mov.w	r9, #0
 800ed68:	f104 0a1a 	add.w	sl, r4, #26
 800ed6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6e:	425b      	negs	r3, r3
 800ed70:	454b      	cmp	r3, r9
 800ed72:	dc01      	bgt.n	800ed78 <_printf_float+0x2c4>
 800ed74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed76:	e792      	b.n	800ec9e <_printf_float+0x1ea>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	4652      	mov	r2, sl
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	4628      	mov	r0, r5
 800ed80:	47b8      	blx	r7
 800ed82:	3001      	adds	r0, #1
 800ed84:	f43f aef7 	beq.w	800eb76 <_printf_float+0xc2>
 800ed88:	f109 0901 	add.w	r9, r9, #1
 800ed8c:	e7ee      	b.n	800ed6c <_printf_float+0x2b8>
 800ed8e:	bf00      	nop
 800ed90:	7fefffff 	.word	0x7fefffff
 800ed94:	080115e4 	.word	0x080115e4
 800ed98:	080115e8 	.word	0x080115e8
 800ed9c:	080115f0 	.word	0x080115f0
 800eda0:	080115ec 	.word	0x080115ec
 800eda4:	080115f4 	.word	0x080115f4
 800eda8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edac:	429a      	cmp	r2, r3
 800edae:	bfa8      	it	ge
 800edb0:	461a      	movge	r2, r3
 800edb2:	2a00      	cmp	r2, #0
 800edb4:	4691      	mov	r9, r2
 800edb6:	dc37      	bgt.n	800ee28 <_printf_float+0x374>
 800edb8:	f04f 0b00 	mov.w	fp, #0
 800edbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edc0:	f104 021a 	add.w	r2, r4, #26
 800edc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edc6:	9305      	str	r3, [sp, #20]
 800edc8:	eba3 0309 	sub.w	r3, r3, r9
 800edcc:	455b      	cmp	r3, fp
 800edce:	dc33      	bgt.n	800ee38 <_printf_float+0x384>
 800edd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edd4:	429a      	cmp	r2, r3
 800edd6:	db3b      	blt.n	800ee50 <_printf_float+0x39c>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	07da      	lsls	r2, r3, #31
 800eddc:	d438      	bmi.n	800ee50 <_printf_float+0x39c>
 800edde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ede0:	9a05      	ldr	r2, [sp, #20]
 800ede2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ede4:	1a9a      	subs	r2, r3, r2
 800ede6:	eba3 0901 	sub.w	r9, r3, r1
 800edea:	4591      	cmp	r9, r2
 800edec:	bfa8      	it	ge
 800edee:	4691      	movge	r9, r2
 800edf0:	f1b9 0f00 	cmp.w	r9, #0
 800edf4:	dc35      	bgt.n	800ee62 <_printf_float+0x3ae>
 800edf6:	f04f 0800 	mov.w	r8, #0
 800edfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edfe:	f104 0a1a 	add.w	sl, r4, #26
 800ee02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee06:	1a9b      	subs	r3, r3, r2
 800ee08:	eba3 0309 	sub.w	r3, r3, r9
 800ee0c:	4543      	cmp	r3, r8
 800ee0e:	f77f af79 	ble.w	800ed04 <_printf_float+0x250>
 800ee12:	2301      	movs	r3, #1
 800ee14:	4652      	mov	r2, sl
 800ee16:	4631      	mov	r1, r6
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b8      	blx	r7
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	f43f aeaa 	beq.w	800eb76 <_printf_float+0xc2>
 800ee22:	f108 0801 	add.w	r8, r8, #1
 800ee26:	e7ec      	b.n	800ee02 <_printf_float+0x34e>
 800ee28:	4613      	mov	r3, r2
 800ee2a:	4631      	mov	r1, r6
 800ee2c:	4642      	mov	r2, r8
 800ee2e:	4628      	mov	r0, r5
 800ee30:	47b8      	blx	r7
 800ee32:	3001      	adds	r0, #1
 800ee34:	d1c0      	bne.n	800edb8 <_printf_float+0x304>
 800ee36:	e69e      	b.n	800eb76 <_printf_float+0xc2>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	4631      	mov	r1, r6
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	9205      	str	r2, [sp, #20]
 800ee40:	47b8      	blx	r7
 800ee42:	3001      	adds	r0, #1
 800ee44:	f43f ae97 	beq.w	800eb76 <_printf_float+0xc2>
 800ee48:	9a05      	ldr	r2, [sp, #20]
 800ee4a:	f10b 0b01 	add.w	fp, fp, #1
 800ee4e:	e7b9      	b.n	800edc4 <_printf_float+0x310>
 800ee50:	ee18 3a10 	vmov	r3, s16
 800ee54:	4652      	mov	r2, sl
 800ee56:	4631      	mov	r1, r6
 800ee58:	4628      	mov	r0, r5
 800ee5a:	47b8      	blx	r7
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	d1be      	bne.n	800edde <_printf_float+0x32a>
 800ee60:	e689      	b.n	800eb76 <_printf_float+0xc2>
 800ee62:	9a05      	ldr	r2, [sp, #20]
 800ee64:	464b      	mov	r3, r9
 800ee66:	4442      	add	r2, r8
 800ee68:	4631      	mov	r1, r6
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	47b8      	blx	r7
 800ee6e:	3001      	adds	r0, #1
 800ee70:	d1c1      	bne.n	800edf6 <_printf_float+0x342>
 800ee72:	e680      	b.n	800eb76 <_printf_float+0xc2>
 800ee74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee76:	2a01      	cmp	r2, #1
 800ee78:	dc01      	bgt.n	800ee7e <_printf_float+0x3ca>
 800ee7a:	07db      	lsls	r3, r3, #31
 800ee7c:	d538      	bpl.n	800eef0 <_printf_float+0x43c>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	4642      	mov	r2, r8
 800ee82:	4631      	mov	r1, r6
 800ee84:	4628      	mov	r0, r5
 800ee86:	47b8      	blx	r7
 800ee88:	3001      	adds	r0, #1
 800ee8a:	f43f ae74 	beq.w	800eb76 <_printf_float+0xc2>
 800ee8e:	ee18 3a10 	vmov	r3, s16
 800ee92:	4652      	mov	r2, sl
 800ee94:	4631      	mov	r1, r6
 800ee96:	4628      	mov	r0, r5
 800ee98:	47b8      	blx	r7
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	f43f ae6b 	beq.w	800eb76 <_printf_float+0xc2>
 800eea0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eea4:	2200      	movs	r2, #0
 800eea6:	2300      	movs	r3, #0
 800eea8:	f7f1 fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 800eeac:	b9d8      	cbnz	r0, 800eee6 <_printf_float+0x432>
 800eeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb0:	f108 0201 	add.w	r2, r8, #1
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	4628      	mov	r0, r5
 800eeba:	47b8      	blx	r7
 800eebc:	3001      	adds	r0, #1
 800eebe:	d10e      	bne.n	800eede <_printf_float+0x42a>
 800eec0:	e659      	b.n	800eb76 <_printf_float+0xc2>
 800eec2:	2301      	movs	r3, #1
 800eec4:	4652      	mov	r2, sl
 800eec6:	4631      	mov	r1, r6
 800eec8:	4628      	mov	r0, r5
 800eeca:	47b8      	blx	r7
 800eecc:	3001      	adds	r0, #1
 800eece:	f43f ae52 	beq.w	800eb76 <_printf_float+0xc2>
 800eed2:	f108 0801 	add.w	r8, r8, #1
 800eed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed8:	3b01      	subs	r3, #1
 800eeda:	4543      	cmp	r3, r8
 800eedc:	dcf1      	bgt.n	800eec2 <_printf_float+0x40e>
 800eede:	464b      	mov	r3, r9
 800eee0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eee4:	e6dc      	b.n	800eca0 <_printf_float+0x1ec>
 800eee6:	f04f 0800 	mov.w	r8, #0
 800eeea:	f104 0a1a 	add.w	sl, r4, #26
 800eeee:	e7f2      	b.n	800eed6 <_printf_float+0x422>
 800eef0:	2301      	movs	r3, #1
 800eef2:	4642      	mov	r2, r8
 800eef4:	e7df      	b.n	800eeb6 <_printf_float+0x402>
 800eef6:	2301      	movs	r3, #1
 800eef8:	464a      	mov	r2, r9
 800eefa:	4631      	mov	r1, r6
 800eefc:	4628      	mov	r0, r5
 800eefe:	47b8      	blx	r7
 800ef00:	3001      	adds	r0, #1
 800ef02:	f43f ae38 	beq.w	800eb76 <_printf_float+0xc2>
 800ef06:	f108 0801 	add.w	r8, r8, #1
 800ef0a:	68e3      	ldr	r3, [r4, #12]
 800ef0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef0e:	1a5b      	subs	r3, r3, r1
 800ef10:	4543      	cmp	r3, r8
 800ef12:	dcf0      	bgt.n	800eef6 <_printf_float+0x442>
 800ef14:	e6fa      	b.n	800ed0c <_printf_float+0x258>
 800ef16:	f04f 0800 	mov.w	r8, #0
 800ef1a:	f104 0919 	add.w	r9, r4, #25
 800ef1e:	e7f4      	b.n	800ef0a <_printf_float+0x456>

0800ef20 <_printf_common>:
 800ef20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef24:	4616      	mov	r6, r2
 800ef26:	4699      	mov	r9, r3
 800ef28:	688a      	ldr	r2, [r1, #8]
 800ef2a:	690b      	ldr	r3, [r1, #16]
 800ef2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef30:	4293      	cmp	r3, r2
 800ef32:	bfb8      	it	lt
 800ef34:	4613      	movlt	r3, r2
 800ef36:	6033      	str	r3, [r6, #0]
 800ef38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	460c      	mov	r4, r1
 800ef40:	b10a      	cbz	r2, 800ef46 <_printf_common+0x26>
 800ef42:	3301      	adds	r3, #1
 800ef44:	6033      	str	r3, [r6, #0]
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	0699      	lsls	r1, r3, #26
 800ef4a:	bf42      	ittt	mi
 800ef4c:	6833      	ldrmi	r3, [r6, #0]
 800ef4e:	3302      	addmi	r3, #2
 800ef50:	6033      	strmi	r3, [r6, #0]
 800ef52:	6825      	ldr	r5, [r4, #0]
 800ef54:	f015 0506 	ands.w	r5, r5, #6
 800ef58:	d106      	bne.n	800ef68 <_printf_common+0x48>
 800ef5a:	f104 0a19 	add.w	sl, r4, #25
 800ef5e:	68e3      	ldr	r3, [r4, #12]
 800ef60:	6832      	ldr	r2, [r6, #0]
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	42ab      	cmp	r3, r5
 800ef66:	dc26      	bgt.n	800efb6 <_printf_common+0x96>
 800ef68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef6c:	1e13      	subs	r3, r2, #0
 800ef6e:	6822      	ldr	r2, [r4, #0]
 800ef70:	bf18      	it	ne
 800ef72:	2301      	movne	r3, #1
 800ef74:	0692      	lsls	r2, r2, #26
 800ef76:	d42b      	bmi.n	800efd0 <_printf_common+0xb0>
 800ef78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4638      	mov	r0, r7
 800ef80:	47c0      	blx	r8
 800ef82:	3001      	adds	r0, #1
 800ef84:	d01e      	beq.n	800efc4 <_printf_common+0xa4>
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	68e5      	ldr	r5, [r4, #12]
 800ef8a:	6832      	ldr	r2, [r6, #0]
 800ef8c:	f003 0306 	and.w	r3, r3, #6
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	bf08      	it	eq
 800ef94:	1aad      	subeq	r5, r5, r2
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	6922      	ldr	r2, [r4, #16]
 800ef9a:	bf0c      	ite	eq
 800ef9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efa0:	2500      	movne	r5, #0
 800efa2:	4293      	cmp	r3, r2
 800efa4:	bfc4      	itt	gt
 800efa6:	1a9b      	subgt	r3, r3, r2
 800efa8:	18ed      	addgt	r5, r5, r3
 800efaa:	2600      	movs	r6, #0
 800efac:	341a      	adds	r4, #26
 800efae:	42b5      	cmp	r5, r6
 800efb0:	d11a      	bne.n	800efe8 <_printf_common+0xc8>
 800efb2:	2000      	movs	r0, #0
 800efb4:	e008      	b.n	800efc8 <_printf_common+0xa8>
 800efb6:	2301      	movs	r3, #1
 800efb8:	4652      	mov	r2, sl
 800efba:	4649      	mov	r1, r9
 800efbc:	4638      	mov	r0, r7
 800efbe:	47c0      	blx	r8
 800efc0:	3001      	adds	r0, #1
 800efc2:	d103      	bne.n	800efcc <_printf_common+0xac>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efcc:	3501      	adds	r5, #1
 800efce:	e7c6      	b.n	800ef5e <_printf_common+0x3e>
 800efd0:	18e1      	adds	r1, r4, r3
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	2030      	movs	r0, #48	; 0x30
 800efd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efda:	4422      	add	r2, r4
 800efdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efe4:	3302      	adds	r3, #2
 800efe6:	e7c7      	b.n	800ef78 <_printf_common+0x58>
 800efe8:	2301      	movs	r3, #1
 800efea:	4622      	mov	r2, r4
 800efec:	4649      	mov	r1, r9
 800efee:	4638      	mov	r0, r7
 800eff0:	47c0      	blx	r8
 800eff2:	3001      	adds	r0, #1
 800eff4:	d0e6      	beq.n	800efc4 <_printf_common+0xa4>
 800eff6:	3601      	adds	r6, #1
 800eff8:	e7d9      	b.n	800efae <_printf_common+0x8e>
	...

0800effc <_printf_i>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	7e0f      	ldrb	r7, [r1, #24]
 800f002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f004:	2f78      	cmp	r7, #120	; 0x78
 800f006:	4691      	mov	r9, r2
 800f008:	4680      	mov	r8, r0
 800f00a:	460c      	mov	r4, r1
 800f00c:	469a      	mov	sl, r3
 800f00e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f012:	d807      	bhi.n	800f024 <_printf_i+0x28>
 800f014:	2f62      	cmp	r7, #98	; 0x62
 800f016:	d80a      	bhi.n	800f02e <_printf_i+0x32>
 800f018:	2f00      	cmp	r7, #0
 800f01a:	f000 80d8 	beq.w	800f1ce <_printf_i+0x1d2>
 800f01e:	2f58      	cmp	r7, #88	; 0x58
 800f020:	f000 80a3 	beq.w	800f16a <_printf_i+0x16e>
 800f024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f02c:	e03a      	b.n	800f0a4 <_printf_i+0xa8>
 800f02e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f032:	2b15      	cmp	r3, #21
 800f034:	d8f6      	bhi.n	800f024 <_printf_i+0x28>
 800f036:	a101      	add	r1, pc, #4	; (adr r1, 800f03c <_printf_i+0x40>)
 800f038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f03c:	0800f095 	.word	0x0800f095
 800f040:	0800f0a9 	.word	0x0800f0a9
 800f044:	0800f025 	.word	0x0800f025
 800f048:	0800f025 	.word	0x0800f025
 800f04c:	0800f025 	.word	0x0800f025
 800f050:	0800f025 	.word	0x0800f025
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800f025 	.word	0x0800f025
 800f05c:	0800f025 	.word	0x0800f025
 800f060:	0800f025 	.word	0x0800f025
 800f064:	0800f025 	.word	0x0800f025
 800f068:	0800f1b5 	.word	0x0800f1b5
 800f06c:	0800f0d9 	.word	0x0800f0d9
 800f070:	0800f197 	.word	0x0800f197
 800f074:	0800f025 	.word	0x0800f025
 800f078:	0800f025 	.word	0x0800f025
 800f07c:	0800f1d7 	.word	0x0800f1d7
 800f080:	0800f025 	.word	0x0800f025
 800f084:	0800f0d9 	.word	0x0800f0d9
 800f088:	0800f025 	.word	0x0800f025
 800f08c:	0800f025 	.word	0x0800f025
 800f090:	0800f19f 	.word	0x0800f19f
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	602a      	str	r2, [r5, #0]
 800f09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e0a3      	b.n	800f1f0 <_printf_i+0x1f4>
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	6829      	ldr	r1, [r5, #0]
 800f0ac:	0606      	lsls	r6, r0, #24
 800f0ae:	f101 0304 	add.w	r3, r1, #4
 800f0b2:	d50a      	bpl.n	800f0ca <_printf_i+0xce>
 800f0b4:	680e      	ldr	r6, [r1, #0]
 800f0b6:	602b      	str	r3, [r5, #0]
 800f0b8:	2e00      	cmp	r6, #0
 800f0ba:	da03      	bge.n	800f0c4 <_printf_i+0xc8>
 800f0bc:	232d      	movs	r3, #45	; 0x2d
 800f0be:	4276      	negs	r6, r6
 800f0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c4:	485e      	ldr	r0, [pc, #376]	; (800f240 <_printf_i+0x244>)
 800f0c6:	230a      	movs	r3, #10
 800f0c8:	e019      	b.n	800f0fe <_printf_i+0x102>
 800f0ca:	680e      	ldr	r6, [r1, #0]
 800f0cc:	602b      	str	r3, [r5, #0]
 800f0ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0d2:	bf18      	it	ne
 800f0d4:	b236      	sxthne	r6, r6
 800f0d6:	e7ef      	b.n	800f0b8 <_printf_i+0xbc>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	6820      	ldr	r0, [r4, #0]
 800f0dc:	1d19      	adds	r1, r3, #4
 800f0de:	6029      	str	r1, [r5, #0]
 800f0e0:	0601      	lsls	r1, r0, #24
 800f0e2:	d501      	bpl.n	800f0e8 <_printf_i+0xec>
 800f0e4:	681e      	ldr	r6, [r3, #0]
 800f0e6:	e002      	b.n	800f0ee <_printf_i+0xf2>
 800f0e8:	0646      	lsls	r6, r0, #25
 800f0ea:	d5fb      	bpl.n	800f0e4 <_printf_i+0xe8>
 800f0ec:	881e      	ldrh	r6, [r3, #0]
 800f0ee:	4854      	ldr	r0, [pc, #336]	; (800f240 <_printf_i+0x244>)
 800f0f0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0f2:	bf0c      	ite	eq
 800f0f4:	2308      	moveq	r3, #8
 800f0f6:	230a      	movne	r3, #10
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0fe:	6865      	ldr	r5, [r4, #4]
 800f100:	60a5      	str	r5, [r4, #8]
 800f102:	2d00      	cmp	r5, #0
 800f104:	bfa2      	ittt	ge
 800f106:	6821      	ldrge	r1, [r4, #0]
 800f108:	f021 0104 	bicge.w	r1, r1, #4
 800f10c:	6021      	strge	r1, [r4, #0]
 800f10e:	b90e      	cbnz	r6, 800f114 <_printf_i+0x118>
 800f110:	2d00      	cmp	r5, #0
 800f112:	d04d      	beq.n	800f1b0 <_printf_i+0x1b4>
 800f114:	4615      	mov	r5, r2
 800f116:	fbb6 f1f3 	udiv	r1, r6, r3
 800f11a:	fb03 6711 	mls	r7, r3, r1, r6
 800f11e:	5dc7      	ldrb	r7, [r0, r7]
 800f120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f124:	4637      	mov	r7, r6
 800f126:	42bb      	cmp	r3, r7
 800f128:	460e      	mov	r6, r1
 800f12a:	d9f4      	bls.n	800f116 <_printf_i+0x11a>
 800f12c:	2b08      	cmp	r3, #8
 800f12e:	d10b      	bne.n	800f148 <_printf_i+0x14c>
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	07de      	lsls	r6, r3, #31
 800f134:	d508      	bpl.n	800f148 <_printf_i+0x14c>
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	6861      	ldr	r1, [r4, #4]
 800f13a:	4299      	cmp	r1, r3
 800f13c:	bfde      	ittt	le
 800f13e:	2330      	movle	r3, #48	; 0x30
 800f140:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f144:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f148:	1b52      	subs	r2, r2, r5
 800f14a:	6122      	str	r2, [r4, #16]
 800f14c:	f8cd a000 	str.w	sl, [sp]
 800f150:	464b      	mov	r3, r9
 800f152:	aa03      	add	r2, sp, #12
 800f154:	4621      	mov	r1, r4
 800f156:	4640      	mov	r0, r8
 800f158:	f7ff fee2 	bl	800ef20 <_printf_common>
 800f15c:	3001      	adds	r0, #1
 800f15e:	d14c      	bne.n	800f1fa <_printf_i+0x1fe>
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	b004      	add	sp, #16
 800f166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16a:	4835      	ldr	r0, [pc, #212]	; (800f240 <_printf_i+0x244>)
 800f16c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f170:	6829      	ldr	r1, [r5, #0]
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	f851 6b04 	ldr.w	r6, [r1], #4
 800f178:	6029      	str	r1, [r5, #0]
 800f17a:	061d      	lsls	r5, r3, #24
 800f17c:	d514      	bpl.n	800f1a8 <_printf_i+0x1ac>
 800f17e:	07df      	lsls	r7, r3, #31
 800f180:	bf44      	itt	mi
 800f182:	f043 0320 	orrmi.w	r3, r3, #32
 800f186:	6023      	strmi	r3, [r4, #0]
 800f188:	b91e      	cbnz	r6, 800f192 <_printf_i+0x196>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	f023 0320 	bic.w	r3, r3, #32
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	2310      	movs	r3, #16
 800f194:	e7b0      	b.n	800f0f8 <_printf_i+0xfc>
 800f196:	6823      	ldr	r3, [r4, #0]
 800f198:	f043 0320 	orr.w	r3, r3, #32
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	2378      	movs	r3, #120	; 0x78
 800f1a0:	4828      	ldr	r0, [pc, #160]	; (800f244 <_printf_i+0x248>)
 800f1a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1a6:	e7e3      	b.n	800f170 <_printf_i+0x174>
 800f1a8:	0659      	lsls	r1, r3, #25
 800f1aa:	bf48      	it	mi
 800f1ac:	b2b6      	uxthmi	r6, r6
 800f1ae:	e7e6      	b.n	800f17e <_printf_i+0x182>
 800f1b0:	4615      	mov	r5, r2
 800f1b2:	e7bb      	b.n	800f12c <_printf_i+0x130>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	6826      	ldr	r6, [r4, #0]
 800f1b8:	6961      	ldr	r1, [r4, #20]
 800f1ba:	1d18      	adds	r0, r3, #4
 800f1bc:	6028      	str	r0, [r5, #0]
 800f1be:	0635      	lsls	r5, r6, #24
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	d501      	bpl.n	800f1c8 <_printf_i+0x1cc>
 800f1c4:	6019      	str	r1, [r3, #0]
 800f1c6:	e002      	b.n	800f1ce <_printf_i+0x1d2>
 800f1c8:	0670      	lsls	r0, r6, #25
 800f1ca:	d5fb      	bpl.n	800f1c4 <_printf_i+0x1c8>
 800f1cc:	8019      	strh	r1, [r3, #0]
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	4615      	mov	r5, r2
 800f1d4:	e7ba      	b.n	800f14c <_printf_i+0x150>
 800f1d6:	682b      	ldr	r3, [r5, #0]
 800f1d8:	1d1a      	adds	r2, r3, #4
 800f1da:	602a      	str	r2, [r5, #0]
 800f1dc:	681d      	ldr	r5, [r3, #0]
 800f1de:	6862      	ldr	r2, [r4, #4]
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	f7f1 f804 	bl	80001f0 <memchr>
 800f1e8:	b108      	cbz	r0, 800f1ee <_printf_i+0x1f2>
 800f1ea:	1b40      	subs	r0, r0, r5
 800f1ec:	6060      	str	r0, [r4, #4]
 800f1ee:	6863      	ldr	r3, [r4, #4]
 800f1f0:	6123      	str	r3, [r4, #16]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1f8:	e7a8      	b.n	800f14c <_printf_i+0x150>
 800f1fa:	6923      	ldr	r3, [r4, #16]
 800f1fc:	462a      	mov	r2, r5
 800f1fe:	4649      	mov	r1, r9
 800f200:	4640      	mov	r0, r8
 800f202:	47d0      	blx	sl
 800f204:	3001      	adds	r0, #1
 800f206:	d0ab      	beq.n	800f160 <_printf_i+0x164>
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	079b      	lsls	r3, r3, #30
 800f20c:	d413      	bmi.n	800f236 <_printf_i+0x23a>
 800f20e:	68e0      	ldr	r0, [r4, #12]
 800f210:	9b03      	ldr	r3, [sp, #12]
 800f212:	4298      	cmp	r0, r3
 800f214:	bfb8      	it	lt
 800f216:	4618      	movlt	r0, r3
 800f218:	e7a4      	b.n	800f164 <_printf_i+0x168>
 800f21a:	2301      	movs	r3, #1
 800f21c:	4632      	mov	r2, r6
 800f21e:	4649      	mov	r1, r9
 800f220:	4640      	mov	r0, r8
 800f222:	47d0      	blx	sl
 800f224:	3001      	adds	r0, #1
 800f226:	d09b      	beq.n	800f160 <_printf_i+0x164>
 800f228:	3501      	adds	r5, #1
 800f22a:	68e3      	ldr	r3, [r4, #12]
 800f22c:	9903      	ldr	r1, [sp, #12]
 800f22e:	1a5b      	subs	r3, r3, r1
 800f230:	42ab      	cmp	r3, r5
 800f232:	dcf2      	bgt.n	800f21a <_printf_i+0x21e>
 800f234:	e7eb      	b.n	800f20e <_printf_i+0x212>
 800f236:	2500      	movs	r5, #0
 800f238:	f104 0619 	add.w	r6, r4, #25
 800f23c:	e7f5      	b.n	800f22a <_printf_i+0x22e>
 800f23e:	bf00      	nop
 800f240:	080115f6 	.word	0x080115f6
 800f244:	08011607 	.word	0x08011607

0800f248 <iprintf>:
 800f248:	b40f      	push	{r0, r1, r2, r3}
 800f24a:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <iprintf+0x2c>)
 800f24c:	b513      	push	{r0, r1, r4, lr}
 800f24e:	681c      	ldr	r4, [r3, #0]
 800f250:	b124      	cbz	r4, 800f25c <iprintf+0x14>
 800f252:	69a3      	ldr	r3, [r4, #24]
 800f254:	b913      	cbnz	r3, 800f25c <iprintf+0x14>
 800f256:	4620      	mov	r0, r4
 800f258:	f001 f8da 	bl	8010410 <__sinit>
 800f25c:	ab05      	add	r3, sp, #20
 800f25e:	9a04      	ldr	r2, [sp, #16]
 800f260:	68a1      	ldr	r1, [r4, #8]
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	4620      	mov	r0, r4
 800f266:	f001 fe97 	bl	8010f98 <_vfiprintf_r>
 800f26a:	b002      	add	sp, #8
 800f26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f270:	b004      	add	sp, #16
 800f272:	4770      	bx	lr
 800f274:	200000fc 	.word	0x200000fc

0800f278 <_puts_r>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	460e      	mov	r6, r1
 800f27c:	4605      	mov	r5, r0
 800f27e:	b118      	cbz	r0, 800f288 <_puts_r+0x10>
 800f280:	6983      	ldr	r3, [r0, #24]
 800f282:	b90b      	cbnz	r3, 800f288 <_puts_r+0x10>
 800f284:	f001 f8c4 	bl	8010410 <__sinit>
 800f288:	69ab      	ldr	r3, [r5, #24]
 800f28a:	68ac      	ldr	r4, [r5, #8]
 800f28c:	b913      	cbnz	r3, 800f294 <_puts_r+0x1c>
 800f28e:	4628      	mov	r0, r5
 800f290:	f001 f8be 	bl	8010410 <__sinit>
 800f294:	4b2c      	ldr	r3, [pc, #176]	; (800f348 <_puts_r+0xd0>)
 800f296:	429c      	cmp	r4, r3
 800f298:	d120      	bne.n	800f2dc <_puts_r+0x64>
 800f29a:	686c      	ldr	r4, [r5, #4]
 800f29c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f29e:	07db      	lsls	r3, r3, #31
 800f2a0:	d405      	bmi.n	800f2ae <_puts_r+0x36>
 800f2a2:	89a3      	ldrh	r3, [r4, #12]
 800f2a4:	0598      	lsls	r0, r3, #22
 800f2a6:	d402      	bmi.n	800f2ae <_puts_r+0x36>
 800f2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2aa:	f001 f954 	bl	8010556 <__retarget_lock_acquire_recursive>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	0719      	lsls	r1, r3, #28
 800f2b2:	d51d      	bpl.n	800f2f0 <_puts_r+0x78>
 800f2b4:	6923      	ldr	r3, [r4, #16]
 800f2b6:	b1db      	cbz	r3, 800f2f0 <_puts_r+0x78>
 800f2b8:	3e01      	subs	r6, #1
 800f2ba:	68a3      	ldr	r3, [r4, #8]
 800f2bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	60a3      	str	r3, [r4, #8]
 800f2c4:	bb39      	cbnz	r1, 800f316 <_puts_r+0x9e>
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	da38      	bge.n	800f33c <_puts_r+0xc4>
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	210a      	movs	r1, #10
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f000 f848 	bl	800f364 <__swbuf_r>
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d011      	beq.n	800f2fc <_puts_r+0x84>
 800f2d8:	250a      	movs	r5, #10
 800f2da:	e011      	b.n	800f300 <_puts_r+0x88>
 800f2dc:	4b1b      	ldr	r3, [pc, #108]	; (800f34c <_puts_r+0xd4>)
 800f2de:	429c      	cmp	r4, r3
 800f2e0:	d101      	bne.n	800f2e6 <_puts_r+0x6e>
 800f2e2:	68ac      	ldr	r4, [r5, #8]
 800f2e4:	e7da      	b.n	800f29c <_puts_r+0x24>
 800f2e6:	4b1a      	ldr	r3, [pc, #104]	; (800f350 <_puts_r+0xd8>)
 800f2e8:	429c      	cmp	r4, r3
 800f2ea:	bf08      	it	eq
 800f2ec:	68ec      	ldreq	r4, [r5, #12]
 800f2ee:	e7d5      	b.n	800f29c <_puts_r+0x24>
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f000 f888 	bl	800f408 <__swsetup_r>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d0dd      	beq.n	800f2b8 <_puts_r+0x40>
 800f2fc:	f04f 35ff 	mov.w	r5, #4294967295
 800f300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f302:	07da      	lsls	r2, r3, #31
 800f304:	d405      	bmi.n	800f312 <_puts_r+0x9a>
 800f306:	89a3      	ldrh	r3, [r4, #12]
 800f308:	059b      	lsls	r3, r3, #22
 800f30a:	d402      	bmi.n	800f312 <_puts_r+0x9a>
 800f30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30e:	f001 f923 	bl	8010558 <__retarget_lock_release_recursive>
 800f312:	4628      	mov	r0, r5
 800f314:	bd70      	pop	{r4, r5, r6, pc}
 800f316:	2b00      	cmp	r3, #0
 800f318:	da04      	bge.n	800f324 <_puts_r+0xac>
 800f31a:	69a2      	ldr	r2, [r4, #24]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	dc06      	bgt.n	800f32e <_puts_r+0xb6>
 800f320:	290a      	cmp	r1, #10
 800f322:	d004      	beq.n	800f32e <_puts_r+0xb6>
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	6022      	str	r2, [r4, #0]
 800f32a:	7019      	strb	r1, [r3, #0]
 800f32c:	e7c5      	b.n	800f2ba <_puts_r+0x42>
 800f32e:	4622      	mov	r2, r4
 800f330:	4628      	mov	r0, r5
 800f332:	f000 f817 	bl	800f364 <__swbuf_r>
 800f336:	3001      	adds	r0, #1
 800f338:	d1bf      	bne.n	800f2ba <_puts_r+0x42>
 800f33a:	e7df      	b.n	800f2fc <_puts_r+0x84>
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	250a      	movs	r5, #10
 800f340:	1c5a      	adds	r2, r3, #1
 800f342:	6022      	str	r2, [r4, #0]
 800f344:	701d      	strb	r5, [r3, #0]
 800f346:	e7db      	b.n	800f300 <_puts_r+0x88>
 800f348:	080116c8 	.word	0x080116c8
 800f34c:	080116e8 	.word	0x080116e8
 800f350:	080116a8 	.word	0x080116a8

0800f354 <puts>:
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <puts+0xc>)
 800f356:	4601      	mov	r1, r0
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	f7ff bf8d 	b.w	800f278 <_puts_r>
 800f35e:	bf00      	nop
 800f360:	200000fc 	.word	0x200000fc

0800f364 <__swbuf_r>:
 800f364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f366:	460e      	mov	r6, r1
 800f368:	4614      	mov	r4, r2
 800f36a:	4605      	mov	r5, r0
 800f36c:	b118      	cbz	r0, 800f376 <__swbuf_r+0x12>
 800f36e:	6983      	ldr	r3, [r0, #24]
 800f370:	b90b      	cbnz	r3, 800f376 <__swbuf_r+0x12>
 800f372:	f001 f84d 	bl	8010410 <__sinit>
 800f376:	4b21      	ldr	r3, [pc, #132]	; (800f3fc <__swbuf_r+0x98>)
 800f378:	429c      	cmp	r4, r3
 800f37a:	d12b      	bne.n	800f3d4 <__swbuf_r+0x70>
 800f37c:	686c      	ldr	r4, [r5, #4]
 800f37e:	69a3      	ldr	r3, [r4, #24]
 800f380:	60a3      	str	r3, [r4, #8]
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	071a      	lsls	r2, r3, #28
 800f386:	d52f      	bpl.n	800f3e8 <__swbuf_r+0x84>
 800f388:	6923      	ldr	r3, [r4, #16]
 800f38a:	b36b      	cbz	r3, 800f3e8 <__swbuf_r+0x84>
 800f38c:	6923      	ldr	r3, [r4, #16]
 800f38e:	6820      	ldr	r0, [r4, #0]
 800f390:	1ac0      	subs	r0, r0, r3
 800f392:	6963      	ldr	r3, [r4, #20]
 800f394:	b2f6      	uxtb	r6, r6
 800f396:	4283      	cmp	r3, r0
 800f398:	4637      	mov	r7, r6
 800f39a:	dc04      	bgt.n	800f3a6 <__swbuf_r+0x42>
 800f39c:	4621      	mov	r1, r4
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f000 ffa2 	bl	80102e8 <_fflush_r>
 800f3a4:	bb30      	cbnz	r0, 800f3f4 <__swbuf_r+0x90>
 800f3a6:	68a3      	ldr	r3, [r4, #8]
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	60a3      	str	r3, [r4, #8]
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	1c5a      	adds	r2, r3, #1
 800f3b0:	6022      	str	r2, [r4, #0]
 800f3b2:	701e      	strb	r6, [r3, #0]
 800f3b4:	6963      	ldr	r3, [r4, #20]
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	4283      	cmp	r3, r0
 800f3ba:	d004      	beq.n	800f3c6 <__swbuf_r+0x62>
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	07db      	lsls	r3, r3, #31
 800f3c0:	d506      	bpl.n	800f3d0 <__swbuf_r+0x6c>
 800f3c2:	2e0a      	cmp	r6, #10
 800f3c4:	d104      	bne.n	800f3d0 <__swbuf_r+0x6c>
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f000 ff8d 	bl	80102e8 <_fflush_r>
 800f3ce:	b988      	cbnz	r0, 800f3f4 <__swbuf_r+0x90>
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d4:	4b0a      	ldr	r3, [pc, #40]	; (800f400 <__swbuf_r+0x9c>)
 800f3d6:	429c      	cmp	r4, r3
 800f3d8:	d101      	bne.n	800f3de <__swbuf_r+0x7a>
 800f3da:	68ac      	ldr	r4, [r5, #8]
 800f3dc:	e7cf      	b.n	800f37e <__swbuf_r+0x1a>
 800f3de:	4b09      	ldr	r3, [pc, #36]	; (800f404 <__swbuf_r+0xa0>)
 800f3e0:	429c      	cmp	r4, r3
 800f3e2:	bf08      	it	eq
 800f3e4:	68ec      	ldreq	r4, [r5, #12]
 800f3e6:	e7ca      	b.n	800f37e <__swbuf_r+0x1a>
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f000 f80c 	bl	800f408 <__swsetup_r>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d0cb      	beq.n	800f38c <__swbuf_r+0x28>
 800f3f4:	f04f 37ff 	mov.w	r7, #4294967295
 800f3f8:	e7ea      	b.n	800f3d0 <__swbuf_r+0x6c>
 800f3fa:	bf00      	nop
 800f3fc:	080116c8 	.word	0x080116c8
 800f400:	080116e8 	.word	0x080116e8
 800f404:	080116a8 	.word	0x080116a8

0800f408 <__swsetup_r>:
 800f408:	4b32      	ldr	r3, [pc, #200]	; (800f4d4 <__swsetup_r+0xcc>)
 800f40a:	b570      	push	{r4, r5, r6, lr}
 800f40c:	681d      	ldr	r5, [r3, #0]
 800f40e:	4606      	mov	r6, r0
 800f410:	460c      	mov	r4, r1
 800f412:	b125      	cbz	r5, 800f41e <__swsetup_r+0x16>
 800f414:	69ab      	ldr	r3, [r5, #24]
 800f416:	b913      	cbnz	r3, 800f41e <__swsetup_r+0x16>
 800f418:	4628      	mov	r0, r5
 800f41a:	f000 fff9 	bl	8010410 <__sinit>
 800f41e:	4b2e      	ldr	r3, [pc, #184]	; (800f4d8 <__swsetup_r+0xd0>)
 800f420:	429c      	cmp	r4, r3
 800f422:	d10f      	bne.n	800f444 <__swsetup_r+0x3c>
 800f424:	686c      	ldr	r4, [r5, #4]
 800f426:	89a3      	ldrh	r3, [r4, #12]
 800f428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f42c:	0719      	lsls	r1, r3, #28
 800f42e:	d42c      	bmi.n	800f48a <__swsetup_r+0x82>
 800f430:	06dd      	lsls	r5, r3, #27
 800f432:	d411      	bmi.n	800f458 <__swsetup_r+0x50>
 800f434:	2309      	movs	r3, #9
 800f436:	6033      	str	r3, [r6, #0]
 800f438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	f04f 30ff 	mov.w	r0, #4294967295
 800f442:	e03e      	b.n	800f4c2 <__swsetup_r+0xba>
 800f444:	4b25      	ldr	r3, [pc, #148]	; (800f4dc <__swsetup_r+0xd4>)
 800f446:	429c      	cmp	r4, r3
 800f448:	d101      	bne.n	800f44e <__swsetup_r+0x46>
 800f44a:	68ac      	ldr	r4, [r5, #8]
 800f44c:	e7eb      	b.n	800f426 <__swsetup_r+0x1e>
 800f44e:	4b24      	ldr	r3, [pc, #144]	; (800f4e0 <__swsetup_r+0xd8>)
 800f450:	429c      	cmp	r4, r3
 800f452:	bf08      	it	eq
 800f454:	68ec      	ldreq	r4, [r5, #12]
 800f456:	e7e6      	b.n	800f426 <__swsetup_r+0x1e>
 800f458:	0758      	lsls	r0, r3, #29
 800f45a:	d512      	bpl.n	800f482 <__swsetup_r+0x7a>
 800f45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f45e:	b141      	cbz	r1, 800f472 <__swsetup_r+0x6a>
 800f460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f464:	4299      	cmp	r1, r3
 800f466:	d002      	beq.n	800f46e <__swsetup_r+0x66>
 800f468:	4630      	mov	r0, r6
 800f46a:	f001 fc8b 	bl	8010d84 <_free_r>
 800f46e:	2300      	movs	r3, #0
 800f470:	6363      	str	r3, [r4, #52]	; 0x34
 800f472:	89a3      	ldrh	r3, [r4, #12]
 800f474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f478:	81a3      	strh	r3, [r4, #12]
 800f47a:	2300      	movs	r3, #0
 800f47c:	6063      	str	r3, [r4, #4]
 800f47e:	6923      	ldr	r3, [r4, #16]
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	f043 0308 	orr.w	r3, r3, #8
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	6923      	ldr	r3, [r4, #16]
 800f48c:	b94b      	cbnz	r3, 800f4a2 <__swsetup_r+0x9a>
 800f48e:	89a3      	ldrh	r3, [r4, #12]
 800f490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f498:	d003      	beq.n	800f4a2 <__swsetup_r+0x9a>
 800f49a:	4621      	mov	r1, r4
 800f49c:	4630      	mov	r0, r6
 800f49e:	f001 f881 	bl	80105a4 <__smakebuf_r>
 800f4a2:	89a0      	ldrh	r0, [r4, #12]
 800f4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4a8:	f010 0301 	ands.w	r3, r0, #1
 800f4ac:	d00a      	beq.n	800f4c4 <__swsetup_r+0xbc>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	60a3      	str	r3, [r4, #8]
 800f4b2:	6963      	ldr	r3, [r4, #20]
 800f4b4:	425b      	negs	r3, r3
 800f4b6:	61a3      	str	r3, [r4, #24]
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	b943      	cbnz	r3, 800f4ce <__swsetup_r+0xc6>
 800f4bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4c0:	d1ba      	bne.n	800f438 <__swsetup_r+0x30>
 800f4c2:	bd70      	pop	{r4, r5, r6, pc}
 800f4c4:	0781      	lsls	r1, r0, #30
 800f4c6:	bf58      	it	pl
 800f4c8:	6963      	ldrpl	r3, [r4, #20]
 800f4ca:	60a3      	str	r3, [r4, #8]
 800f4cc:	e7f4      	b.n	800f4b8 <__swsetup_r+0xb0>
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	e7f7      	b.n	800f4c2 <__swsetup_r+0xba>
 800f4d2:	bf00      	nop
 800f4d4:	200000fc 	.word	0x200000fc
 800f4d8:	080116c8 	.word	0x080116c8
 800f4dc:	080116e8 	.word	0x080116e8
 800f4e0:	080116a8 	.word	0x080116a8

0800f4e4 <quorem>:
 800f4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	6903      	ldr	r3, [r0, #16]
 800f4ea:	690c      	ldr	r4, [r1, #16]
 800f4ec:	42a3      	cmp	r3, r4
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	f2c0 8081 	blt.w	800f5f6 <quorem+0x112>
 800f4f4:	3c01      	subs	r4, #1
 800f4f6:	f101 0814 	add.w	r8, r1, #20
 800f4fa:	f100 0514 	add.w	r5, r0, #20
 800f4fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f502:	9301      	str	r3, [sp, #4]
 800f504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f50c:	3301      	adds	r3, #1
 800f50e:	429a      	cmp	r2, r3
 800f510:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f518:	fbb2 f6f3 	udiv	r6, r2, r3
 800f51c:	d331      	bcc.n	800f582 <quorem+0x9e>
 800f51e:	f04f 0e00 	mov.w	lr, #0
 800f522:	4640      	mov	r0, r8
 800f524:	46ac      	mov	ip, r5
 800f526:	46f2      	mov	sl, lr
 800f528:	f850 2b04 	ldr.w	r2, [r0], #4
 800f52c:	b293      	uxth	r3, r2
 800f52e:	fb06 e303 	mla	r3, r6, r3, lr
 800f532:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f536:	b29b      	uxth	r3, r3
 800f538:	ebaa 0303 	sub.w	r3, sl, r3
 800f53c:	f8dc a000 	ldr.w	sl, [ip]
 800f540:	0c12      	lsrs	r2, r2, #16
 800f542:	fa13 f38a 	uxtah	r3, r3, sl
 800f546:	fb06 e202 	mla	r2, r6, r2, lr
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	9b00      	ldr	r3, [sp, #0]
 800f54e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f552:	b292      	uxth	r2, r2
 800f554:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f55c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f560:	4581      	cmp	r9, r0
 800f562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f566:	f84c 3b04 	str.w	r3, [ip], #4
 800f56a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f56e:	d2db      	bcs.n	800f528 <quorem+0x44>
 800f570:	f855 300b 	ldr.w	r3, [r5, fp]
 800f574:	b92b      	cbnz	r3, 800f582 <quorem+0x9e>
 800f576:	9b01      	ldr	r3, [sp, #4]
 800f578:	3b04      	subs	r3, #4
 800f57a:	429d      	cmp	r5, r3
 800f57c:	461a      	mov	r2, r3
 800f57e:	d32e      	bcc.n	800f5de <quorem+0xfa>
 800f580:	613c      	str	r4, [r7, #16]
 800f582:	4638      	mov	r0, r7
 800f584:	f001 fae6 	bl	8010b54 <__mcmp>
 800f588:	2800      	cmp	r0, #0
 800f58a:	db24      	blt.n	800f5d6 <quorem+0xf2>
 800f58c:	3601      	adds	r6, #1
 800f58e:	4628      	mov	r0, r5
 800f590:	f04f 0c00 	mov.w	ip, #0
 800f594:	f858 2b04 	ldr.w	r2, [r8], #4
 800f598:	f8d0 e000 	ldr.w	lr, [r0]
 800f59c:	b293      	uxth	r3, r2
 800f59e:	ebac 0303 	sub.w	r3, ip, r3
 800f5a2:	0c12      	lsrs	r2, r2, #16
 800f5a4:	fa13 f38e 	uxtah	r3, r3, lr
 800f5a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5b6:	45c1      	cmp	r9, r8
 800f5b8:	f840 3b04 	str.w	r3, [r0], #4
 800f5bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f5c0:	d2e8      	bcs.n	800f594 <quorem+0xb0>
 800f5c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5ca:	b922      	cbnz	r2, 800f5d6 <quorem+0xf2>
 800f5cc:	3b04      	subs	r3, #4
 800f5ce:	429d      	cmp	r5, r3
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	d30a      	bcc.n	800f5ea <quorem+0x106>
 800f5d4:	613c      	str	r4, [r7, #16]
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	b003      	add	sp, #12
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	6812      	ldr	r2, [r2, #0]
 800f5e0:	3b04      	subs	r3, #4
 800f5e2:	2a00      	cmp	r2, #0
 800f5e4:	d1cc      	bne.n	800f580 <quorem+0x9c>
 800f5e6:	3c01      	subs	r4, #1
 800f5e8:	e7c7      	b.n	800f57a <quorem+0x96>
 800f5ea:	6812      	ldr	r2, [r2, #0]
 800f5ec:	3b04      	subs	r3, #4
 800f5ee:	2a00      	cmp	r2, #0
 800f5f0:	d1f0      	bne.n	800f5d4 <quorem+0xf0>
 800f5f2:	3c01      	subs	r4, #1
 800f5f4:	e7eb      	b.n	800f5ce <quorem+0xea>
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	e7ee      	b.n	800f5d8 <quorem+0xf4>
 800f5fa:	0000      	movs	r0, r0
 800f5fc:	0000      	movs	r0, r0
	...

0800f600 <_dtoa_r>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	ed2d 8b04 	vpush	{d8-d9}
 800f608:	ec57 6b10 	vmov	r6, r7, d0
 800f60c:	b093      	sub	sp, #76	; 0x4c
 800f60e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f614:	9106      	str	r1, [sp, #24]
 800f616:	ee10 aa10 	vmov	sl, s0
 800f61a:	4604      	mov	r4, r0
 800f61c:	9209      	str	r2, [sp, #36]	; 0x24
 800f61e:	930c      	str	r3, [sp, #48]	; 0x30
 800f620:	46bb      	mov	fp, r7
 800f622:	b975      	cbnz	r5, 800f642 <_dtoa_r+0x42>
 800f624:	2010      	movs	r0, #16
 800f626:	f000 fffd 	bl	8010624 <malloc>
 800f62a:	4602      	mov	r2, r0
 800f62c:	6260      	str	r0, [r4, #36]	; 0x24
 800f62e:	b920      	cbnz	r0, 800f63a <_dtoa_r+0x3a>
 800f630:	4ba7      	ldr	r3, [pc, #668]	; (800f8d0 <_dtoa_r+0x2d0>)
 800f632:	21ea      	movs	r1, #234	; 0xea
 800f634:	48a7      	ldr	r0, [pc, #668]	; (800f8d4 <_dtoa_r+0x2d4>)
 800f636:	f001 fe45 	bl	80112c4 <__assert_func>
 800f63a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f63e:	6005      	str	r5, [r0, #0]
 800f640:	60c5      	str	r5, [r0, #12]
 800f642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f644:	6819      	ldr	r1, [r3, #0]
 800f646:	b151      	cbz	r1, 800f65e <_dtoa_r+0x5e>
 800f648:	685a      	ldr	r2, [r3, #4]
 800f64a:	604a      	str	r2, [r1, #4]
 800f64c:	2301      	movs	r3, #1
 800f64e:	4093      	lsls	r3, r2
 800f650:	608b      	str	r3, [r1, #8]
 800f652:	4620      	mov	r0, r4
 800f654:	f001 f83c 	bl	80106d0 <_Bfree>
 800f658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f65a:	2200      	movs	r2, #0
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	1e3b      	subs	r3, r7, #0
 800f660:	bfaa      	itet	ge
 800f662:	2300      	movge	r3, #0
 800f664:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f668:	f8c8 3000 	strge.w	r3, [r8]
 800f66c:	4b9a      	ldr	r3, [pc, #616]	; (800f8d8 <_dtoa_r+0x2d8>)
 800f66e:	bfbc      	itt	lt
 800f670:	2201      	movlt	r2, #1
 800f672:	f8c8 2000 	strlt.w	r2, [r8]
 800f676:	ea33 030b 	bics.w	r3, r3, fp
 800f67a:	d11b      	bne.n	800f6b4 <_dtoa_r+0xb4>
 800f67c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f67e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f682:	6013      	str	r3, [r2, #0]
 800f684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f688:	4333      	orrs	r3, r6
 800f68a:	f000 8592 	beq.w	80101b2 <_dtoa_r+0xbb2>
 800f68e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f690:	b963      	cbnz	r3, 800f6ac <_dtoa_r+0xac>
 800f692:	4b92      	ldr	r3, [pc, #584]	; (800f8dc <_dtoa_r+0x2dc>)
 800f694:	e022      	b.n	800f6dc <_dtoa_r+0xdc>
 800f696:	4b92      	ldr	r3, [pc, #584]	; (800f8e0 <_dtoa_r+0x2e0>)
 800f698:	9301      	str	r3, [sp, #4]
 800f69a:	3308      	adds	r3, #8
 800f69c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f69e:	6013      	str	r3, [r2, #0]
 800f6a0:	9801      	ldr	r0, [sp, #4]
 800f6a2:	b013      	add	sp, #76	; 0x4c
 800f6a4:	ecbd 8b04 	vpop	{d8-d9}
 800f6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ac:	4b8b      	ldr	r3, [pc, #556]	; (800f8dc <_dtoa_r+0x2dc>)
 800f6ae:	9301      	str	r3, [sp, #4]
 800f6b0:	3303      	adds	r3, #3
 800f6b2:	e7f3      	b.n	800f69c <_dtoa_r+0x9c>
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	4659      	mov	r1, fp
 800f6bc:	f7f1 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6c0:	ec4b ab19 	vmov	d9, sl, fp
 800f6c4:	4680      	mov	r8, r0
 800f6c6:	b158      	cbz	r0, 800f6e0 <_dtoa_r+0xe0>
 800f6c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 856b 	beq.w	80101ac <_dtoa_r+0xbac>
 800f6d6:	4883      	ldr	r0, [pc, #524]	; (800f8e4 <_dtoa_r+0x2e4>)
 800f6d8:	6018      	str	r0, [r3, #0]
 800f6da:	1e43      	subs	r3, r0, #1
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	e7df      	b.n	800f6a0 <_dtoa_r+0xa0>
 800f6e0:	ec4b ab10 	vmov	d0, sl, fp
 800f6e4:	aa10      	add	r2, sp, #64	; 0x40
 800f6e6:	a911      	add	r1, sp, #68	; 0x44
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f001 fad9 	bl	8010ca0 <__d2b>
 800f6ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f6f2:	ee08 0a10 	vmov	s16, r0
 800f6f6:	2d00      	cmp	r5, #0
 800f6f8:	f000 8084 	beq.w	800f804 <_dtoa_r+0x204>
 800f6fc:	ee19 3a90 	vmov	r3, s19
 800f700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f704:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f708:	4656      	mov	r6, sl
 800f70a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f70e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f712:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f716:	4b74      	ldr	r3, [pc, #464]	; (800f8e8 <_dtoa_r+0x2e8>)
 800f718:	2200      	movs	r2, #0
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f0 fdbb 	bl	8000298 <__aeabi_dsub>
 800f722:	a365      	add	r3, pc, #404	; (adr r3, 800f8b8 <_dtoa_r+0x2b8>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	f7f0 ff6e 	bl	8000608 <__aeabi_dmul>
 800f72c:	a364      	add	r3, pc, #400	; (adr r3, 800f8c0 <_dtoa_r+0x2c0>)
 800f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f732:	f7f0 fdb3 	bl	800029c <__adddf3>
 800f736:	4606      	mov	r6, r0
 800f738:	4628      	mov	r0, r5
 800f73a:	460f      	mov	r7, r1
 800f73c:	f7f0 fefa 	bl	8000534 <__aeabi_i2d>
 800f740:	a361      	add	r3, pc, #388	; (adr r3, 800f8c8 <_dtoa_r+0x2c8>)
 800f742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f746:	f7f0 ff5f 	bl	8000608 <__aeabi_dmul>
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	4630      	mov	r0, r6
 800f750:	4639      	mov	r1, r7
 800f752:	f7f0 fda3 	bl	800029c <__adddf3>
 800f756:	4606      	mov	r6, r0
 800f758:	460f      	mov	r7, r1
 800f75a:	f7f1 fa05 	bl	8000b68 <__aeabi_d2iz>
 800f75e:	2200      	movs	r2, #0
 800f760:	9000      	str	r0, [sp, #0]
 800f762:	2300      	movs	r3, #0
 800f764:	4630      	mov	r0, r6
 800f766:	4639      	mov	r1, r7
 800f768:	f7f1 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800f76c:	b150      	cbz	r0, 800f784 <_dtoa_r+0x184>
 800f76e:	9800      	ldr	r0, [sp, #0]
 800f770:	f7f0 fee0 	bl	8000534 <__aeabi_i2d>
 800f774:	4632      	mov	r2, r6
 800f776:	463b      	mov	r3, r7
 800f778:	f7f1 f9ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800f77c:	b910      	cbnz	r0, 800f784 <_dtoa_r+0x184>
 800f77e:	9b00      	ldr	r3, [sp, #0]
 800f780:	3b01      	subs	r3, #1
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	9b00      	ldr	r3, [sp, #0]
 800f786:	2b16      	cmp	r3, #22
 800f788:	d85a      	bhi.n	800f840 <_dtoa_r+0x240>
 800f78a:	9a00      	ldr	r2, [sp, #0]
 800f78c:	4b57      	ldr	r3, [pc, #348]	; (800f8ec <_dtoa_r+0x2ec>)
 800f78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f796:	ec51 0b19 	vmov	r0, r1, d9
 800f79a:	f7f1 f9a7 	bl	8000aec <__aeabi_dcmplt>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d050      	beq.n	800f844 <_dtoa_r+0x244>
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7ae:	1b5d      	subs	r5, r3, r5
 800f7b0:	1e6b      	subs	r3, r5, #1
 800f7b2:	9305      	str	r3, [sp, #20]
 800f7b4:	bf45      	ittet	mi
 800f7b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f7ba:	9304      	strmi	r3, [sp, #16]
 800f7bc:	2300      	movpl	r3, #0
 800f7be:	2300      	movmi	r3, #0
 800f7c0:	bf4c      	ite	mi
 800f7c2:	9305      	strmi	r3, [sp, #20]
 800f7c4:	9304      	strpl	r3, [sp, #16]
 800f7c6:	9b00      	ldr	r3, [sp, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	db3d      	blt.n	800f848 <_dtoa_r+0x248>
 800f7cc:	9b05      	ldr	r3, [sp, #20]
 800f7ce:	9a00      	ldr	r2, [sp, #0]
 800f7d0:	920a      	str	r2, [sp, #40]	; 0x28
 800f7d2:	4413      	add	r3, r2
 800f7d4:	9305      	str	r3, [sp, #20]
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9307      	str	r3, [sp, #28]
 800f7da:	9b06      	ldr	r3, [sp, #24]
 800f7dc:	2b09      	cmp	r3, #9
 800f7de:	f200 8089 	bhi.w	800f8f4 <_dtoa_r+0x2f4>
 800f7e2:	2b05      	cmp	r3, #5
 800f7e4:	bfc4      	itt	gt
 800f7e6:	3b04      	subgt	r3, #4
 800f7e8:	9306      	strgt	r3, [sp, #24]
 800f7ea:	9b06      	ldr	r3, [sp, #24]
 800f7ec:	f1a3 0302 	sub.w	r3, r3, #2
 800f7f0:	bfcc      	ite	gt
 800f7f2:	2500      	movgt	r5, #0
 800f7f4:	2501      	movle	r5, #1
 800f7f6:	2b03      	cmp	r3, #3
 800f7f8:	f200 8087 	bhi.w	800f90a <_dtoa_r+0x30a>
 800f7fc:	e8df f003 	tbb	[pc, r3]
 800f800:	59383a2d 	.word	0x59383a2d
 800f804:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f808:	441d      	add	r5, r3
 800f80a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f80e:	2b20      	cmp	r3, #32
 800f810:	bfc1      	itttt	gt
 800f812:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f816:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f81a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f81e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f822:	bfda      	itte	le
 800f824:	f1c3 0320 	rsble	r3, r3, #32
 800f828:	fa06 f003 	lslle.w	r0, r6, r3
 800f82c:	4318      	orrgt	r0, r3
 800f82e:	f7f0 fe71 	bl	8000514 <__aeabi_ui2d>
 800f832:	2301      	movs	r3, #1
 800f834:	4606      	mov	r6, r0
 800f836:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f83a:	3d01      	subs	r5, #1
 800f83c:	930e      	str	r3, [sp, #56]	; 0x38
 800f83e:	e76a      	b.n	800f716 <_dtoa_r+0x116>
 800f840:	2301      	movs	r3, #1
 800f842:	e7b2      	b.n	800f7aa <_dtoa_r+0x1aa>
 800f844:	900b      	str	r0, [sp, #44]	; 0x2c
 800f846:	e7b1      	b.n	800f7ac <_dtoa_r+0x1ac>
 800f848:	9b04      	ldr	r3, [sp, #16]
 800f84a:	9a00      	ldr	r2, [sp, #0]
 800f84c:	1a9b      	subs	r3, r3, r2
 800f84e:	9304      	str	r3, [sp, #16]
 800f850:	4253      	negs	r3, r2
 800f852:	9307      	str	r3, [sp, #28]
 800f854:	2300      	movs	r3, #0
 800f856:	930a      	str	r3, [sp, #40]	; 0x28
 800f858:	e7bf      	b.n	800f7da <_dtoa_r+0x1da>
 800f85a:	2300      	movs	r3, #0
 800f85c:	9308      	str	r3, [sp, #32]
 800f85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f860:	2b00      	cmp	r3, #0
 800f862:	dc55      	bgt.n	800f910 <_dtoa_r+0x310>
 800f864:	2301      	movs	r3, #1
 800f866:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f86a:	461a      	mov	r2, r3
 800f86c:	9209      	str	r2, [sp, #36]	; 0x24
 800f86e:	e00c      	b.n	800f88a <_dtoa_r+0x28a>
 800f870:	2301      	movs	r3, #1
 800f872:	e7f3      	b.n	800f85c <_dtoa_r+0x25c>
 800f874:	2300      	movs	r3, #0
 800f876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f878:	9308      	str	r3, [sp, #32]
 800f87a:	9b00      	ldr	r3, [sp, #0]
 800f87c:	4413      	add	r3, r2
 800f87e:	9302      	str	r3, [sp, #8]
 800f880:	3301      	adds	r3, #1
 800f882:	2b01      	cmp	r3, #1
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	bfb8      	it	lt
 800f888:	2301      	movlt	r3, #1
 800f88a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f88c:	2200      	movs	r2, #0
 800f88e:	6042      	str	r2, [r0, #4]
 800f890:	2204      	movs	r2, #4
 800f892:	f102 0614 	add.w	r6, r2, #20
 800f896:	429e      	cmp	r6, r3
 800f898:	6841      	ldr	r1, [r0, #4]
 800f89a:	d93d      	bls.n	800f918 <_dtoa_r+0x318>
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fed7 	bl	8010650 <_Balloc>
 800f8a2:	9001      	str	r0, [sp, #4]
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d13b      	bne.n	800f920 <_dtoa_r+0x320>
 800f8a8:	4b11      	ldr	r3, [pc, #68]	; (800f8f0 <_dtoa_r+0x2f0>)
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f8b0:	e6c0      	b.n	800f634 <_dtoa_r+0x34>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e7df      	b.n	800f876 <_dtoa_r+0x276>
 800f8b6:	bf00      	nop
 800f8b8:	636f4361 	.word	0x636f4361
 800f8bc:	3fd287a7 	.word	0x3fd287a7
 800f8c0:	8b60c8b3 	.word	0x8b60c8b3
 800f8c4:	3fc68a28 	.word	0x3fc68a28
 800f8c8:	509f79fb 	.word	0x509f79fb
 800f8cc:	3fd34413 	.word	0x3fd34413
 800f8d0:	08011625 	.word	0x08011625
 800f8d4:	0801163c 	.word	0x0801163c
 800f8d8:	7ff00000 	.word	0x7ff00000
 800f8dc:	08011621 	.word	0x08011621
 800f8e0:	08011618 	.word	0x08011618
 800f8e4:	080115f5 	.word	0x080115f5
 800f8e8:	3ff80000 	.word	0x3ff80000
 800f8ec:	08011790 	.word	0x08011790
 800f8f0:	08011697 	.word	0x08011697
 800f8f4:	2501      	movs	r5, #1
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	9306      	str	r3, [sp, #24]
 800f8fa:	9508      	str	r5, [sp, #32]
 800f8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f900:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f904:	2200      	movs	r2, #0
 800f906:	2312      	movs	r3, #18
 800f908:	e7b0      	b.n	800f86c <_dtoa_r+0x26c>
 800f90a:	2301      	movs	r3, #1
 800f90c:	9308      	str	r3, [sp, #32]
 800f90e:	e7f5      	b.n	800f8fc <_dtoa_r+0x2fc>
 800f910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f912:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f916:	e7b8      	b.n	800f88a <_dtoa_r+0x28a>
 800f918:	3101      	adds	r1, #1
 800f91a:	6041      	str	r1, [r0, #4]
 800f91c:	0052      	lsls	r2, r2, #1
 800f91e:	e7b8      	b.n	800f892 <_dtoa_r+0x292>
 800f920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f922:	9a01      	ldr	r2, [sp, #4]
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	2b0e      	cmp	r3, #14
 800f92a:	f200 809d 	bhi.w	800fa68 <_dtoa_r+0x468>
 800f92e:	2d00      	cmp	r5, #0
 800f930:	f000 809a 	beq.w	800fa68 <_dtoa_r+0x468>
 800f934:	9b00      	ldr	r3, [sp, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	dd32      	ble.n	800f9a0 <_dtoa_r+0x3a0>
 800f93a:	4ab7      	ldr	r2, [pc, #732]	; (800fc18 <_dtoa_r+0x618>)
 800f93c:	f003 030f 	and.w	r3, r3, #15
 800f940:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f944:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f948:	9b00      	ldr	r3, [sp, #0]
 800f94a:	05d8      	lsls	r0, r3, #23
 800f94c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f950:	d516      	bpl.n	800f980 <_dtoa_r+0x380>
 800f952:	4bb2      	ldr	r3, [pc, #712]	; (800fc1c <_dtoa_r+0x61c>)
 800f954:	ec51 0b19 	vmov	r0, r1, d9
 800f958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f95c:	f7f0 ff7e 	bl	800085c <__aeabi_ddiv>
 800f960:	f007 070f 	and.w	r7, r7, #15
 800f964:	4682      	mov	sl, r0
 800f966:	468b      	mov	fp, r1
 800f968:	2503      	movs	r5, #3
 800f96a:	4eac      	ldr	r6, [pc, #688]	; (800fc1c <_dtoa_r+0x61c>)
 800f96c:	b957      	cbnz	r7, 800f984 <_dtoa_r+0x384>
 800f96e:	4642      	mov	r2, r8
 800f970:	464b      	mov	r3, r9
 800f972:	4650      	mov	r0, sl
 800f974:	4659      	mov	r1, fp
 800f976:	f7f0 ff71 	bl	800085c <__aeabi_ddiv>
 800f97a:	4682      	mov	sl, r0
 800f97c:	468b      	mov	fp, r1
 800f97e:	e028      	b.n	800f9d2 <_dtoa_r+0x3d2>
 800f980:	2502      	movs	r5, #2
 800f982:	e7f2      	b.n	800f96a <_dtoa_r+0x36a>
 800f984:	07f9      	lsls	r1, r7, #31
 800f986:	d508      	bpl.n	800f99a <_dtoa_r+0x39a>
 800f988:	4640      	mov	r0, r8
 800f98a:	4649      	mov	r1, r9
 800f98c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f990:	f7f0 fe3a 	bl	8000608 <__aeabi_dmul>
 800f994:	3501      	adds	r5, #1
 800f996:	4680      	mov	r8, r0
 800f998:	4689      	mov	r9, r1
 800f99a:	107f      	asrs	r7, r7, #1
 800f99c:	3608      	adds	r6, #8
 800f99e:	e7e5      	b.n	800f96c <_dtoa_r+0x36c>
 800f9a0:	f000 809b 	beq.w	800fada <_dtoa_r+0x4da>
 800f9a4:	9b00      	ldr	r3, [sp, #0]
 800f9a6:	4f9d      	ldr	r7, [pc, #628]	; (800fc1c <_dtoa_r+0x61c>)
 800f9a8:	425e      	negs	r6, r3
 800f9aa:	4b9b      	ldr	r3, [pc, #620]	; (800fc18 <_dtoa_r+0x618>)
 800f9ac:	f006 020f 	and.w	r2, r6, #15
 800f9b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b8:	ec51 0b19 	vmov	r0, r1, d9
 800f9bc:	f7f0 fe24 	bl	8000608 <__aeabi_dmul>
 800f9c0:	1136      	asrs	r6, r6, #4
 800f9c2:	4682      	mov	sl, r0
 800f9c4:	468b      	mov	fp, r1
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	2502      	movs	r5, #2
 800f9ca:	2e00      	cmp	r6, #0
 800f9cc:	d17a      	bne.n	800fac4 <_dtoa_r+0x4c4>
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1d3      	bne.n	800f97a <_dtoa_r+0x37a>
 800f9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 8082 	beq.w	800fade <_dtoa_r+0x4de>
 800f9da:	4b91      	ldr	r3, [pc, #580]	; (800fc20 <_dtoa_r+0x620>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	4650      	mov	r0, sl
 800f9e0:	4659      	mov	r1, fp
 800f9e2:	f7f1 f883 	bl	8000aec <__aeabi_dcmplt>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d079      	beq.n	800fade <_dtoa_r+0x4de>
 800f9ea:	9b03      	ldr	r3, [sp, #12]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d076      	beq.n	800fade <_dtoa_r+0x4de>
 800f9f0:	9b02      	ldr	r3, [sp, #8]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	dd36      	ble.n	800fa64 <_dtoa_r+0x464>
 800f9f6:	9b00      	ldr	r3, [sp, #0]
 800f9f8:	4650      	mov	r0, sl
 800f9fa:	4659      	mov	r1, fp
 800f9fc:	1e5f      	subs	r7, r3, #1
 800f9fe:	2200      	movs	r2, #0
 800fa00:	4b88      	ldr	r3, [pc, #544]	; (800fc24 <_dtoa_r+0x624>)
 800fa02:	f7f0 fe01 	bl	8000608 <__aeabi_dmul>
 800fa06:	9e02      	ldr	r6, [sp, #8]
 800fa08:	4682      	mov	sl, r0
 800fa0a:	468b      	mov	fp, r1
 800fa0c:	3501      	adds	r5, #1
 800fa0e:	4628      	mov	r0, r5
 800fa10:	f7f0 fd90 	bl	8000534 <__aeabi_i2d>
 800fa14:	4652      	mov	r2, sl
 800fa16:	465b      	mov	r3, fp
 800fa18:	f7f0 fdf6 	bl	8000608 <__aeabi_dmul>
 800fa1c:	4b82      	ldr	r3, [pc, #520]	; (800fc28 <_dtoa_r+0x628>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f7f0 fc3c 	bl	800029c <__adddf3>
 800fa24:	46d0      	mov	r8, sl
 800fa26:	46d9      	mov	r9, fp
 800fa28:	4682      	mov	sl, r0
 800fa2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fa2e:	2e00      	cmp	r6, #0
 800fa30:	d158      	bne.n	800fae4 <_dtoa_r+0x4e4>
 800fa32:	4b7e      	ldr	r3, [pc, #504]	; (800fc2c <_dtoa_r+0x62c>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	4640      	mov	r0, r8
 800fa38:	4649      	mov	r1, r9
 800fa3a:	f7f0 fc2d 	bl	8000298 <__aeabi_dsub>
 800fa3e:	4652      	mov	r2, sl
 800fa40:	465b      	mov	r3, fp
 800fa42:	4680      	mov	r8, r0
 800fa44:	4689      	mov	r9, r1
 800fa46:	f7f1 f86f 	bl	8000b28 <__aeabi_dcmpgt>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	f040 8295 	bne.w	800ff7a <_dtoa_r+0x97a>
 800fa50:	4652      	mov	r2, sl
 800fa52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa56:	4640      	mov	r0, r8
 800fa58:	4649      	mov	r1, r9
 800fa5a:	f7f1 f847 	bl	8000aec <__aeabi_dcmplt>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f040 8289 	bne.w	800ff76 <_dtoa_r+0x976>
 800fa64:	ec5b ab19 	vmov	sl, fp, d9
 800fa68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f2c0 8148 	blt.w	800fd00 <_dtoa_r+0x700>
 800fa70:	9a00      	ldr	r2, [sp, #0]
 800fa72:	2a0e      	cmp	r2, #14
 800fa74:	f300 8144 	bgt.w	800fd00 <_dtoa_r+0x700>
 800fa78:	4b67      	ldr	r3, [pc, #412]	; (800fc18 <_dtoa_r+0x618>)
 800fa7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f280 80d5 	bge.w	800fc34 <_dtoa_r+0x634>
 800fa8a:	9b03      	ldr	r3, [sp, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f300 80d1 	bgt.w	800fc34 <_dtoa_r+0x634>
 800fa92:	f040 826f 	bne.w	800ff74 <_dtoa_r+0x974>
 800fa96:	4b65      	ldr	r3, [pc, #404]	; (800fc2c <_dtoa_r+0x62c>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	4640      	mov	r0, r8
 800fa9c:	4649      	mov	r1, r9
 800fa9e:	f7f0 fdb3 	bl	8000608 <__aeabi_dmul>
 800faa2:	4652      	mov	r2, sl
 800faa4:	465b      	mov	r3, fp
 800faa6:	f7f1 f835 	bl	8000b14 <__aeabi_dcmpge>
 800faaa:	9e03      	ldr	r6, [sp, #12]
 800faac:	4637      	mov	r7, r6
 800faae:	2800      	cmp	r0, #0
 800fab0:	f040 8245 	bne.w	800ff3e <_dtoa_r+0x93e>
 800fab4:	9d01      	ldr	r5, [sp, #4]
 800fab6:	2331      	movs	r3, #49	; 0x31
 800fab8:	f805 3b01 	strb.w	r3, [r5], #1
 800fabc:	9b00      	ldr	r3, [sp, #0]
 800fabe:	3301      	adds	r3, #1
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	e240      	b.n	800ff46 <_dtoa_r+0x946>
 800fac4:	07f2      	lsls	r2, r6, #31
 800fac6:	d505      	bpl.n	800fad4 <_dtoa_r+0x4d4>
 800fac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800facc:	f7f0 fd9c 	bl	8000608 <__aeabi_dmul>
 800fad0:	3501      	adds	r5, #1
 800fad2:	2301      	movs	r3, #1
 800fad4:	1076      	asrs	r6, r6, #1
 800fad6:	3708      	adds	r7, #8
 800fad8:	e777      	b.n	800f9ca <_dtoa_r+0x3ca>
 800fada:	2502      	movs	r5, #2
 800fadc:	e779      	b.n	800f9d2 <_dtoa_r+0x3d2>
 800fade:	9f00      	ldr	r7, [sp, #0]
 800fae0:	9e03      	ldr	r6, [sp, #12]
 800fae2:	e794      	b.n	800fa0e <_dtoa_r+0x40e>
 800fae4:	9901      	ldr	r1, [sp, #4]
 800fae6:	4b4c      	ldr	r3, [pc, #304]	; (800fc18 <_dtoa_r+0x618>)
 800fae8:	4431      	add	r1, r6
 800faea:	910d      	str	r1, [sp, #52]	; 0x34
 800faec:	9908      	ldr	r1, [sp, #32]
 800faee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800faf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800faf6:	2900      	cmp	r1, #0
 800faf8:	d043      	beq.n	800fb82 <_dtoa_r+0x582>
 800fafa:	494d      	ldr	r1, [pc, #308]	; (800fc30 <_dtoa_r+0x630>)
 800fafc:	2000      	movs	r0, #0
 800fafe:	f7f0 fead 	bl	800085c <__aeabi_ddiv>
 800fb02:	4652      	mov	r2, sl
 800fb04:	465b      	mov	r3, fp
 800fb06:	f7f0 fbc7 	bl	8000298 <__aeabi_dsub>
 800fb0a:	9d01      	ldr	r5, [sp, #4]
 800fb0c:	4682      	mov	sl, r0
 800fb0e:	468b      	mov	fp, r1
 800fb10:	4649      	mov	r1, r9
 800fb12:	4640      	mov	r0, r8
 800fb14:	f7f1 f828 	bl	8000b68 <__aeabi_d2iz>
 800fb18:	4606      	mov	r6, r0
 800fb1a:	f7f0 fd0b 	bl	8000534 <__aeabi_i2d>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4640      	mov	r0, r8
 800fb24:	4649      	mov	r1, r9
 800fb26:	f7f0 fbb7 	bl	8000298 <__aeabi_dsub>
 800fb2a:	3630      	adds	r6, #48	; 0x30
 800fb2c:	f805 6b01 	strb.w	r6, [r5], #1
 800fb30:	4652      	mov	r2, sl
 800fb32:	465b      	mov	r3, fp
 800fb34:	4680      	mov	r8, r0
 800fb36:	4689      	mov	r9, r1
 800fb38:	f7f0 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d163      	bne.n	800fc08 <_dtoa_r+0x608>
 800fb40:	4642      	mov	r2, r8
 800fb42:	464b      	mov	r3, r9
 800fb44:	4936      	ldr	r1, [pc, #216]	; (800fc20 <_dtoa_r+0x620>)
 800fb46:	2000      	movs	r0, #0
 800fb48:	f7f0 fba6 	bl	8000298 <__aeabi_dsub>
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	465b      	mov	r3, fp
 800fb50:	f7f0 ffcc 	bl	8000aec <__aeabi_dcmplt>
 800fb54:	2800      	cmp	r0, #0
 800fb56:	f040 80b5 	bne.w	800fcc4 <_dtoa_r+0x6c4>
 800fb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb5c:	429d      	cmp	r5, r3
 800fb5e:	d081      	beq.n	800fa64 <_dtoa_r+0x464>
 800fb60:	4b30      	ldr	r3, [pc, #192]	; (800fc24 <_dtoa_r+0x624>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	4650      	mov	r0, sl
 800fb66:	4659      	mov	r1, fp
 800fb68:	f7f0 fd4e 	bl	8000608 <__aeabi_dmul>
 800fb6c:	4b2d      	ldr	r3, [pc, #180]	; (800fc24 <_dtoa_r+0x624>)
 800fb6e:	4682      	mov	sl, r0
 800fb70:	468b      	mov	fp, r1
 800fb72:	4640      	mov	r0, r8
 800fb74:	4649      	mov	r1, r9
 800fb76:	2200      	movs	r2, #0
 800fb78:	f7f0 fd46 	bl	8000608 <__aeabi_dmul>
 800fb7c:	4680      	mov	r8, r0
 800fb7e:	4689      	mov	r9, r1
 800fb80:	e7c6      	b.n	800fb10 <_dtoa_r+0x510>
 800fb82:	4650      	mov	r0, sl
 800fb84:	4659      	mov	r1, fp
 800fb86:	f7f0 fd3f 	bl	8000608 <__aeabi_dmul>
 800fb8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb8c:	9d01      	ldr	r5, [sp, #4]
 800fb8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb90:	4682      	mov	sl, r0
 800fb92:	468b      	mov	fp, r1
 800fb94:	4649      	mov	r1, r9
 800fb96:	4640      	mov	r0, r8
 800fb98:	f7f0 ffe6 	bl	8000b68 <__aeabi_d2iz>
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	f7f0 fcc9 	bl	8000534 <__aeabi_i2d>
 800fba2:	3630      	adds	r6, #48	; 0x30
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4640      	mov	r0, r8
 800fbaa:	4649      	mov	r1, r9
 800fbac:	f7f0 fb74 	bl	8000298 <__aeabi_dsub>
 800fbb0:	f805 6b01 	strb.w	r6, [r5], #1
 800fbb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbb6:	429d      	cmp	r5, r3
 800fbb8:	4680      	mov	r8, r0
 800fbba:	4689      	mov	r9, r1
 800fbbc:	f04f 0200 	mov.w	r2, #0
 800fbc0:	d124      	bne.n	800fc0c <_dtoa_r+0x60c>
 800fbc2:	4b1b      	ldr	r3, [pc, #108]	; (800fc30 <_dtoa_r+0x630>)
 800fbc4:	4650      	mov	r0, sl
 800fbc6:	4659      	mov	r1, fp
 800fbc8:	f7f0 fb68 	bl	800029c <__adddf3>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	460b      	mov	r3, r1
 800fbd0:	4640      	mov	r0, r8
 800fbd2:	4649      	mov	r1, r9
 800fbd4:	f7f0 ffa8 	bl	8000b28 <__aeabi_dcmpgt>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d173      	bne.n	800fcc4 <_dtoa_r+0x6c4>
 800fbdc:	4652      	mov	r2, sl
 800fbde:	465b      	mov	r3, fp
 800fbe0:	4913      	ldr	r1, [pc, #76]	; (800fc30 <_dtoa_r+0x630>)
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	f7f0 fb58 	bl	8000298 <__aeabi_dsub>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	460b      	mov	r3, r1
 800fbec:	4640      	mov	r0, r8
 800fbee:	4649      	mov	r1, r9
 800fbf0:	f7f0 ff7c 	bl	8000aec <__aeabi_dcmplt>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f43f af35 	beq.w	800fa64 <_dtoa_r+0x464>
 800fbfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fbfc:	1e6b      	subs	r3, r5, #1
 800fbfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc04:	2b30      	cmp	r3, #48	; 0x30
 800fc06:	d0f8      	beq.n	800fbfa <_dtoa_r+0x5fa>
 800fc08:	9700      	str	r7, [sp, #0]
 800fc0a:	e049      	b.n	800fca0 <_dtoa_r+0x6a0>
 800fc0c:	4b05      	ldr	r3, [pc, #20]	; (800fc24 <_dtoa_r+0x624>)
 800fc0e:	f7f0 fcfb 	bl	8000608 <__aeabi_dmul>
 800fc12:	4680      	mov	r8, r0
 800fc14:	4689      	mov	r9, r1
 800fc16:	e7bd      	b.n	800fb94 <_dtoa_r+0x594>
 800fc18:	08011790 	.word	0x08011790
 800fc1c:	08011768 	.word	0x08011768
 800fc20:	3ff00000 	.word	0x3ff00000
 800fc24:	40240000 	.word	0x40240000
 800fc28:	401c0000 	.word	0x401c0000
 800fc2c:	40140000 	.word	0x40140000
 800fc30:	3fe00000 	.word	0x3fe00000
 800fc34:	9d01      	ldr	r5, [sp, #4]
 800fc36:	4656      	mov	r6, sl
 800fc38:	465f      	mov	r7, fp
 800fc3a:	4642      	mov	r2, r8
 800fc3c:	464b      	mov	r3, r9
 800fc3e:	4630      	mov	r0, r6
 800fc40:	4639      	mov	r1, r7
 800fc42:	f7f0 fe0b 	bl	800085c <__aeabi_ddiv>
 800fc46:	f7f0 ff8f 	bl	8000b68 <__aeabi_d2iz>
 800fc4a:	4682      	mov	sl, r0
 800fc4c:	f7f0 fc72 	bl	8000534 <__aeabi_i2d>
 800fc50:	4642      	mov	r2, r8
 800fc52:	464b      	mov	r3, r9
 800fc54:	f7f0 fcd8 	bl	8000608 <__aeabi_dmul>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fc64:	f7f0 fb18 	bl	8000298 <__aeabi_dsub>
 800fc68:	f805 6b01 	strb.w	r6, [r5], #1
 800fc6c:	9e01      	ldr	r6, [sp, #4]
 800fc6e:	9f03      	ldr	r7, [sp, #12]
 800fc70:	1bae      	subs	r6, r5, r6
 800fc72:	42b7      	cmp	r7, r6
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	d135      	bne.n	800fce6 <_dtoa_r+0x6e6>
 800fc7a:	f7f0 fb0f 	bl	800029c <__adddf3>
 800fc7e:	4642      	mov	r2, r8
 800fc80:	464b      	mov	r3, r9
 800fc82:	4606      	mov	r6, r0
 800fc84:	460f      	mov	r7, r1
 800fc86:	f7f0 ff4f 	bl	8000b28 <__aeabi_dcmpgt>
 800fc8a:	b9d0      	cbnz	r0, 800fcc2 <_dtoa_r+0x6c2>
 800fc8c:	4642      	mov	r2, r8
 800fc8e:	464b      	mov	r3, r9
 800fc90:	4630      	mov	r0, r6
 800fc92:	4639      	mov	r1, r7
 800fc94:	f7f0 ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc98:	b110      	cbz	r0, 800fca0 <_dtoa_r+0x6a0>
 800fc9a:	f01a 0f01 	tst.w	sl, #1
 800fc9e:	d110      	bne.n	800fcc2 <_dtoa_r+0x6c2>
 800fca0:	4620      	mov	r0, r4
 800fca2:	ee18 1a10 	vmov	r1, s16
 800fca6:	f000 fd13 	bl	80106d0 <_Bfree>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	9800      	ldr	r0, [sp, #0]
 800fcae:	702b      	strb	r3, [r5, #0]
 800fcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcb2:	3001      	adds	r0, #1
 800fcb4:	6018      	str	r0, [r3, #0]
 800fcb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f43f acf1 	beq.w	800f6a0 <_dtoa_r+0xa0>
 800fcbe:	601d      	str	r5, [r3, #0]
 800fcc0:	e4ee      	b.n	800f6a0 <_dtoa_r+0xa0>
 800fcc2:	9f00      	ldr	r7, [sp, #0]
 800fcc4:	462b      	mov	r3, r5
 800fcc6:	461d      	mov	r5, r3
 800fcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fccc:	2a39      	cmp	r2, #57	; 0x39
 800fcce:	d106      	bne.n	800fcde <_dtoa_r+0x6de>
 800fcd0:	9a01      	ldr	r2, [sp, #4]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d1f7      	bne.n	800fcc6 <_dtoa_r+0x6c6>
 800fcd6:	9901      	ldr	r1, [sp, #4]
 800fcd8:	2230      	movs	r2, #48	; 0x30
 800fcda:	3701      	adds	r7, #1
 800fcdc:	700a      	strb	r2, [r1, #0]
 800fcde:	781a      	ldrb	r2, [r3, #0]
 800fce0:	3201      	adds	r2, #1
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e790      	b.n	800fc08 <_dtoa_r+0x608>
 800fce6:	4ba6      	ldr	r3, [pc, #664]	; (800ff80 <_dtoa_r+0x980>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	f7f0 fc8d 	bl	8000608 <__aeabi_dmul>
 800fcee:	2200      	movs	r2, #0
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	460f      	mov	r7, r1
 800fcf6:	f7f0 feef 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d09d      	beq.n	800fc3a <_dtoa_r+0x63a>
 800fcfe:	e7cf      	b.n	800fca0 <_dtoa_r+0x6a0>
 800fd00:	9a08      	ldr	r2, [sp, #32]
 800fd02:	2a00      	cmp	r2, #0
 800fd04:	f000 80d7 	beq.w	800feb6 <_dtoa_r+0x8b6>
 800fd08:	9a06      	ldr	r2, [sp, #24]
 800fd0a:	2a01      	cmp	r2, #1
 800fd0c:	f300 80ba 	bgt.w	800fe84 <_dtoa_r+0x884>
 800fd10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd12:	2a00      	cmp	r2, #0
 800fd14:	f000 80b2 	beq.w	800fe7c <_dtoa_r+0x87c>
 800fd18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd1c:	9e07      	ldr	r6, [sp, #28]
 800fd1e:	9d04      	ldr	r5, [sp, #16]
 800fd20:	9a04      	ldr	r2, [sp, #16]
 800fd22:	441a      	add	r2, r3
 800fd24:	9204      	str	r2, [sp, #16]
 800fd26:	9a05      	ldr	r2, [sp, #20]
 800fd28:	2101      	movs	r1, #1
 800fd2a:	441a      	add	r2, r3
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	9205      	str	r2, [sp, #20]
 800fd30:	f000 fd86 	bl	8010840 <__i2b>
 800fd34:	4607      	mov	r7, r0
 800fd36:	2d00      	cmp	r5, #0
 800fd38:	dd0c      	ble.n	800fd54 <_dtoa_r+0x754>
 800fd3a:	9b05      	ldr	r3, [sp, #20]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	dd09      	ble.n	800fd54 <_dtoa_r+0x754>
 800fd40:	42ab      	cmp	r3, r5
 800fd42:	9a04      	ldr	r2, [sp, #16]
 800fd44:	bfa8      	it	ge
 800fd46:	462b      	movge	r3, r5
 800fd48:	1ad2      	subs	r2, r2, r3
 800fd4a:	9204      	str	r2, [sp, #16]
 800fd4c:	9a05      	ldr	r2, [sp, #20]
 800fd4e:	1aed      	subs	r5, r5, r3
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	9305      	str	r3, [sp, #20]
 800fd54:	9b07      	ldr	r3, [sp, #28]
 800fd56:	b31b      	cbz	r3, 800fda0 <_dtoa_r+0x7a0>
 800fd58:	9b08      	ldr	r3, [sp, #32]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f000 80af 	beq.w	800febe <_dtoa_r+0x8be>
 800fd60:	2e00      	cmp	r6, #0
 800fd62:	dd13      	ble.n	800fd8c <_dtoa_r+0x78c>
 800fd64:	4639      	mov	r1, r7
 800fd66:	4632      	mov	r2, r6
 800fd68:	4620      	mov	r0, r4
 800fd6a:	f000 fe29 	bl	80109c0 <__pow5mult>
 800fd6e:	ee18 2a10 	vmov	r2, s16
 800fd72:	4601      	mov	r1, r0
 800fd74:	4607      	mov	r7, r0
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 fd78 	bl	801086c <__multiply>
 800fd7c:	ee18 1a10 	vmov	r1, s16
 800fd80:	4680      	mov	r8, r0
 800fd82:	4620      	mov	r0, r4
 800fd84:	f000 fca4 	bl	80106d0 <_Bfree>
 800fd88:	ee08 8a10 	vmov	s16, r8
 800fd8c:	9b07      	ldr	r3, [sp, #28]
 800fd8e:	1b9a      	subs	r2, r3, r6
 800fd90:	d006      	beq.n	800fda0 <_dtoa_r+0x7a0>
 800fd92:	ee18 1a10 	vmov	r1, s16
 800fd96:	4620      	mov	r0, r4
 800fd98:	f000 fe12 	bl	80109c0 <__pow5mult>
 800fd9c:	ee08 0a10 	vmov	s16, r0
 800fda0:	2101      	movs	r1, #1
 800fda2:	4620      	mov	r0, r4
 800fda4:	f000 fd4c 	bl	8010840 <__i2b>
 800fda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	4606      	mov	r6, r0
 800fdae:	f340 8088 	ble.w	800fec2 <_dtoa_r+0x8c2>
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4601      	mov	r1, r0
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f000 fe02 	bl	80109c0 <__pow5mult>
 800fdbc:	9b06      	ldr	r3, [sp, #24]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	f340 8081 	ble.w	800fec8 <_dtoa_r+0x8c8>
 800fdc6:	f04f 0800 	mov.w	r8, #0
 800fdca:	6933      	ldr	r3, [r6, #16]
 800fdcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fdd0:	6918      	ldr	r0, [r3, #16]
 800fdd2:	f000 fce5 	bl	80107a0 <__hi0bits>
 800fdd6:	f1c0 0020 	rsb	r0, r0, #32
 800fdda:	9b05      	ldr	r3, [sp, #20]
 800fddc:	4418      	add	r0, r3
 800fdde:	f010 001f 	ands.w	r0, r0, #31
 800fde2:	f000 8092 	beq.w	800ff0a <_dtoa_r+0x90a>
 800fde6:	f1c0 0320 	rsb	r3, r0, #32
 800fdea:	2b04      	cmp	r3, #4
 800fdec:	f340 808a 	ble.w	800ff04 <_dtoa_r+0x904>
 800fdf0:	f1c0 001c 	rsb	r0, r0, #28
 800fdf4:	9b04      	ldr	r3, [sp, #16]
 800fdf6:	4403      	add	r3, r0
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	9b05      	ldr	r3, [sp, #20]
 800fdfc:	4403      	add	r3, r0
 800fdfe:	4405      	add	r5, r0
 800fe00:	9305      	str	r3, [sp, #20]
 800fe02:	9b04      	ldr	r3, [sp, #16]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	dd07      	ble.n	800fe18 <_dtoa_r+0x818>
 800fe08:	ee18 1a10 	vmov	r1, s16
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f000 fe30 	bl	8010a74 <__lshift>
 800fe14:	ee08 0a10 	vmov	s16, r0
 800fe18:	9b05      	ldr	r3, [sp, #20]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	dd05      	ble.n	800fe2a <_dtoa_r+0x82a>
 800fe1e:	4631      	mov	r1, r6
 800fe20:	461a      	mov	r2, r3
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 fe26 	bl	8010a74 <__lshift>
 800fe28:	4606      	mov	r6, r0
 800fe2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d06e      	beq.n	800ff0e <_dtoa_r+0x90e>
 800fe30:	ee18 0a10 	vmov	r0, s16
 800fe34:	4631      	mov	r1, r6
 800fe36:	f000 fe8d 	bl	8010b54 <__mcmp>
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	da67      	bge.n	800ff0e <_dtoa_r+0x90e>
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	ee18 1a10 	vmov	r1, s16
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	220a      	movs	r2, #10
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 fc61 	bl	8010714 <__multadd>
 800fe52:	9b08      	ldr	r3, [sp, #32]
 800fe54:	ee08 0a10 	vmov	s16, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f000 81b1 	beq.w	80101c0 <_dtoa_r+0xbc0>
 800fe5e:	2300      	movs	r3, #0
 800fe60:	4639      	mov	r1, r7
 800fe62:	220a      	movs	r2, #10
 800fe64:	4620      	mov	r0, r4
 800fe66:	f000 fc55 	bl	8010714 <__multadd>
 800fe6a:	9b02      	ldr	r3, [sp, #8]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	4607      	mov	r7, r0
 800fe70:	f300 808e 	bgt.w	800ff90 <_dtoa_r+0x990>
 800fe74:	9b06      	ldr	r3, [sp, #24]
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	dc51      	bgt.n	800ff1e <_dtoa_r+0x91e>
 800fe7a:	e089      	b.n	800ff90 <_dtoa_r+0x990>
 800fe7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe82:	e74b      	b.n	800fd1c <_dtoa_r+0x71c>
 800fe84:	9b03      	ldr	r3, [sp, #12]
 800fe86:	1e5e      	subs	r6, r3, #1
 800fe88:	9b07      	ldr	r3, [sp, #28]
 800fe8a:	42b3      	cmp	r3, r6
 800fe8c:	bfbf      	itttt	lt
 800fe8e:	9b07      	ldrlt	r3, [sp, #28]
 800fe90:	9607      	strlt	r6, [sp, #28]
 800fe92:	1af2      	sublt	r2, r6, r3
 800fe94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fe96:	bfb6      	itet	lt
 800fe98:	189b      	addlt	r3, r3, r2
 800fe9a:	1b9e      	subge	r6, r3, r6
 800fe9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fe9e:	9b03      	ldr	r3, [sp, #12]
 800fea0:	bfb8      	it	lt
 800fea2:	2600      	movlt	r6, #0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	bfb7      	itett	lt
 800fea8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800feac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800feb0:	1a9d      	sublt	r5, r3, r2
 800feb2:	2300      	movlt	r3, #0
 800feb4:	e734      	b.n	800fd20 <_dtoa_r+0x720>
 800feb6:	9e07      	ldr	r6, [sp, #28]
 800feb8:	9d04      	ldr	r5, [sp, #16]
 800feba:	9f08      	ldr	r7, [sp, #32]
 800febc:	e73b      	b.n	800fd36 <_dtoa_r+0x736>
 800febe:	9a07      	ldr	r2, [sp, #28]
 800fec0:	e767      	b.n	800fd92 <_dtoa_r+0x792>
 800fec2:	9b06      	ldr	r3, [sp, #24]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	dc18      	bgt.n	800fefa <_dtoa_r+0x8fa>
 800fec8:	f1ba 0f00 	cmp.w	sl, #0
 800fecc:	d115      	bne.n	800fefa <_dtoa_r+0x8fa>
 800fece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fed2:	b993      	cbnz	r3, 800fefa <_dtoa_r+0x8fa>
 800fed4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fed8:	0d1b      	lsrs	r3, r3, #20
 800feda:	051b      	lsls	r3, r3, #20
 800fedc:	b183      	cbz	r3, 800ff00 <_dtoa_r+0x900>
 800fede:	9b04      	ldr	r3, [sp, #16]
 800fee0:	3301      	adds	r3, #1
 800fee2:	9304      	str	r3, [sp, #16]
 800fee4:	9b05      	ldr	r3, [sp, #20]
 800fee6:	3301      	adds	r3, #1
 800fee8:	9305      	str	r3, [sp, #20]
 800feea:	f04f 0801 	mov.w	r8, #1
 800feee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f47f af6a 	bne.w	800fdca <_dtoa_r+0x7ca>
 800fef6:	2001      	movs	r0, #1
 800fef8:	e76f      	b.n	800fdda <_dtoa_r+0x7da>
 800fefa:	f04f 0800 	mov.w	r8, #0
 800fefe:	e7f6      	b.n	800feee <_dtoa_r+0x8ee>
 800ff00:	4698      	mov	r8, r3
 800ff02:	e7f4      	b.n	800feee <_dtoa_r+0x8ee>
 800ff04:	f43f af7d 	beq.w	800fe02 <_dtoa_r+0x802>
 800ff08:	4618      	mov	r0, r3
 800ff0a:	301c      	adds	r0, #28
 800ff0c:	e772      	b.n	800fdf4 <_dtoa_r+0x7f4>
 800ff0e:	9b03      	ldr	r3, [sp, #12]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	dc37      	bgt.n	800ff84 <_dtoa_r+0x984>
 800ff14:	9b06      	ldr	r3, [sp, #24]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	dd34      	ble.n	800ff84 <_dtoa_r+0x984>
 800ff1a:	9b03      	ldr	r3, [sp, #12]
 800ff1c:	9302      	str	r3, [sp, #8]
 800ff1e:	9b02      	ldr	r3, [sp, #8]
 800ff20:	b96b      	cbnz	r3, 800ff3e <_dtoa_r+0x93e>
 800ff22:	4631      	mov	r1, r6
 800ff24:	2205      	movs	r2, #5
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 fbf4 	bl	8010714 <__multadd>
 800ff2c:	4601      	mov	r1, r0
 800ff2e:	4606      	mov	r6, r0
 800ff30:	ee18 0a10 	vmov	r0, s16
 800ff34:	f000 fe0e 	bl	8010b54 <__mcmp>
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	f73f adbb 	bgt.w	800fab4 <_dtoa_r+0x4b4>
 800ff3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff40:	9d01      	ldr	r5, [sp, #4]
 800ff42:	43db      	mvns	r3, r3
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	f04f 0800 	mov.w	r8, #0
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f000 fbbf 	bl	80106d0 <_Bfree>
 800ff52:	2f00      	cmp	r7, #0
 800ff54:	f43f aea4 	beq.w	800fca0 <_dtoa_r+0x6a0>
 800ff58:	f1b8 0f00 	cmp.w	r8, #0
 800ff5c:	d005      	beq.n	800ff6a <_dtoa_r+0x96a>
 800ff5e:	45b8      	cmp	r8, r7
 800ff60:	d003      	beq.n	800ff6a <_dtoa_r+0x96a>
 800ff62:	4641      	mov	r1, r8
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fbb3 	bl	80106d0 <_Bfree>
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f000 fbaf 	bl	80106d0 <_Bfree>
 800ff72:	e695      	b.n	800fca0 <_dtoa_r+0x6a0>
 800ff74:	2600      	movs	r6, #0
 800ff76:	4637      	mov	r7, r6
 800ff78:	e7e1      	b.n	800ff3e <_dtoa_r+0x93e>
 800ff7a:	9700      	str	r7, [sp, #0]
 800ff7c:	4637      	mov	r7, r6
 800ff7e:	e599      	b.n	800fab4 <_dtoa_r+0x4b4>
 800ff80:	40240000 	.word	0x40240000
 800ff84:	9b08      	ldr	r3, [sp, #32]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 80ca 	beq.w	8010120 <_dtoa_r+0xb20>
 800ff8c:	9b03      	ldr	r3, [sp, #12]
 800ff8e:	9302      	str	r3, [sp, #8]
 800ff90:	2d00      	cmp	r5, #0
 800ff92:	dd05      	ble.n	800ffa0 <_dtoa_r+0x9a0>
 800ff94:	4639      	mov	r1, r7
 800ff96:	462a      	mov	r2, r5
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 fd6b 	bl	8010a74 <__lshift>
 800ff9e:	4607      	mov	r7, r0
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	d05b      	beq.n	801005e <_dtoa_r+0xa5e>
 800ffa6:	6879      	ldr	r1, [r7, #4]
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f000 fb51 	bl	8010650 <_Balloc>
 800ffae:	4605      	mov	r5, r0
 800ffb0:	b928      	cbnz	r0, 800ffbe <_dtoa_r+0x9be>
 800ffb2:	4b87      	ldr	r3, [pc, #540]	; (80101d0 <_dtoa_r+0xbd0>)
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ffba:	f7ff bb3b 	b.w	800f634 <_dtoa_r+0x34>
 800ffbe:	693a      	ldr	r2, [r7, #16]
 800ffc0:	3202      	adds	r2, #2
 800ffc2:	0092      	lsls	r2, r2, #2
 800ffc4:	f107 010c 	add.w	r1, r7, #12
 800ffc8:	300c      	adds	r0, #12
 800ffca:	f000 fb33 	bl	8010634 <memcpy>
 800ffce:	2201      	movs	r2, #1
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f000 fd4e 	bl	8010a74 <__lshift>
 800ffd8:	9b01      	ldr	r3, [sp, #4]
 800ffda:	f103 0901 	add.w	r9, r3, #1
 800ffde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	9305      	str	r3, [sp, #20]
 800ffe6:	f00a 0301 	and.w	r3, sl, #1
 800ffea:	46b8      	mov	r8, r7
 800ffec:	9304      	str	r3, [sp, #16]
 800ffee:	4607      	mov	r7, r0
 800fff0:	4631      	mov	r1, r6
 800fff2:	ee18 0a10 	vmov	r0, s16
 800fff6:	f7ff fa75 	bl	800f4e4 <quorem>
 800fffa:	4641      	mov	r1, r8
 800fffc:	9002      	str	r0, [sp, #8]
 800fffe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010002:	ee18 0a10 	vmov	r0, s16
 8010006:	f000 fda5 	bl	8010b54 <__mcmp>
 801000a:	463a      	mov	r2, r7
 801000c:	9003      	str	r0, [sp, #12]
 801000e:	4631      	mov	r1, r6
 8010010:	4620      	mov	r0, r4
 8010012:	f000 fdbb 	bl	8010b8c <__mdiff>
 8010016:	68c2      	ldr	r2, [r0, #12]
 8010018:	f109 3bff 	add.w	fp, r9, #4294967295
 801001c:	4605      	mov	r5, r0
 801001e:	bb02      	cbnz	r2, 8010062 <_dtoa_r+0xa62>
 8010020:	4601      	mov	r1, r0
 8010022:	ee18 0a10 	vmov	r0, s16
 8010026:	f000 fd95 	bl	8010b54 <__mcmp>
 801002a:	4602      	mov	r2, r0
 801002c:	4629      	mov	r1, r5
 801002e:	4620      	mov	r0, r4
 8010030:	9207      	str	r2, [sp, #28]
 8010032:	f000 fb4d 	bl	80106d0 <_Bfree>
 8010036:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801003a:	ea43 0102 	orr.w	r1, r3, r2
 801003e:	9b04      	ldr	r3, [sp, #16]
 8010040:	430b      	orrs	r3, r1
 8010042:	464d      	mov	r5, r9
 8010044:	d10f      	bne.n	8010066 <_dtoa_r+0xa66>
 8010046:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801004a:	d02a      	beq.n	80100a2 <_dtoa_r+0xaa2>
 801004c:	9b03      	ldr	r3, [sp, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	dd02      	ble.n	8010058 <_dtoa_r+0xa58>
 8010052:	9b02      	ldr	r3, [sp, #8]
 8010054:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010058:	f88b a000 	strb.w	sl, [fp]
 801005c:	e775      	b.n	800ff4a <_dtoa_r+0x94a>
 801005e:	4638      	mov	r0, r7
 8010060:	e7ba      	b.n	800ffd8 <_dtoa_r+0x9d8>
 8010062:	2201      	movs	r2, #1
 8010064:	e7e2      	b.n	801002c <_dtoa_r+0xa2c>
 8010066:	9b03      	ldr	r3, [sp, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	db04      	blt.n	8010076 <_dtoa_r+0xa76>
 801006c:	9906      	ldr	r1, [sp, #24]
 801006e:	430b      	orrs	r3, r1
 8010070:	9904      	ldr	r1, [sp, #16]
 8010072:	430b      	orrs	r3, r1
 8010074:	d122      	bne.n	80100bc <_dtoa_r+0xabc>
 8010076:	2a00      	cmp	r2, #0
 8010078:	ddee      	ble.n	8010058 <_dtoa_r+0xa58>
 801007a:	ee18 1a10 	vmov	r1, s16
 801007e:	2201      	movs	r2, #1
 8010080:	4620      	mov	r0, r4
 8010082:	f000 fcf7 	bl	8010a74 <__lshift>
 8010086:	4631      	mov	r1, r6
 8010088:	ee08 0a10 	vmov	s16, r0
 801008c:	f000 fd62 	bl	8010b54 <__mcmp>
 8010090:	2800      	cmp	r0, #0
 8010092:	dc03      	bgt.n	801009c <_dtoa_r+0xa9c>
 8010094:	d1e0      	bne.n	8010058 <_dtoa_r+0xa58>
 8010096:	f01a 0f01 	tst.w	sl, #1
 801009a:	d0dd      	beq.n	8010058 <_dtoa_r+0xa58>
 801009c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80100a0:	d1d7      	bne.n	8010052 <_dtoa_r+0xa52>
 80100a2:	2339      	movs	r3, #57	; 0x39
 80100a4:	f88b 3000 	strb.w	r3, [fp]
 80100a8:	462b      	mov	r3, r5
 80100aa:	461d      	mov	r5, r3
 80100ac:	3b01      	subs	r3, #1
 80100ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80100b2:	2a39      	cmp	r2, #57	; 0x39
 80100b4:	d071      	beq.n	801019a <_dtoa_r+0xb9a>
 80100b6:	3201      	adds	r2, #1
 80100b8:	701a      	strb	r2, [r3, #0]
 80100ba:	e746      	b.n	800ff4a <_dtoa_r+0x94a>
 80100bc:	2a00      	cmp	r2, #0
 80100be:	dd07      	ble.n	80100d0 <_dtoa_r+0xad0>
 80100c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80100c4:	d0ed      	beq.n	80100a2 <_dtoa_r+0xaa2>
 80100c6:	f10a 0301 	add.w	r3, sl, #1
 80100ca:	f88b 3000 	strb.w	r3, [fp]
 80100ce:	e73c      	b.n	800ff4a <_dtoa_r+0x94a>
 80100d0:	9b05      	ldr	r3, [sp, #20]
 80100d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80100d6:	4599      	cmp	r9, r3
 80100d8:	d047      	beq.n	801016a <_dtoa_r+0xb6a>
 80100da:	ee18 1a10 	vmov	r1, s16
 80100de:	2300      	movs	r3, #0
 80100e0:	220a      	movs	r2, #10
 80100e2:	4620      	mov	r0, r4
 80100e4:	f000 fb16 	bl	8010714 <__multadd>
 80100e8:	45b8      	cmp	r8, r7
 80100ea:	ee08 0a10 	vmov	s16, r0
 80100ee:	f04f 0300 	mov.w	r3, #0
 80100f2:	f04f 020a 	mov.w	r2, #10
 80100f6:	4641      	mov	r1, r8
 80100f8:	4620      	mov	r0, r4
 80100fa:	d106      	bne.n	801010a <_dtoa_r+0xb0a>
 80100fc:	f000 fb0a 	bl	8010714 <__multadd>
 8010100:	4680      	mov	r8, r0
 8010102:	4607      	mov	r7, r0
 8010104:	f109 0901 	add.w	r9, r9, #1
 8010108:	e772      	b.n	800fff0 <_dtoa_r+0x9f0>
 801010a:	f000 fb03 	bl	8010714 <__multadd>
 801010e:	4639      	mov	r1, r7
 8010110:	4680      	mov	r8, r0
 8010112:	2300      	movs	r3, #0
 8010114:	220a      	movs	r2, #10
 8010116:	4620      	mov	r0, r4
 8010118:	f000 fafc 	bl	8010714 <__multadd>
 801011c:	4607      	mov	r7, r0
 801011e:	e7f1      	b.n	8010104 <_dtoa_r+0xb04>
 8010120:	9b03      	ldr	r3, [sp, #12]
 8010122:	9302      	str	r3, [sp, #8]
 8010124:	9d01      	ldr	r5, [sp, #4]
 8010126:	ee18 0a10 	vmov	r0, s16
 801012a:	4631      	mov	r1, r6
 801012c:	f7ff f9da 	bl	800f4e4 <quorem>
 8010130:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010134:	9b01      	ldr	r3, [sp, #4]
 8010136:	f805 ab01 	strb.w	sl, [r5], #1
 801013a:	1aea      	subs	r2, r5, r3
 801013c:	9b02      	ldr	r3, [sp, #8]
 801013e:	4293      	cmp	r3, r2
 8010140:	dd09      	ble.n	8010156 <_dtoa_r+0xb56>
 8010142:	ee18 1a10 	vmov	r1, s16
 8010146:	2300      	movs	r3, #0
 8010148:	220a      	movs	r2, #10
 801014a:	4620      	mov	r0, r4
 801014c:	f000 fae2 	bl	8010714 <__multadd>
 8010150:	ee08 0a10 	vmov	s16, r0
 8010154:	e7e7      	b.n	8010126 <_dtoa_r+0xb26>
 8010156:	9b02      	ldr	r3, [sp, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	bfc8      	it	gt
 801015c:	461d      	movgt	r5, r3
 801015e:	9b01      	ldr	r3, [sp, #4]
 8010160:	bfd8      	it	le
 8010162:	2501      	movle	r5, #1
 8010164:	441d      	add	r5, r3
 8010166:	f04f 0800 	mov.w	r8, #0
 801016a:	ee18 1a10 	vmov	r1, s16
 801016e:	2201      	movs	r2, #1
 8010170:	4620      	mov	r0, r4
 8010172:	f000 fc7f 	bl	8010a74 <__lshift>
 8010176:	4631      	mov	r1, r6
 8010178:	ee08 0a10 	vmov	s16, r0
 801017c:	f000 fcea 	bl	8010b54 <__mcmp>
 8010180:	2800      	cmp	r0, #0
 8010182:	dc91      	bgt.n	80100a8 <_dtoa_r+0xaa8>
 8010184:	d102      	bne.n	801018c <_dtoa_r+0xb8c>
 8010186:	f01a 0f01 	tst.w	sl, #1
 801018a:	d18d      	bne.n	80100a8 <_dtoa_r+0xaa8>
 801018c:	462b      	mov	r3, r5
 801018e:	461d      	mov	r5, r3
 8010190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010194:	2a30      	cmp	r2, #48	; 0x30
 8010196:	d0fa      	beq.n	801018e <_dtoa_r+0xb8e>
 8010198:	e6d7      	b.n	800ff4a <_dtoa_r+0x94a>
 801019a:	9a01      	ldr	r2, [sp, #4]
 801019c:	429a      	cmp	r2, r3
 801019e:	d184      	bne.n	80100aa <_dtoa_r+0xaaa>
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	3301      	adds	r3, #1
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	2331      	movs	r3, #49	; 0x31
 80101a8:	7013      	strb	r3, [r2, #0]
 80101aa:	e6ce      	b.n	800ff4a <_dtoa_r+0x94a>
 80101ac:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <_dtoa_r+0xbd4>)
 80101ae:	f7ff ba95 	b.w	800f6dc <_dtoa_r+0xdc>
 80101b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f47f aa6e 	bne.w	800f696 <_dtoa_r+0x96>
 80101ba:	4b07      	ldr	r3, [pc, #28]	; (80101d8 <_dtoa_r+0xbd8>)
 80101bc:	f7ff ba8e 	b.w	800f6dc <_dtoa_r+0xdc>
 80101c0:	9b02      	ldr	r3, [sp, #8]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	dcae      	bgt.n	8010124 <_dtoa_r+0xb24>
 80101c6:	9b06      	ldr	r3, [sp, #24]
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	f73f aea8 	bgt.w	800ff1e <_dtoa_r+0x91e>
 80101ce:	e7a9      	b.n	8010124 <_dtoa_r+0xb24>
 80101d0:	08011697 	.word	0x08011697
 80101d4:	080115f4 	.word	0x080115f4
 80101d8:	08011618 	.word	0x08011618

080101dc <__sflush_r>:
 80101dc:	898a      	ldrh	r2, [r1, #12]
 80101de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e2:	4605      	mov	r5, r0
 80101e4:	0710      	lsls	r0, r2, #28
 80101e6:	460c      	mov	r4, r1
 80101e8:	d458      	bmi.n	801029c <__sflush_r+0xc0>
 80101ea:	684b      	ldr	r3, [r1, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	dc05      	bgt.n	80101fc <__sflush_r+0x20>
 80101f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	dc02      	bgt.n	80101fc <__sflush_r+0x20>
 80101f6:	2000      	movs	r0, #0
 80101f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101fe:	2e00      	cmp	r6, #0
 8010200:	d0f9      	beq.n	80101f6 <__sflush_r+0x1a>
 8010202:	2300      	movs	r3, #0
 8010204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010208:	682f      	ldr	r7, [r5, #0]
 801020a:	602b      	str	r3, [r5, #0]
 801020c:	d032      	beq.n	8010274 <__sflush_r+0x98>
 801020e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	075a      	lsls	r2, r3, #29
 8010214:	d505      	bpl.n	8010222 <__sflush_r+0x46>
 8010216:	6863      	ldr	r3, [r4, #4]
 8010218:	1ac0      	subs	r0, r0, r3
 801021a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801021c:	b10b      	cbz	r3, 8010222 <__sflush_r+0x46>
 801021e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010220:	1ac0      	subs	r0, r0, r3
 8010222:	2300      	movs	r3, #0
 8010224:	4602      	mov	r2, r0
 8010226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010228:	6a21      	ldr	r1, [r4, #32]
 801022a:	4628      	mov	r0, r5
 801022c:	47b0      	blx	r6
 801022e:	1c43      	adds	r3, r0, #1
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	d106      	bne.n	8010242 <__sflush_r+0x66>
 8010234:	6829      	ldr	r1, [r5, #0]
 8010236:	291d      	cmp	r1, #29
 8010238:	d82c      	bhi.n	8010294 <__sflush_r+0xb8>
 801023a:	4a2a      	ldr	r2, [pc, #168]	; (80102e4 <__sflush_r+0x108>)
 801023c:	40ca      	lsrs	r2, r1
 801023e:	07d6      	lsls	r6, r2, #31
 8010240:	d528      	bpl.n	8010294 <__sflush_r+0xb8>
 8010242:	2200      	movs	r2, #0
 8010244:	6062      	str	r2, [r4, #4]
 8010246:	04d9      	lsls	r1, r3, #19
 8010248:	6922      	ldr	r2, [r4, #16]
 801024a:	6022      	str	r2, [r4, #0]
 801024c:	d504      	bpl.n	8010258 <__sflush_r+0x7c>
 801024e:	1c42      	adds	r2, r0, #1
 8010250:	d101      	bne.n	8010256 <__sflush_r+0x7a>
 8010252:	682b      	ldr	r3, [r5, #0]
 8010254:	b903      	cbnz	r3, 8010258 <__sflush_r+0x7c>
 8010256:	6560      	str	r0, [r4, #84]	; 0x54
 8010258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801025a:	602f      	str	r7, [r5, #0]
 801025c:	2900      	cmp	r1, #0
 801025e:	d0ca      	beq.n	80101f6 <__sflush_r+0x1a>
 8010260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010264:	4299      	cmp	r1, r3
 8010266:	d002      	beq.n	801026e <__sflush_r+0x92>
 8010268:	4628      	mov	r0, r5
 801026a:	f000 fd8b 	bl	8010d84 <_free_r>
 801026e:	2000      	movs	r0, #0
 8010270:	6360      	str	r0, [r4, #52]	; 0x34
 8010272:	e7c1      	b.n	80101f8 <__sflush_r+0x1c>
 8010274:	6a21      	ldr	r1, [r4, #32]
 8010276:	2301      	movs	r3, #1
 8010278:	4628      	mov	r0, r5
 801027a:	47b0      	blx	r6
 801027c:	1c41      	adds	r1, r0, #1
 801027e:	d1c7      	bne.n	8010210 <__sflush_r+0x34>
 8010280:	682b      	ldr	r3, [r5, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d0c4      	beq.n	8010210 <__sflush_r+0x34>
 8010286:	2b1d      	cmp	r3, #29
 8010288:	d001      	beq.n	801028e <__sflush_r+0xb2>
 801028a:	2b16      	cmp	r3, #22
 801028c:	d101      	bne.n	8010292 <__sflush_r+0xb6>
 801028e:	602f      	str	r7, [r5, #0]
 8010290:	e7b1      	b.n	80101f6 <__sflush_r+0x1a>
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010298:	81a3      	strh	r3, [r4, #12]
 801029a:	e7ad      	b.n	80101f8 <__sflush_r+0x1c>
 801029c:	690f      	ldr	r7, [r1, #16]
 801029e:	2f00      	cmp	r7, #0
 80102a0:	d0a9      	beq.n	80101f6 <__sflush_r+0x1a>
 80102a2:	0793      	lsls	r3, r2, #30
 80102a4:	680e      	ldr	r6, [r1, #0]
 80102a6:	bf08      	it	eq
 80102a8:	694b      	ldreq	r3, [r1, #20]
 80102aa:	600f      	str	r7, [r1, #0]
 80102ac:	bf18      	it	ne
 80102ae:	2300      	movne	r3, #0
 80102b0:	eba6 0807 	sub.w	r8, r6, r7
 80102b4:	608b      	str	r3, [r1, #8]
 80102b6:	f1b8 0f00 	cmp.w	r8, #0
 80102ba:	dd9c      	ble.n	80101f6 <__sflush_r+0x1a>
 80102bc:	6a21      	ldr	r1, [r4, #32]
 80102be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102c0:	4643      	mov	r3, r8
 80102c2:	463a      	mov	r2, r7
 80102c4:	4628      	mov	r0, r5
 80102c6:	47b0      	blx	r6
 80102c8:	2800      	cmp	r0, #0
 80102ca:	dc06      	bgt.n	80102da <__sflush_r+0xfe>
 80102cc:	89a3      	ldrh	r3, [r4, #12]
 80102ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102d2:	81a3      	strh	r3, [r4, #12]
 80102d4:	f04f 30ff 	mov.w	r0, #4294967295
 80102d8:	e78e      	b.n	80101f8 <__sflush_r+0x1c>
 80102da:	4407      	add	r7, r0
 80102dc:	eba8 0800 	sub.w	r8, r8, r0
 80102e0:	e7e9      	b.n	80102b6 <__sflush_r+0xda>
 80102e2:	bf00      	nop
 80102e4:	20400001 	.word	0x20400001

080102e8 <_fflush_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	690b      	ldr	r3, [r1, #16]
 80102ec:	4605      	mov	r5, r0
 80102ee:	460c      	mov	r4, r1
 80102f0:	b913      	cbnz	r3, 80102f8 <_fflush_r+0x10>
 80102f2:	2500      	movs	r5, #0
 80102f4:	4628      	mov	r0, r5
 80102f6:	bd38      	pop	{r3, r4, r5, pc}
 80102f8:	b118      	cbz	r0, 8010302 <_fflush_r+0x1a>
 80102fa:	6983      	ldr	r3, [r0, #24]
 80102fc:	b90b      	cbnz	r3, 8010302 <_fflush_r+0x1a>
 80102fe:	f000 f887 	bl	8010410 <__sinit>
 8010302:	4b14      	ldr	r3, [pc, #80]	; (8010354 <_fflush_r+0x6c>)
 8010304:	429c      	cmp	r4, r3
 8010306:	d11b      	bne.n	8010340 <_fflush_r+0x58>
 8010308:	686c      	ldr	r4, [r5, #4]
 801030a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0ef      	beq.n	80102f2 <_fflush_r+0xa>
 8010312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010314:	07d0      	lsls	r0, r2, #31
 8010316:	d404      	bmi.n	8010322 <_fflush_r+0x3a>
 8010318:	0599      	lsls	r1, r3, #22
 801031a:	d402      	bmi.n	8010322 <_fflush_r+0x3a>
 801031c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801031e:	f000 f91a 	bl	8010556 <__retarget_lock_acquire_recursive>
 8010322:	4628      	mov	r0, r5
 8010324:	4621      	mov	r1, r4
 8010326:	f7ff ff59 	bl	80101dc <__sflush_r>
 801032a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801032c:	07da      	lsls	r2, r3, #31
 801032e:	4605      	mov	r5, r0
 8010330:	d4e0      	bmi.n	80102f4 <_fflush_r+0xc>
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	059b      	lsls	r3, r3, #22
 8010336:	d4dd      	bmi.n	80102f4 <_fflush_r+0xc>
 8010338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801033a:	f000 f90d 	bl	8010558 <__retarget_lock_release_recursive>
 801033e:	e7d9      	b.n	80102f4 <_fflush_r+0xc>
 8010340:	4b05      	ldr	r3, [pc, #20]	; (8010358 <_fflush_r+0x70>)
 8010342:	429c      	cmp	r4, r3
 8010344:	d101      	bne.n	801034a <_fflush_r+0x62>
 8010346:	68ac      	ldr	r4, [r5, #8]
 8010348:	e7df      	b.n	801030a <_fflush_r+0x22>
 801034a:	4b04      	ldr	r3, [pc, #16]	; (801035c <_fflush_r+0x74>)
 801034c:	429c      	cmp	r4, r3
 801034e:	bf08      	it	eq
 8010350:	68ec      	ldreq	r4, [r5, #12]
 8010352:	e7da      	b.n	801030a <_fflush_r+0x22>
 8010354:	080116c8 	.word	0x080116c8
 8010358:	080116e8 	.word	0x080116e8
 801035c:	080116a8 	.word	0x080116a8

08010360 <std>:
 8010360:	2300      	movs	r3, #0
 8010362:	b510      	push	{r4, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	e9c0 3300 	strd	r3, r3, [r0]
 801036a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801036e:	6083      	str	r3, [r0, #8]
 8010370:	8181      	strh	r1, [r0, #12]
 8010372:	6643      	str	r3, [r0, #100]	; 0x64
 8010374:	81c2      	strh	r2, [r0, #14]
 8010376:	6183      	str	r3, [r0, #24]
 8010378:	4619      	mov	r1, r3
 801037a:	2208      	movs	r2, #8
 801037c:	305c      	adds	r0, #92	; 0x5c
 801037e:	f7fe faf1 	bl	800e964 <memset>
 8010382:	4b05      	ldr	r3, [pc, #20]	; (8010398 <std+0x38>)
 8010384:	6263      	str	r3, [r4, #36]	; 0x24
 8010386:	4b05      	ldr	r3, [pc, #20]	; (801039c <std+0x3c>)
 8010388:	62a3      	str	r3, [r4, #40]	; 0x28
 801038a:	4b05      	ldr	r3, [pc, #20]	; (80103a0 <std+0x40>)
 801038c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801038e:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <std+0x44>)
 8010390:	6224      	str	r4, [r4, #32]
 8010392:	6323      	str	r3, [r4, #48]	; 0x30
 8010394:	bd10      	pop	{r4, pc}
 8010396:	bf00      	nop
 8010398:	08011219 	.word	0x08011219
 801039c:	0801123b 	.word	0x0801123b
 80103a0:	08011273 	.word	0x08011273
 80103a4:	08011297 	.word	0x08011297

080103a8 <_cleanup_r>:
 80103a8:	4901      	ldr	r1, [pc, #4]	; (80103b0 <_cleanup_r+0x8>)
 80103aa:	f000 b8af 	b.w	801050c <_fwalk_reent>
 80103ae:	bf00      	nop
 80103b0:	080102e9 	.word	0x080102e9

080103b4 <__sfmoreglue>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	2268      	movs	r2, #104	; 0x68
 80103b8:	1e4d      	subs	r5, r1, #1
 80103ba:	4355      	muls	r5, r2
 80103bc:	460e      	mov	r6, r1
 80103be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103c2:	f000 fd4b 	bl	8010e5c <_malloc_r>
 80103c6:	4604      	mov	r4, r0
 80103c8:	b140      	cbz	r0, 80103dc <__sfmoreglue+0x28>
 80103ca:	2100      	movs	r1, #0
 80103cc:	e9c0 1600 	strd	r1, r6, [r0]
 80103d0:	300c      	adds	r0, #12
 80103d2:	60a0      	str	r0, [r4, #8]
 80103d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103d8:	f7fe fac4 	bl	800e964 <memset>
 80103dc:	4620      	mov	r0, r4
 80103de:	bd70      	pop	{r4, r5, r6, pc}

080103e0 <__sfp_lock_acquire>:
 80103e0:	4801      	ldr	r0, [pc, #4]	; (80103e8 <__sfp_lock_acquire+0x8>)
 80103e2:	f000 b8b8 	b.w	8010556 <__retarget_lock_acquire_recursive>
 80103e6:	bf00      	nop
 80103e8:	200021c5 	.word	0x200021c5

080103ec <__sfp_lock_release>:
 80103ec:	4801      	ldr	r0, [pc, #4]	; (80103f4 <__sfp_lock_release+0x8>)
 80103ee:	f000 b8b3 	b.w	8010558 <__retarget_lock_release_recursive>
 80103f2:	bf00      	nop
 80103f4:	200021c5 	.word	0x200021c5

080103f8 <__sinit_lock_acquire>:
 80103f8:	4801      	ldr	r0, [pc, #4]	; (8010400 <__sinit_lock_acquire+0x8>)
 80103fa:	f000 b8ac 	b.w	8010556 <__retarget_lock_acquire_recursive>
 80103fe:	bf00      	nop
 8010400:	200021c6 	.word	0x200021c6

08010404 <__sinit_lock_release>:
 8010404:	4801      	ldr	r0, [pc, #4]	; (801040c <__sinit_lock_release+0x8>)
 8010406:	f000 b8a7 	b.w	8010558 <__retarget_lock_release_recursive>
 801040a:	bf00      	nop
 801040c:	200021c6 	.word	0x200021c6

08010410 <__sinit>:
 8010410:	b510      	push	{r4, lr}
 8010412:	4604      	mov	r4, r0
 8010414:	f7ff fff0 	bl	80103f8 <__sinit_lock_acquire>
 8010418:	69a3      	ldr	r3, [r4, #24]
 801041a:	b11b      	cbz	r3, 8010424 <__sinit+0x14>
 801041c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010420:	f7ff bff0 	b.w	8010404 <__sinit_lock_release>
 8010424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010428:	6523      	str	r3, [r4, #80]	; 0x50
 801042a:	4b13      	ldr	r3, [pc, #76]	; (8010478 <__sinit+0x68>)
 801042c:	4a13      	ldr	r2, [pc, #76]	; (801047c <__sinit+0x6c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	62a2      	str	r2, [r4, #40]	; 0x28
 8010432:	42a3      	cmp	r3, r4
 8010434:	bf04      	itt	eq
 8010436:	2301      	moveq	r3, #1
 8010438:	61a3      	streq	r3, [r4, #24]
 801043a:	4620      	mov	r0, r4
 801043c:	f000 f820 	bl	8010480 <__sfp>
 8010440:	6060      	str	r0, [r4, #4]
 8010442:	4620      	mov	r0, r4
 8010444:	f000 f81c 	bl	8010480 <__sfp>
 8010448:	60a0      	str	r0, [r4, #8]
 801044a:	4620      	mov	r0, r4
 801044c:	f000 f818 	bl	8010480 <__sfp>
 8010450:	2200      	movs	r2, #0
 8010452:	60e0      	str	r0, [r4, #12]
 8010454:	2104      	movs	r1, #4
 8010456:	6860      	ldr	r0, [r4, #4]
 8010458:	f7ff ff82 	bl	8010360 <std>
 801045c:	68a0      	ldr	r0, [r4, #8]
 801045e:	2201      	movs	r2, #1
 8010460:	2109      	movs	r1, #9
 8010462:	f7ff ff7d 	bl	8010360 <std>
 8010466:	68e0      	ldr	r0, [r4, #12]
 8010468:	2202      	movs	r2, #2
 801046a:	2112      	movs	r1, #18
 801046c:	f7ff ff78 	bl	8010360 <std>
 8010470:	2301      	movs	r3, #1
 8010472:	61a3      	str	r3, [r4, #24]
 8010474:	e7d2      	b.n	801041c <__sinit+0xc>
 8010476:	bf00      	nop
 8010478:	080115e0 	.word	0x080115e0
 801047c:	080103a9 	.word	0x080103a9

08010480 <__sfp>:
 8010480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010482:	4607      	mov	r7, r0
 8010484:	f7ff ffac 	bl	80103e0 <__sfp_lock_acquire>
 8010488:	4b1e      	ldr	r3, [pc, #120]	; (8010504 <__sfp+0x84>)
 801048a:	681e      	ldr	r6, [r3, #0]
 801048c:	69b3      	ldr	r3, [r6, #24]
 801048e:	b913      	cbnz	r3, 8010496 <__sfp+0x16>
 8010490:	4630      	mov	r0, r6
 8010492:	f7ff ffbd 	bl	8010410 <__sinit>
 8010496:	3648      	adds	r6, #72	; 0x48
 8010498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801049c:	3b01      	subs	r3, #1
 801049e:	d503      	bpl.n	80104a8 <__sfp+0x28>
 80104a0:	6833      	ldr	r3, [r6, #0]
 80104a2:	b30b      	cbz	r3, 80104e8 <__sfp+0x68>
 80104a4:	6836      	ldr	r6, [r6, #0]
 80104a6:	e7f7      	b.n	8010498 <__sfp+0x18>
 80104a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80104ac:	b9d5      	cbnz	r5, 80104e4 <__sfp+0x64>
 80104ae:	4b16      	ldr	r3, [pc, #88]	; (8010508 <__sfp+0x88>)
 80104b0:	60e3      	str	r3, [r4, #12]
 80104b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80104b6:	6665      	str	r5, [r4, #100]	; 0x64
 80104b8:	f000 f84c 	bl	8010554 <__retarget_lock_init_recursive>
 80104bc:	f7ff ff96 	bl	80103ec <__sfp_lock_release>
 80104c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80104c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80104c8:	6025      	str	r5, [r4, #0]
 80104ca:	61a5      	str	r5, [r4, #24]
 80104cc:	2208      	movs	r2, #8
 80104ce:	4629      	mov	r1, r5
 80104d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104d4:	f7fe fa46 	bl	800e964 <memset>
 80104d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104e0:	4620      	mov	r0, r4
 80104e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104e4:	3468      	adds	r4, #104	; 0x68
 80104e6:	e7d9      	b.n	801049c <__sfp+0x1c>
 80104e8:	2104      	movs	r1, #4
 80104ea:	4638      	mov	r0, r7
 80104ec:	f7ff ff62 	bl	80103b4 <__sfmoreglue>
 80104f0:	4604      	mov	r4, r0
 80104f2:	6030      	str	r0, [r6, #0]
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d1d5      	bne.n	80104a4 <__sfp+0x24>
 80104f8:	f7ff ff78 	bl	80103ec <__sfp_lock_release>
 80104fc:	230c      	movs	r3, #12
 80104fe:	603b      	str	r3, [r7, #0]
 8010500:	e7ee      	b.n	80104e0 <__sfp+0x60>
 8010502:	bf00      	nop
 8010504:	080115e0 	.word	0x080115e0
 8010508:	ffff0001 	.word	0xffff0001

0801050c <_fwalk_reent>:
 801050c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010510:	4606      	mov	r6, r0
 8010512:	4688      	mov	r8, r1
 8010514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010518:	2700      	movs	r7, #0
 801051a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801051e:	f1b9 0901 	subs.w	r9, r9, #1
 8010522:	d505      	bpl.n	8010530 <_fwalk_reent+0x24>
 8010524:	6824      	ldr	r4, [r4, #0]
 8010526:	2c00      	cmp	r4, #0
 8010528:	d1f7      	bne.n	801051a <_fwalk_reent+0xe>
 801052a:	4638      	mov	r0, r7
 801052c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010530:	89ab      	ldrh	r3, [r5, #12]
 8010532:	2b01      	cmp	r3, #1
 8010534:	d907      	bls.n	8010546 <_fwalk_reent+0x3a>
 8010536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801053a:	3301      	adds	r3, #1
 801053c:	d003      	beq.n	8010546 <_fwalk_reent+0x3a>
 801053e:	4629      	mov	r1, r5
 8010540:	4630      	mov	r0, r6
 8010542:	47c0      	blx	r8
 8010544:	4307      	orrs	r7, r0
 8010546:	3568      	adds	r5, #104	; 0x68
 8010548:	e7e9      	b.n	801051e <_fwalk_reent+0x12>
	...

0801054c <_localeconv_r>:
 801054c:	4800      	ldr	r0, [pc, #0]	; (8010550 <_localeconv_r+0x4>)
 801054e:	4770      	bx	lr
 8010550:	20000250 	.word	0x20000250

08010554 <__retarget_lock_init_recursive>:
 8010554:	4770      	bx	lr

08010556 <__retarget_lock_acquire_recursive>:
 8010556:	4770      	bx	lr

08010558 <__retarget_lock_release_recursive>:
 8010558:	4770      	bx	lr

0801055a <__swhatbuf_r>:
 801055a:	b570      	push	{r4, r5, r6, lr}
 801055c:	460e      	mov	r6, r1
 801055e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010562:	2900      	cmp	r1, #0
 8010564:	b096      	sub	sp, #88	; 0x58
 8010566:	4614      	mov	r4, r2
 8010568:	461d      	mov	r5, r3
 801056a:	da08      	bge.n	801057e <__swhatbuf_r+0x24>
 801056c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	602a      	str	r2, [r5, #0]
 8010574:	061a      	lsls	r2, r3, #24
 8010576:	d410      	bmi.n	801059a <__swhatbuf_r+0x40>
 8010578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801057c:	e00e      	b.n	801059c <__swhatbuf_r+0x42>
 801057e:	466a      	mov	r2, sp
 8010580:	f000 fee0 	bl	8011344 <_fstat_r>
 8010584:	2800      	cmp	r0, #0
 8010586:	dbf1      	blt.n	801056c <__swhatbuf_r+0x12>
 8010588:	9a01      	ldr	r2, [sp, #4]
 801058a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801058e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010592:	425a      	negs	r2, r3
 8010594:	415a      	adcs	r2, r3
 8010596:	602a      	str	r2, [r5, #0]
 8010598:	e7ee      	b.n	8010578 <__swhatbuf_r+0x1e>
 801059a:	2340      	movs	r3, #64	; 0x40
 801059c:	2000      	movs	r0, #0
 801059e:	6023      	str	r3, [r4, #0]
 80105a0:	b016      	add	sp, #88	; 0x58
 80105a2:	bd70      	pop	{r4, r5, r6, pc}

080105a4 <__smakebuf_r>:
 80105a4:	898b      	ldrh	r3, [r1, #12]
 80105a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105a8:	079d      	lsls	r5, r3, #30
 80105aa:	4606      	mov	r6, r0
 80105ac:	460c      	mov	r4, r1
 80105ae:	d507      	bpl.n	80105c0 <__smakebuf_r+0x1c>
 80105b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105b4:	6023      	str	r3, [r4, #0]
 80105b6:	6123      	str	r3, [r4, #16]
 80105b8:	2301      	movs	r3, #1
 80105ba:	6163      	str	r3, [r4, #20]
 80105bc:	b002      	add	sp, #8
 80105be:	bd70      	pop	{r4, r5, r6, pc}
 80105c0:	ab01      	add	r3, sp, #4
 80105c2:	466a      	mov	r2, sp
 80105c4:	f7ff ffc9 	bl	801055a <__swhatbuf_r>
 80105c8:	9900      	ldr	r1, [sp, #0]
 80105ca:	4605      	mov	r5, r0
 80105cc:	4630      	mov	r0, r6
 80105ce:	f000 fc45 	bl	8010e5c <_malloc_r>
 80105d2:	b948      	cbnz	r0, 80105e8 <__smakebuf_r+0x44>
 80105d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d8:	059a      	lsls	r2, r3, #22
 80105da:	d4ef      	bmi.n	80105bc <__smakebuf_r+0x18>
 80105dc:	f023 0303 	bic.w	r3, r3, #3
 80105e0:	f043 0302 	orr.w	r3, r3, #2
 80105e4:	81a3      	strh	r3, [r4, #12]
 80105e6:	e7e3      	b.n	80105b0 <__smakebuf_r+0xc>
 80105e8:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <__smakebuf_r+0x7c>)
 80105ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	6020      	str	r0, [r4, #0]
 80105f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105f4:	81a3      	strh	r3, [r4, #12]
 80105f6:	9b00      	ldr	r3, [sp, #0]
 80105f8:	6163      	str	r3, [r4, #20]
 80105fa:	9b01      	ldr	r3, [sp, #4]
 80105fc:	6120      	str	r0, [r4, #16]
 80105fe:	b15b      	cbz	r3, 8010618 <__smakebuf_r+0x74>
 8010600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010604:	4630      	mov	r0, r6
 8010606:	f000 feaf 	bl	8011368 <_isatty_r>
 801060a:	b128      	cbz	r0, 8010618 <__smakebuf_r+0x74>
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	f023 0303 	bic.w	r3, r3, #3
 8010612:	f043 0301 	orr.w	r3, r3, #1
 8010616:	81a3      	strh	r3, [r4, #12]
 8010618:	89a0      	ldrh	r0, [r4, #12]
 801061a:	4305      	orrs	r5, r0
 801061c:	81a5      	strh	r5, [r4, #12]
 801061e:	e7cd      	b.n	80105bc <__smakebuf_r+0x18>
 8010620:	080103a9 	.word	0x080103a9

08010624 <malloc>:
 8010624:	4b02      	ldr	r3, [pc, #8]	; (8010630 <malloc+0xc>)
 8010626:	4601      	mov	r1, r0
 8010628:	6818      	ldr	r0, [r3, #0]
 801062a:	f000 bc17 	b.w	8010e5c <_malloc_r>
 801062e:	bf00      	nop
 8010630:	200000fc 	.word	0x200000fc

08010634 <memcpy>:
 8010634:	440a      	add	r2, r1
 8010636:	4291      	cmp	r1, r2
 8010638:	f100 33ff 	add.w	r3, r0, #4294967295
 801063c:	d100      	bne.n	8010640 <memcpy+0xc>
 801063e:	4770      	bx	lr
 8010640:	b510      	push	{r4, lr}
 8010642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010646:	f803 4f01 	strb.w	r4, [r3, #1]!
 801064a:	4291      	cmp	r1, r2
 801064c:	d1f9      	bne.n	8010642 <memcpy+0xe>
 801064e:	bd10      	pop	{r4, pc}

08010650 <_Balloc>:
 8010650:	b570      	push	{r4, r5, r6, lr}
 8010652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010654:	4604      	mov	r4, r0
 8010656:	460d      	mov	r5, r1
 8010658:	b976      	cbnz	r6, 8010678 <_Balloc+0x28>
 801065a:	2010      	movs	r0, #16
 801065c:	f7ff ffe2 	bl	8010624 <malloc>
 8010660:	4602      	mov	r2, r0
 8010662:	6260      	str	r0, [r4, #36]	; 0x24
 8010664:	b920      	cbnz	r0, 8010670 <_Balloc+0x20>
 8010666:	4b18      	ldr	r3, [pc, #96]	; (80106c8 <_Balloc+0x78>)
 8010668:	4818      	ldr	r0, [pc, #96]	; (80106cc <_Balloc+0x7c>)
 801066a:	2166      	movs	r1, #102	; 0x66
 801066c:	f000 fe2a 	bl	80112c4 <__assert_func>
 8010670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010674:	6006      	str	r6, [r0, #0]
 8010676:	60c6      	str	r6, [r0, #12]
 8010678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801067a:	68f3      	ldr	r3, [r6, #12]
 801067c:	b183      	cbz	r3, 80106a0 <_Balloc+0x50>
 801067e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010686:	b9b8      	cbnz	r0, 80106b8 <_Balloc+0x68>
 8010688:	2101      	movs	r1, #1
 801068a:	fa01 f605 	lsl.w	r6, r1, r5
 801068e:	1d72      	adds	r2, r6, #5
 8010690:	0092      	lsls	r2, r2, #2
 8010692:	4620      	mov	r0, r4
 8010694:	f000 fb60 	bl	8010d58 <_calloc_r>
 8010698:	b160      	cbz	r0, 80106b4 <_Balloc+0x64>
 801069a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801069e:	e00e      	b.n	80106be <_Balloc+0x6e>
 80106a0:	2221      	movs	r2, #33	; 0x21
 80106a2:	2104      	movs	r1, #4
 80106a4:	4620      	mov	r0, r4
 80106a6:	f000 fb57 	bl	8010d58 <_calloc_r>
 80106aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106ac:	60f0      	str	r0, [r6, #12]
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e4      	bne.n	801067e <_Balloc+0x2e>
 80106b4:	2000      	movs	r0, #0
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	6802      	ldr	r2, [r0, #0]
 80106ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106be:	2300      	movs	r3, #0
 80106c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106c4:	e7f7      	b.n	80106b6 <_Balloc+0x66>
 80106c6:	bf00      	nop
 80106c8:	08011625 	.word	0x08011625
 80106cc:	08011708 	.word	0x08011708

080106d0 <_Bfree>:
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106d4:	4605      	mov	r5, r0
 80106d6:	460c      	mov	r4, r1
 80106d8:	b976      	cbnz	r6, 80106f8 <_Bfree+0x28>
 80106da:	2010      	movs	r0, #16
 80106dc:	f7ff ffa2 	bl	8010624 <malloc>
 80106e0:	4602      	mov	r2, r0
 80106e2:	6268      	str	r0, [r5, #36]	; 0x24
 80106e4:	b920      	cbnz	r0, 80106f0 <_Bfree+0x20>
 80106e6:	4b09      	ldr	r3, [pc, #36]	; (801070c <_Bfree+0x3c>)
 80106e8:	4809      	ldr	r0, [pc, #36]	; (8010710 <_Bfree+0x40>)
 80106ea:	218a      	movs	r1, #138	; 0x8a
 80106ec:	f000 fdea 	bl	80112c4 <__assert_func>
 80106f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106f4:	6006      	str	r6, [r0, #0]
 80106f6:	60c6      	str	r6, [r0, #12]
 80106f8:	b13c      	cbz	r4, 801070a <_Bfree+0x3a>
 80106fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80106fc:	6862      	ldr	r2, [r4, #4]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010704:	6021      	str	r1, [r4, #0]
 8010706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801070a:	bd70      	pop	{r4, r5, r6, pc}
 801070c:	08011625 	.word	0x08011625
 8010710:	08011708 	.word	0x08011708

08010714 <__multadd>:
 8010714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010718:	690d      	ldr	r5, [r1, #16]
 801071a:	4607      	mov	r7, r0
 801071c:	460c      	mov	r4, r1
 801071e:	461e      	mov	r6, r3
 8010720:	f101 0c14 	add.w	ip, r1, #20
 8010724:	2000      	movs	r0, #0
 8010726:	f8dc 3000 	ldr.w	r3, [ip]
 801072a:	b299      	uxth	r1, r3
 801072c:	fb02 6101 	mla	r1, r2, r1, r6
 8010730:	0c1e      	lsrs	r6, r3, #16
 8010732:	0c0b      	lsrs	r3, r1, #16
 8010734:	fb02 3306 	mla	r3, r2, r6, r3
 8010738:	b289      	uxth	r1, r1
 801073a:	3001      	adds	r0, #1
 801073c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010740:	4285      	cmp	r5, r0
 8010742:	f84c 1b04 	str.w	r1, [ip], #4
 8010746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801074a:	dcec      	bgt.n	8010726 <__multadd+0x12>
 801074c:	b30e      	cbz	r6, 8010792 <__multadd+0x7e>
 801074e:	68a3      	ldr	r3, [r4, #8]
 8010750:	42ab      	cmp	r3, r5
 8010752:	dc19      	bgt.n	8010788 <__multadd+0x74>
 8010754:	6861      	ldr	r1, [r4, #4]
 8010756:	4638      	mov	r0, r7
 8010758:	3101      	adds	r1, #1
 801075a:	f7ff ff79 	bl	8010650 <_Balloc>
 801075e:	4680      	mov	r8, r0
 8010760:	b928      	cbnz	r0, 801076e <__multadd+0x5a>
 8010762:	4602      	mov	r2, r0
 8010764:	4b0c      	ldr	r3, [pc, #48]	; (8010798 <__multadd+0x84>)
 8010766:	480d      	ldr	r0, [pc, #52]	; (801079c <__multadd+0x88>)
 8010768:	21b5      	movs	r1, #181	; 0xb5
 801076a:	f000 fdab 	bl	80112c4 <__assert_func>
 801076e:	6922      	ldr	r2, [r4, #16]
 8010770:	3202      	adds	r2, #2
 8010772:	f104 010c 	add.w	r1, r4, #12
 8010776:	0092      	lsls	r2, r2, #2
 8010778:	300c      	adds	r0, #12
 801077a:	f7ff ff5b 	bl	8010634 <memcpy>
 801077e:	4621      	mov	r1, r4
 8010780:	4638      	mov	r0, r7
 8010782:	f7ff ffa5 	bl	80106d0 <_Bfree>
 8010786:	4644      	mov	r4, r8
 8010788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801078c:	3501      	adds	r5, #1
 801078e:	615e      	str	r6, [r3, #20]
 8010790:	6125      	str	r5, [r4, #16]
 8010792:	4620      	mov	r0, r4
 8010794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010798:	08011697 	.word	0x08011697
 801079c:	08011708 	.word	0x08011708

080107a0 <__hi0bits>:
 80107a0:	0c03      	lsrs	r3, r0, #16
 80107a2:	041b      	lsls	r3, r3, #16
 80107a4:	b9d3      	cbnz	r3, 80107dc <__hi0bits+0x3c>
 80107a6:	0400      	lsls	r0, r0, #16
 80107a8:	2310      	movs	r3, #16
 80107aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80107ae:	bf04      	itt	eq
 80107b0:	0200      	lsleq	r0, r0, #8
 80107b2:	3308      	addeq	r3, #8
 80107b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80107b8:	bf04      	itt	eq
 80107ba:	0100      	lsleq	r0, r0, #4
 80107bc:	3304      	addeq	r3, #4
 80107be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80107c2:	bf04      	itt	eq
 80107c4:	0080      	lsleq	r0, r0, #2
 80107c6:	3302      	addeq	r3, #2
 80107c8:	2800      	cmp	r0, #0
 80107ca:	db05      	blt.n	80107d8 <__hi0bits+0x38>
 80107cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80107d0:	f103 0301 	add.w	r3, r3, #1
 80107d4:	bf08      	it	eq
 80107d6:	2320      	moveq	r3, #32
 80107d8:	4618      	mov	r0, r3
 80107da:	4770      	bx	lr
 80107dc:	2300      	movs	r3, #0
 80107de:	e7e4      	b.n	80107aa <__hi0bits+0xa>

080107e0 <__lo0bits>:
 80107e0:	6803      	ldr	r3, [r0, #0]
 80107e2:	f013 0207 	ands.w	r2, r3, #7
 80107e6:	4601      	mov	r1, r0
 80107e8:	d00b      	beq.n	8010802 <__lo0bits+0x22>
 80107ea:	07da      	lsls	r2, r3, #31
 80107ec:	d423      	bmi.n	8010836 <__lo0bits+0x56>
 80107ee:	0798      	lsls	r0, r3, #30
 80107f0:	bf49      	itett	mi
 80107f2:	085b      	lsrmi	r3, r3, #1
 80107f4:	089b      	lsrpl	r3, r3, #2
 80107f6:	2001      	movmi	r0, #1
 80107f8:	600b      	strmi	r3, [r1, #0]
 80107fa:	bf5c      	itt	pl
 80107fc:	600b      	strpl	r3, [r1, #0]
 80107fe:	2002      	movpl	r0, #2
 8010800:	4770      	bx	lr
 8010802:	b298      	uxth	r0, r3
 8010804:	b9a8      	cbnz	r0, 8010832 <__lo0bits+0x52>
 8010806:	0c1b      	lsrs	r3, r3, #16
 8010808:	2010      	movs	r0, #16
 801080a:	b2da      	uxtb	r2, r3
 801080c:	b90a      	cbnz	r2, 8010812 <__lo0bits+0x32>
 801080e:	3008      	adds	r0, #8
 8010810:	0a1b      	lsrs	r3, r3, #8
 8010812:	071a      	lsls	r2, r3, #28
 8010814:	bf04      	itt	eq
 8010816:	091b      	lsreq	r3, r3, #4
 8010818:	3004      	addeq	r0, #4
 801081a:	079a      	lsls	r2, r3, #30
 801081c:	bf04      	itt	eq
 801081e:	089b      	lsreq	r3, r3, #2
 8010820:	3002      	addeq	r0, #2
 8010822:	07da      	lsls	r2, r3, #31
 8010824:	d403      	bmi.n	801082e <__lo0bits+0x4e>
 8010826:	085b      	lsrs	r3, r3, #1
 8010828:	f100 0001 	add.w	r0, r0, #1
 801082c:	d005      	beq.n	801083a <__lo0bits+0x5a>
 801082e:	600b      	str	r3, [r1, #0]
 8010830:	4770      	bx	lr
 8010832:	4610      	mov	r0, r2
 8010834:	e7e9      	b.n	801080a <__lo0bits+0x2a>
 8010836:	2000      	movs	r0, #0
 8010838:	4770      	bx	lr
 801083a:	2020      	movs	r0, #32
 801083c:	4770      	bx	lr
	...

08010840 <__i2b>:
 8010840:	b510      	push	{r4, lr}
 8010842:	460c      	mov	r4, r1
 8010844:	2101      	movs	r1, #1
 8010846:	f7ff ff03 	bl	8010650 <_Balloc>
 801084a:	4602      	mov	r2, r0
 801084c:	b928      	cbnz	r0, 801085a <__i2b+0x1a>
 801084e:	4b05      	ldr	r3, [pc, #20]	; (8010864 <__i2b+0x24>)
 8010850:	4805      	ldr	r0, [pc, #20]	; (8010868 <__i2b+0x28>)
 8010852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010856:	f000 fd35 	bl	80112c4 <__assert_func>
 801085a:	2301      	movs	r3, #1
 801085c:	6144      	str	r4, [r0, #20]
 801085e:	6103      	str	r3, [r0, #16]
 8010860:	bd10      	pop	{r4, pc}
 8010862:	bf00      	nop
 8010864:	08011697 	.word	0x08011697
 8010868:	08011708 	.word	0x08011708

0801086c <__multiply>:
 801086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010870:	4691      	mov	r9, r2
 8010872:	690a      	ldr	r2, [r1, #16]
 8010874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010878:	429a      	cmp	r2, r3
 801087a:	bfb8      	it	lt
 801087c:	460b      	movlt	r3, r1
 801087e:	460c      	mov	r4, r1
 8010880:	bfbc      	itt	lt
 8010882:	464c      	movlt	r4, r9
 8010884:	4699      	movlt	r9, r3
 8010886:	6927      	ldr	r7, [r4, #16]
 8010888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801088c:	68a3      	ldr	r3, [r4, #8]
 801088e:	6861      	ldr	r1, [r4, #4]
 8010890:	eb07 060a 	add.w	r6, r7, sl
 8010894:	42b3      	cmp	r3, r6
 8010896:	b085      	sub	sp, #20
 8010898:	bfb8      	it	lt
 801089a:	3101      	addlt	r1, #1
 801089c:	f7ff fed8 	bl	8010650 <_Balloc>
 80108a0:	b930      	cbnz	r0, 80108b0 <__multiply+0x44>
 80108a2:	4602      	mov	r2, r0
 80108a4:	4b44      	ldr	r3, [pc, #272]	; (80109b8 <__multiply+0x14c>)
 80108a6:	4845      	ldr	r0, [pc, #276]	; (80109bc <__multiply+0x150>)
 80108a8:	f240 115d 	movw	r1, #349	; 0x15d
 80108ac:	f000 fd0a 	bl	80112c4 <__assert_func>
 80108b0:	f100 0514 	add.w	r5, r0, #20
 80108b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80108b8:	462b      	mov	r3, r5
 80108ba:	2200      	movs	r2, #0
 80108bc:	4543      	cmp	r3, r8
 80108be:	d321      	bcc.n	8010904 <__multiply+0x98>
 80108c0:	f104 0314 	add.w	r3, r4, #20
 80108c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80108c8:	f109 0314 	add.w	r3, r9, #20
 80108cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80108d0:	9202      	str	r2, [sp, #8]
 80108d2:	1b3a      	subs	r2, r7, r4
 80108d4:	3a15      	subs	r2, #21
 80108d6:	f022 0203 	bic.w	r2, r2, #3
 80108da:	3204      	adds	r2, #4
 80108dc:	f104 0115 	add.w	r1, r4, #21
 80108e0:	428f      	cmp	r7, r1
 80108e2:	bf38      	it	cc
 80108e4:	2204      	movcc	r2, #4
 80108e6:	9201      	str	r2, [sp, #4]
 80108e8:	9a02      	ldr	r2, [sp, #8]
 80108ea:	9303      	str	r3, [sp, #12]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d80c      	bhi.n	801090a <__multiply+0x9e>
 80108f0:	2e00      	cmp	r6, #0
 80108f2:	dd03      	ble.n	80108fc <__multiply+0x90>
 80108f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d05a      	beq.n	80109b2 <__multiply+0x146>
 80108fc:	6106      	str	r6, [r0, #16]
 80108fe:	b005      	add	sp, #20
 8010900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010904:	f843 2b04 	str.w	r2, [r3], #4
 8010908:	e7d8      	b.n	80108bc <__multiply+0x50>
 801090a:	f8b3 a000 	ldrh.w	sl, [r3]
 801090e:	f1ba 0f00 	cmp.w	sl, #0
 8010912:	d024      	beq.n	801095e <__multiply+0xf2>
 8010914:	f104 0e14 	add.w	lr, r4, #20
 8010918:	46a9      	mov	r9, r5
 801091a:	f04f 0c00 	mov.w	ip, #0
 801091e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010922:	f8d9 1000 	ldr.w	r1, [r9]
 8010926:	fa1f fb82 	uxth.w	fp, r2
 801092a:	b289      	uxth	r1, r1
 801092c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010934:	f8d9 2000 	ldr.w	r2, [r9]
 8010938:	4461      	add	r1, ip
 801093a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801093e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010946:	b289      	uxth	r1, r1
 8010948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801094c:	4577      	cmp	r7, lr
 801094e:	f849 1b04 	str.w	r1, [r9], #4
 8010952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010956:	d8e2      	bhi.n	801091e <__multiply+0xb2>
 8010958:	9a01      	ldr	r2, [sp, #4]
 801095a:	f845 c002 	str.w	ip, [r5, r2]
 801095e:	9a03      	ldr	r2, [sp, #12]
 8010960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010964:	3304      	adds	r3, #4
 8010966:	f1b9 0f00 	cmp.w	r9, #0
 801096a:	d020      	beq.n	80109ae <__multiply+0x142>
 801096c:	6829      	ldr	r1, [r5, #0]
 801096e:	f104 0c14 	add.w	ip, r4, #20
 8010972:	46ae      	mov	lr, r5
 8010974:	f04f 0a00 	mov.w	sl, #0
 8010978:	f8bc b000 	ldrh.w	fp, [ip]
 801097c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010980:	fb09 220b 	mla	r2, r9, fp, r2
 8010984:	4492      	add	sl, r2
 8010986:	b289      	uxth	r1, r1
 8010988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801098c:	f84e 1b04 	str.w	r1, [lr], #4
 8010990:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010994:	f8be 1000 	ldrh.w	r1, [lr]
 8010998:	0c12      	lsrs	r2, r2, #16
 801099a:	fb09 1102 	mla	r1, r9, r2, r1
 801099e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80109a2:	4567      	cmp	r7, ip
 80109a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80109a8:	d8e6      	bhi.n	8010978 <__multiply+0x10c>
 80109aa:	9a01      	ldr	r2, [sp, #4]
 80109ac:	50a9      	str	r1, [r5, r2]
 80109ae:	3504      	adds	r5, #4
 80109b0:	e79a      	b.n	80108e8 <__multiply+0x7c>
 80109b2:	3e01      	subs	r6, #1
 80109b4:	e79c      	b.n	80108f0 <__multiply+0x84>
 80109b6:	bf00      	nop
 80109b8:	08011697 	.word	0x08011697
 80109bc:	08011708 	.word	0x08011708

080109c0 <__pow5mult>:
 80109c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109c4:	4615      	mov	r5, r2
 80109c6:	f012 0203 	ands.w	r2, r2, #3
 80109ca:	4606      	mov	r6, r0
 80109cc:	460f      	mov	r7, r1
 80109ce:	d007      	beq.n	80109e0 <__pow5mult+0x20>
 80109d0:	4c25      	ldr	r4, [pc, #148]	; (8010a68 <__pow5mult+0xa8>)
 80109d2:	3a01      	subs	r2, #1
 80109d4:	2300      	movs	r3, #0
 80109d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109da:	f7ff fe9b 	bl	8010714 <__multadd>
 80109de:	4607      	mov	r7, r0
 80109e0:	10ad      	asrs	r5, r5, #2
 80109e2:	d03d      	beq.n	8010a60 <__pow5mult+0xa0>
 80109e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80109e6:	b97c      	cbnz	r4, 8010a08 <__pow5mult+0x48>
 80109e8:	2010      	movs	r0, #16
 80109ea:	f7ff fe1b 	bl	8010624 <malloc>
 80109ee:	4602      	mov	r2, r0
 80109f0:	6270      	str	r0, [r6, #36]	; 0x24
 80109f2:	b928      	cbnz	r0, 8010a00 <__pow5mult+0x40>
 80109f4:	4b1d      	ldr	r3, [pc, #116]	; (8010a6c <__pow5mult+0xac>)
 80109f6:	481e      	ldr	r0, [pc, #120]	; (8010a70 <__pow5mult+0xb0>)
 80109f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80109fc:	f000 fc62 	bl	80112c4 <__assert_func>
 8010a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a04:	6004      	str	r4, [r0, #0]
 8010a06:	60c4      	str	r4, [r0, #12]
 8010a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a10:	b94c      	cbnz	r4, 8010a26 <__pow5mult+0x66>
 8010a12:	f240 2171 	movw	r1, #625	; 0x271
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7ff ff12 	bl	8010840 <__i2b>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a22:	4604      	mov	r4, r0
 8010a24:	6003      	str	r3, [r0, #0]
 8010a26:	f04f 0900 	mov.w	r9, #0
 8010a2a:	07eb      	lsls	r3, r5, #31
 8010a2c:	d50a      	bpl.n	8010a44 <__pow5mult+0x84>
 8010a2e:	4639      	mov	r1, r7
 8010a30:	4622      	mov	r2, r4
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7ff ff1a 	bl	801086c <__multiply>
 8010a38:	4639      	mov	r1, r7
 8010a3a:	4680      	mov	r8, r0
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7ff fe47 	bl	80106d0 <_Bfree>
 8010a42:	4647      	mov	r7, r8
 8010a44:	106d      	asrs	r5, r5, #1
 8010a46:	d00b      	beq.n	8010a60 <__pow5mult+0xa0>
 8010a48:	6820      	ldr	r0, [r4, #0]
 8010a4a:	b938      	cbnz	r0, 8010a5c <__pow5mult+0x9c>
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	4621      	mov	r1, r4
 8010a50:	4630      	mov	r0, r6
 8010a52:	f7ff ff0b 	bl	801086c <__multiply>
 8010a56:	6020      	str	r0, [r4, #0]
 8010a58:	f8c0 9000 	str.w	r9, [r0]
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	e7e4      	b.n	8010a2a <__pow5mult+0x6a>
 8010a60:	4638      	mov	r0, r7
 8010a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a66:	bf00      	nop
 8010a68:	08011858 	.word	0x08011858
 8010a6c:	08011625 	.word	0x08011625
 8010a70:	08011708 	.word	0x08011708

08010a74 <__lshift>:
 8010a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a78:	460c      	mov	r4, r1
 8010a7a:	6849      	ldr	r1, [r1, #4]
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a82:	68a3      	ldr	r3, [r4, #8]
 8010a84:	4607      	mov	r7, r0
 8010a86:	4691      	mov	r9, r2
 8010a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a8c:	f108 0601 	add.w	r6, r8, #1
 8010a90:	42b3      	cmp	r3, r6
 8010a92:	db0b      	blt.n	8010aac <__lshift+0x38>
 8010a94:	4638      	mov	r0, r7
 8010a96:	f7ff fddb 	bl	8010650 <_Balloc>
 8010a9a:	4605      	mov	r5, r0
 8010a9c:	b948      	cbnz	r0, 8010ab2 <__lshift+0x3e>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	4b2a      	ldr	r3, [pc, #168]	; (8010b4c <__lshift+0xd8>)
 8010aa2:	482b      	ldr	r0, [pc, #172]	; (8010b50 <__lshift+0xdc>)
 8010aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010aa8:	f000 fc0c 	bl	80112c4 <__assert_func>
 8010aac:	3101      	adds	r1, #1
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	e7ee      	b.n	8010a90 <__lshift+0x1c>
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	f100 0114 	add.w	r1, r0, #20
 8010ab8:	f100 0210 	add.w	r2, r0, #16
 8010abc:	4618      	mov	r0, r3
 8010abe:	4553      	cmp	r3, sl
 8010ac0:	db37      	blt.n	8010b32 <__lshift+0xbe>
 8010ac2:	6920      	ldr	r0, [r4, #16]
 8010ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ac8:	f104 0314 	add.w	r3, r4, #20
 8010acc:	f019 091f 	ands.w	r9, r9, #31
 8010ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ad8:	d02f      	beq.n	8010b3a <__lshift+0xc6>
 8010ada:	f1c9 0e20 	rsb	lr, r9, #32
 8010ade:	468a      	mov	sl, r1
 8010ae0:	f04f 0c00 	mov.w	ip, #0
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	fa02 f209 	lsl.w	r2, r2, r9
 8010aea:	ea42 020c 	orr.w	r2, r2, ip
 8010aee:	f84a 2b04 	str.w	r2, [sl], #4
 8010af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010af6:	4298      	cmp	r0, r3
 8010af8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010afc:	d8f2      	bhi.n	8010ae4 <__lshift+0x70>
 8010afe:	1b03      	subs	r3, r0, r4
 8010b00:	3b15      	subs	r3, #21
 8010b02:	f023 0303 	bic.w	r3, r3, #3
 8010b06:	3304      	adds	r3, #4
 8010b08:	f104 0215 	add.w	r2, r4, #21
 8010b0c:	4290      	cmp	r0, r2
 8010b0e:	bf38      	it	cc
 8010b10:	2304      	movcc	r3, #4
 8010b12:	f841 c003 	str.w	ip, [r1, r3]
 8010b16:	f1bc 0f00 	cmp.w	ip, #0
 8010b1a:	d001      	beq.n	8010b20 <__lshift+0xac>
 8010b1c:	f108 0602 	add.w	r6, r8, #2
 8010b20:	3e01      	subs	r6, #1
 8010b22:	4638      	mov	r0, r7
 8010b24:	612e      	str	r6, [r5, #16]
 8010b26:	4621      	mov	r1, r4
 8010b28:	f7ff fdd2 	bl	80106d0 <_Bfree>
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b36:	3301      	adds	r3, #1
 8010b38:	e7c1      	b.n	8010abe <__lshift+0x4a>
 8010b3a:	3904      	subs	r1, #4
 8010b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b44:	4298      	cmp	r0, r3
 8010b46:	d8f9      	bhi.n	8010b3c <__lshift+0xc8>
 8010b48:	e7ea      	b.n	8010b20 <__lshift+0xac>
 8010b4a:	bf00      	nop
 8010b4c:	08011697 	.word	0x08011697
 8010b50:	08011708 	.word	0x08011708

08010b54 <__mcmp>:
 8010b54:	b530      	push	{r4, r5, lr}
 8010b56:	6902      	ldr	r2, [r0, #16]
 8010b58:	690c      	ldr	r4, [r1, #16]
 8010b5a:	1b12      	subs	r2, r2, r4
 8010b5c:	d10e      	bne.n	8010b7c <__mcmp+0x28>
 8010b5e:	f100 0314 	add.w	r3, r0, #20
 8010b62:	3114      	adds	r1, #20
 8010b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010b74:	42a5      	cmp	r5, r4
 8010b76:	d003      	beq.n	8010b80 <__mcmp+0x2c>
 8010b78:	d305      	bcc.n	8010b86 <__mcmp+0x32>
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	4610      	mov	r0, r2
 8010b7e:	bd30      	pop	{r4, r5, pc}
 8010b80:	4283      	cmp	r3, r0
 8010b82:	d3f3      	bcc.n	8010b6c <__mcmp+0x18>
 8010b84:	e7fa      	b.n	8010b7c <__mcmp+0x28>
 8010b86:	f04f 32ff 	mov.w	r2, #4294967295
 8010b8a:	e7f7      	b.n	8010b7c <__mcmp+0x28>

08010b8c <__mdiff>:
 8010b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	460c      	mov	r4, r1
 8010b92:	4606      	mov	r6, r0
 8010b94:	4611      	mov	r1, r2
 8010b96:	4620      	mov	r0, r4
 8010b98:	4690      	mov	r8, r2
 8010b9a:	f7ff ffdb 	bl	8010b54 <__mcmp>
 8010b9e:	1e05      	subs	r5, r0, #0
 8010ba0:	d110      	bne.n	8010bc4 <__mdiff+0x38>
 8010ba2:	4629      	mov	r1, r5
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f7ff fd53 	bl	8010650 <_Balloc>
 8010baa:	b930      	cbnz	r0, 8010bba <__mdiff+0x2e>
 8010bac:	4b3a      	ldr	r3, [pc, #232]	; (8010c98 <__mdiff+0x10c>)
 8010bae:	4602      	mov	r2, r0
 8010bb0:	f240 2132 	movw	r1, #562	; 0x232
 8010bb4:	4839      	ldr	r0, [pc, #228]	; (8010c9c <__mdiff+0x110>)
 8010bb6:	f000 fb85 	bl	80112c4 <__assert_func>
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc4:	bfa4      	itt	ge
 8010bc6:	4643      	movge	r3, r8
 8010bc8:	46a0      	movge	r8, r4
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010bd0:	bfa6      	itte	ge
 8010bd2:	461c      	movge	r4, r3
 8010bd4:	2500      	movge	r5, #0
 8010bd6:	2501      	movlt	r5, #1
 8010bd8:	f7ff fd3a 	bl	8010650 <_Balloc>
 8010bdc:	b920      	cbnz	r0, 8010be8 <__mdiff+0x5c>
 8010bde:	4b2e      	ldr	r3, [pc, #184]	; (8010c98 <__mdiff+0x10c>)
 8010be0:	4602      	mov	r2, r0
 8010be2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010be6:	e7e5      	b.n	8010bb4 <__mdiff+0x28>
 8010be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010bec:	6926      	ldr	r6, [r4, #16]
 8010bee:	60c5      	str	r5, [r0, #12]
 8010bf0:	f104 0914 	add.w	r9, r4, #20
 8010bf4:	f108 0514 	add.w	r5, r8, #20
 8010bf8:	f100 0e14 	add.w	lr, r0, #20
 8010bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c04:	f108 0210 	add.w	r2, r8, #16
 8010c08:	46f2      	mov	sl, lr
 8010c0a:	2100      	movs	r1, #0
 8010c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c14:	fa1f f883 	uxth.w	r8, r3
 8010c18:	fa11 f18b 	uxtah	r1, r1, fp
 8010c1c:	0c1b      	lsrs	r3, r3, #16
 8010c1e:	eba1 0808 	sub.w	r8, r1, r8
 8010c22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c2a:	fa1f f888 	uxth.w	r8, r8
 8010c2e:	1419      	asrs	r1, r3, #16
 8010c30:	454e      	cmp	r6, r9
 8010c32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010c36:	f84a 3b04 	str.w	r3, [sl], #4
 8010c3a:	d8e7      	bhi.n	8010c0c <__mdiff+0x80>
 8010c3c:	1b33      	subs	r3, r6, r4
 8010c3e:	3b15      	subs	r3, #21
 8010c40:	f023 0303 	bic.w	r3, r3, #3
 8010c44:	3304      	adds	r3, #4
 8010c46:	3415      	adds	r4, #21
 8010c48:	42a6      	cmp	r6, r4
 8010c4a:	bf38      	it	cc
 8010c4c:	2304      	movcc	r3, #4
 8010c4e:	441d      	add	r5, r3
 8010c50:	4473      	add	r3, lr
 8010c52:	469e      	mov	lr, r3
 8010c54:	462e      	mov	r6, r5
 8010c56:	4566      	cmp	r6, ip
 8010c58:	d30e      	bcc.n	8010c78 <__mdiff+0xec>
 8010c5a:	f10c 0203 	add.w	r2, ip, #3
 8010c5e:	1b52      	subs	r2, r2, r5
 8010c60:	f022 0203 	bic.w	r2, r2, #3
 8010c64:	3d03      	subs	r5, #3
 8010c66:	45ac      	cmp	ip, r5
 8010c68:	bf38      	it	cc
 8010c6a:	2200      	movcc	r2, #0
 8010c6c:	441a      	add	r2, r3
 8010c6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010c72:	b17b      	cbz	r3, 8010c94 <__mdiff+0x108>
 8010c74:	6107      	str	r7, [r0, #16]
 8010c76:	e7a3      	b.n	8010bc0 <__mdiff+0x34>
 8010c78:	f856 8b04 	ldr.w	r8, [r6], #4
 8010c7c:	fa11 f288 	uxtah	r2, r1, r8
 8010c80:	1414      	asrs	r4, r2, #16
 8010c82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010c86:	b292      	uxth	r2, r2
 8010c88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010c8c:	f84e 2b04 	str.w	r2, [lr], #4
 8010c90:	1421      	asrs	r1, r4, #16
 8010c92:	e7e0      	b.n	8010c56 <__mdiff+0xca>
 8010c94:	3f01      	subs	r7, #1
 8010c96:	e7ea      	b.n	8010c6e <__mdiff+0xe2>
 8010c98:	08011697 	.word	0x08011697
 8010c9c:	08011708 	.word	0x08011708

08010ca0 <__d2b>:
 8010ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ca4:	4689      	mov	r9, r1
 8010ca6:	2101      	movs	r1, #1
 8010ca8:	ec57 6b10 	vmov	r6, r7, d0
 8010cac:	4690      	mov	r8, r2
 8010cae:	f7ff fccf 	bl	8010650 <_Balloc>
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	b930      	cbnz	r0, 8010cc4 <__d2b+0x24>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	4b25      	ldr	r3, [pc, #148]	; (8010d50 <__d2b+0xb0>)
 8010cba:	4826      	ldr	r0, [pc, #152]	; (8010d54 <__d2b+0xb4>)
 8010cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8010cc0:	f000 fb00 	bl	80112c4 <__assert_func>
 8010cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ccc:	bb35      	cbnz	r5, 8010d1c <__d2b+0x7c>
 8010cce:	2e00      	cmp	r6, #0
 8010cd0:	9301      	str	r3, [sp, #4]
 8010cd2:	d028      	beq.n	8010d26 <__d2b+0x86>
 8010cd4:	4668      	mov	r0, sp
 8010cd6:	9600      	str	r6, [sp, #0]
 8010cd8:	f7ff fd82 	bl	80107e0 <__lo0bits>
 8010cdc:	9900      	ldr	r1, [sp, #0]
 8010cde:	b300      	cbz	r0, 8010d22 <__d2b+0x82>
 8010ce0:	9a01      	ldr	r2, [sp, #4]
 8010ce2:	f1c0 0320 	rsb	r3, r0, #32
 8010ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8010cea:	430b      	orrs	r3, r1
 8010cec:	40c2      	lsrs	r2, r0
 8010cee:	6163      	str	r3, [r4, #20]
 8010cf0:	9201      	str	r2, [sp, #4]
 8010cf2:	9b01      	ldr	r3, [sp, #4]
 8010cf4:	61a3      	str	r3, [r4, #24]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	bf14      	ite	ne
 8010cfa:	2202      	movne	r2, #2
 8010cfc:	2201      	moveq	r2, #1
 8010cfe:	6122      	str	r2, [r4, #16]
 8010d00:	b1d5      	cbz	r5, 8010d38 <__d2b+0x98>
 8010d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d06:	4405      	add	r5, r0
 8010d08:	f8c9 5000 	str.w	r5, [r9]
 8010d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d10:	f8c8 0000 	str.w	r0, [r8]
 8010d14:	4620      	mov	r0, r4
 8010d16:	b003      	add	sp, #12
 8010d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d20:	e7d5      	b.n	8010cce <__d2b+0x2e>
 8010d22:	6161      	str	r1, [r4, #20]
 8010d24:	e7e5      	b.n	8010cf2 <__d2b+0x52>
 8010d26:	a801      	add	r0, sp, #4
 8010d28:	f7ff fd5a 	bl	80107e0 <__lo0bits>
 8010d2c:	9b01      	ldr	r3, [sp, #4]
 8010d2e:	6163      	str	r3, [r4, #20]
 8010d30:	2201      	movs	r2, #1
 8010d32:	6122      	str	r2, [r4, #16]
 8010d34:	3020      	adds	r0, #32
 8010d36:	e7e3      	b.n	8010d00 <__d2b+0x60>
 8010d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d40:	f8c9 0000 	str.w	r0, [r9]
 8010d44:	6918      	ldr	r0, [r3, #16]
 8010d46:	f7ff fd2b 	bl	80107a0 <__hi0bits>
 8010d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d4e:	e7df      	b.n	8010d10 <__d2b+0x70>
 8010d50:	08011697 	.word	0x08011697
 8010d54:	08011708 	.word	0x08011708

08010d58 <_calloc_r>:
 8010d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d5a:	fba1 2402 	umull	r2, r4, r1, r2
 8010d5e:	b94c      	cbnz	r4, 8010d74 <_calloc_r+0x1c>
 8010d60:	4611      	mov	r1, r2
 8010d62:	9201      	str	r2, [sp, #4]
 8010d64:	f000 f87a 	bl	8010e5c <_malloc_r>
 8010d68:	9a01      	ldr	r2, [sp, #4]
 8010d6a:	4605      	mov	r5, r0
 8010d6c:	b930      	cbnz	r0, 8010d7c <_calloc_r+0x24>
 8010d6e:	4628      	mov	r0, r5
 8010d70:	b003      	add	sp, #12
 8010d72:	bd30      	pop	{r4, r5, pc}
 8010d74:	220c      	movs	r2, #12
 8010d76:	6002      	str	r2, [r0, #0]
 8010d78:	2500      	movs	r5, #0
 8010d7a:	e7f8      	b.n	8010d6e <_calloc_r+0x16>
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	f7fd fdf1 	bl	800e964 <memset>
 8010d82:	e7f4      	b.n	8010d6e <_calloc_r+0x16>

08010d84 <_free_r>:
 8010d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d86:	2900      	cmp	r1, #0
 8010d88:	d044      	beq.n	8010e14 <_free_r+0x90>
 8010d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d8e:	9001      	str	r0, [sp, #4]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f1a1 0404 	sub.w	r4, r1, #4
 8010d96:	bfb8      	it	lt
 8010d98:	18e4      	addlt	r4, r4, r3
 8010d9a:	f000 fb19 	bl	80113d0 <__malloc_lock>
 8010d9e:	4a1e      	ldr	r2, [pc, #120]	; (8010e18 <_free_r+0x94>)
 8010da0:	9801      	ldr	r0, [sp, #4]
 8010da2:	6813      	ldr	r3, [r2, #0]
 8010da4:	b933      	cbnz	r3, 8010db4 <_free_r+0x30>
 8010da6:	6063      	str	r3, [r4, #4]
 8010da8:	6014      	str	r4, [r2, #0]
 8010daa:	b003      	add	sp, #12
 8010dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010db0:	f000 bb14 	b.w	80113dc <__malloc_unlock>
 8010db4:	42a3      	cmp	r3, r4
 8010db6:	d908      	bls.n	8010dca <_free_r+0x46>
 8010db8:	6825      	ldr	r5, [r4, #0]
 8010dba:	1961      	adds	r1, r4, r5
 8010dbc:	428b      	cmp	r3, r1
 8010dbe:	bf01      	itttt	eq
 8010dc0:	6819      	ldreq	r1, [r3, #0]
 8010dc2:	685b      	ldreq	r3, [r3, #4]
 8010dc4:	1949      	addeq	r1, r1, r5
 8010dc6:	6021      	streq	r1, [r4, #0]
 8010dc8:	e7ed      	b.n	8010da6 <_free_r+0x22>
 8010dca:	461a      	mov	r2, r3
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	b10b      	cbz	r3, 8010dd4 <_free_r+0x50>
 8010dd0:	42a3      	cmp	r3, r4
 8010dd2:	d9fa      	bls.n	8010dca <_free_r+0x46>
 8010dd4:	6811      	ldr	r1, [r2, #0]
 8010dd6:	1855      	adds	r5, r2, r1
 8010dd8:	42a5      	cmp	r5, r4
 8010dda:	d10b      	bne.n	8010df4 <_free_r+0x70>
 8010ddc:	6824      	ldr	r4, [r4, #0]
 8010dde:	4421      	add	r1, r4
 8010de0:	1854      	adds	r4, r2, r1
 8010de2:	42a3      	cmp	r3, r4
 8010de4:	6011      	str	r1, [r2, #0]
 8010de6:	d1e0      	bne.n	8010daa <_free_r+0x26>
 8010de8:	681c      	ldr	r4, [r3, #0]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	6053      	str	r3, [r2, #4]
 8010dee:	4421      	add	r1, r4
 8010df0:	6011      	str	r1, [r2, #0]
 8010df2:	e7da      	b.n	8010daa <_free_r+0x26>
 8010df4:	d902      	bls.n	8010dfc <_free_r+0x78>
 8010df6:	230c      	movs	r3, #12
 8010df8:	6003      	str	r3, [r0, #0]
 8010dfa:	e7d6      	b.n	8010daa <_free_r+0x26>
 8010dfc:	6825      	ldr	r5, [r4, #0]
 8010dfe:	1961      	adds	r1, r4, r5
 8010e00:	428b      	cmp	r3, r1
 8010e02:	bf04      	itt	eq
 8010e04:	6819      	ldreq	r1, [r3, #0]
 8010e06:	685b      	ldreq	r3, [r3, #4]
 8010e08:	6063      	str	r3, [r4, #4]
 8010e0a:	bf04      	itt	eq
 8010e0c:	1949      	addeq	r1, r1, r5
 8010e0e:	6021      	streq	r1, [r4, #0]
 8010e10:	6054      	str	r4, [r2, #4]
 8010e12:	e7ca      	b.n	8010daa <_free_r+0x26>
 8010e14:	b003      	add	sp, #12
 8010e16:	bd30      	pop	{r4, r5, pc}
 8010e18:	200021c8 	.word	0x200021c8

08010e1c <sbrk_aligned>:
 8010e1c:	b570      	push	{r4, r5, r6, lr}
 8010e1e:	4e0e      	ldr	r6, [pc, #56]	; (8010e58 <sbrk_aligned+0x3c>)
 8010e20:	460c      	mov	r4, r1
 8010e22:	6831      	ldr	r1, [r6, #0]
 8010e24:	4605      	mov	r5, r0
 8010e26:	b911      	cbnz	r1, 8010e2e <sbrk_aligned+0x12>
 8010e28:	f000 f9e6 	bl	80111f8 <_sbrk_r>
 8010e2c:	6030      	str	r0, [r6, #0]
 8010e2e:	4621      	mov	r1, r4
 8010e30:	4628      	mov	r0, r5
 8010e32:	f000 f9e1 	bl	80111f8 <_sbrk_r>
 8010e36:	1c43      	adds	r3, r0, #1
 8010e38:	d00a      	beq.n	8010e50 <sbrk_aligned+0x34>
 8010e3a:	1cc4      	adds	r4, r0, #3
 8010e3c:	f024 0403 	bic.w	r4, r4, #3
 8010e40:	42a0      	cmp	r0, r4
 8010e42:	d007      	beq.n	8010e54 <sbrk_aligned+0x38>
 8010e44:	1a21      	subs	r1, r4, r0
 8010e46:	4628      	mov	r0, r5
 8010e48:	f000 f9d6 	bl	80111f8 <_sbrk_r>
 8010e4c:	3001      	adds	r0, #1
 8010e4e:	d101      	bne.n	8010e54 <sbrk_aligned+0x38>
 8010e50:	f04f 34ff 	mov.w	r4, #4294967295
 8010e54:	4620      	mov	r0, r4
 8010e56:	bd70      	pop	{r4, r5, r6, pc}
 8010e58:	200021cc 	.word	0x200021cc

08010e5c <_malloc_r>:
 8010e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e60:	1ccd      	adds	r5, r1, #3
 8010e62:	f025 0503 	bic.w	r5, r5, #3
 8010e66:	3508      	adds	r5, #8
 8010e68:	2d0c      	cmp	r5, #12
 8010e6a:	bf38      	it	cc
 8010e6c:	250c      	movcc	r5, #12
 8010e6e:	2d00      	cmp	r5, #0
 8010e70:	4607      	mov	r7, r0
 8010e72:	db01      	blt.n	8010e78 <_malloc_r+0x1c>
 8010e74:	42a9      	cmp	r1, r5
 8010e76:	d905      	bls.n	8010e84 <_malloc_r+0x28>
 8010e78:	230c      	movs	r3, #12
 8010e7a:	603b      	str	r3, [r7, #0]
 8010e7c:	2600      	movs	r6, #0
 8010e7e:	4630      	mov	r0, r6
 8010e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e84:	4e2e      	ldr	r6, [pc, #184]	; (8010f40 <_malloc_r+0xe4>)
 8010e86:	f000 faa3 	bl	80113d0 <__malloc_lock>
 8010e8a:	6833      	ldr	r3, [r6, #0]
 8010e8c:	461c      	mov	r4, r3
 8010e8e:	bb34      	cbnz	r4, 8010ede <_malloc_r+0x82>
 8010e90:	4629      	mov	r1, r5
 8010e92:	4638      	mov	r0, r7
 8010e94:	f7ff ffc2 	bl	8010e1c <sbrk_aligned>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	d14d      	bne.n	8010f3a <_malloc_r+0xde>
 8010e9e:	6834      	ldr	r4, [r6, #0]
 8010ea0:	4626      	mov	r6, r4
 8010ea2:	2e00      	cmp	r6, #0
 8010ea4:	d140      	bne.n	8010f28 <_malloc_r+0xcc>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	4631      	mov	r1, r6
 8010eaa:	4638      	mov	r0, r7
 8010eac:	eb04 0803 	add.w	r8, r4, r3
 8010eb0:	f000 f9a2 	bl	80111f8 <_sbrk_r>
 8010eb4:	4580      	cmp	r8, r0
 8010eb6:	d13a      	bne.n	8010f2e <_malloc_r+0xd2>
 8010eb8:	6821      	ldr	r1, [r4, #0]
 8010eba:	3503      	adds	r5, #3
 8010ebc:	1a6d      	subs	r5, r5, r1
 8010ebe:	f025 0503 	bic.w	r5, r5, #3
 8010ec2:	3508      	adds	r5, #8
 8010ec4:	2d0c      	cmp	r5, #12
 8010ec6:	bf38      	it	cc
 8010ec8:	250c      	movcc	r5, #12
 8010eca:	4629      	mov	r1, r5
 8010ecc:	4638      	mov	r0, r7
 8010ece:	f7ff ffa5 	bl	8010e1c <sbrk_aligned>
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	d02b      	beq.n	8010f2e <_malloc_r+0xd2>
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	442b      	add	r3, r5
 8010eda:	6023      	str	r3, [r4, #0]
 8010edc:	e00e      	b.n	8010efc <_malloc_r+0xa0>
 8010ede:	6822      	ldr	r2, [r4, #0]
 8010ee0:	1b52      	subs	r2, r2, r5
 8010ee2:	d41e      	bmi.n	8010f22 <_malloc_r+0xc6>
 8010ee4:	2a0b      	cmp	r2, #11
 8010ee6:	d916      	bls.n	8010f16 <_malloc_r+0xba>
 8010ee8:	1961      	adds	r1, r4, r5
 8010eea:	42a3      	cmp	r3, r4
 8010eec:	6025      	str	r5, [r4, #0]
 8010eee:	bf18      	it	ne
 8010ef0:	6059      	strne	r1, [r3, #4]
 8010ef2:	6863      	ldr	r3, [r4, #4]
 8010ef4:	bf08      	it	eq
 8010ef6:	6031      	streq	r1, [r6, #0]
 8010ef8:	5162      	str	r2, [r4, r5]
 8010efa:	604b      	str	r3, [r1, #4]
 8010efc:	4638      	mov	r0, r7
 8010efe:	f104 060b 	add.w	r6, r4, #11
 8010f02:	f000 fa6b 	bl	80113dc <__malloc_unlock>
 8010f06:	f026 0607 	bic.w	r6, r6, #7
 8010f0a:	1d23      	adds	r3, r4, #4
 8010f0c:	1af2      	subs	r2, r6, r3
 8010f0e:	d0b6      	beq.n	8010e7e <_malloc_r+0x22>
 8010f10:	1b9b      	subs	r3, r3, r6
 8010f12:	50a3      	str	r3, [r4, r2]
 8010f14:	e7b3      	b.n	8010e7e <_malloc_r+0x22>
 8010f16:	6862      	ldr	r2, [r4, #4]
 8010f18:	42a3      	cmp	r3, r4
 8010f1a:	bf0c      	ite	eq
 8010f1c:	6032      	streq	r2, [r6, #0]
 8010f1e:	605a      	strne	r2, [r3, #4]
 8010f20:	e7ec      	b.n	8010efc <_malloc_r+0xa0>
 8010f22:	4623      	mov	r3, r4
 8010f24:	6864      	ldr	r4, [r4, #4]
 8010f26:	e7b2      	b.n	8010e8e <_malloc_r+0x32>
 8010f28:	4634      	mov	r4, r6
 8010f2a:	6876      	ldr	r6, [r6, #4]
 8010f2c:	e7b9      	b.n	8010ea2 <_malloc_r+0x46>
 8010f2e:	230c      	movs	r3, #12
 8010f30:	603b      	str	r3, [r7, #0]
 8010f32:	4638      	mov	r0, r7
 8010f34:	f000 fa52 	bl	80113dc <__malloc_unlock>
 8010f38:	e7a1      	b.n	8010e7e <_malloc_r+0x22>
 8010f3a:	6025      	str	r5, [r4, #0]
 8010f3c:	e7de      	b.n	8010efc <_malloc_r+0xa0>
 8010f3e:	bf00      	nop
 8010f40:	200021c8 	.word	0x200021c8

08010f44 <__sfputc_r>:
 8010f44:	6893      	ldr	r3, [r2, #8]
 8010f46:	3b01      	subs	r3, #1
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	b410      	push	{r4}
 8010f4c:	6093      	str	r3, [r2, #8]
 8010f4e:	da08      	bge.n	8010f62 <__sfputc_r+0x1e>
 8010f50:	6994      	ldr	r4, [r2, #24]
 8010f52:	42a3      	cmp	r3, r4
 8010f54:	db01      	blt.n	8010f5a <__sfputc_r+0x16>
 8010f56:	290a      	cmp	r1, #10
 8010f58:	d103      	bne.n	8010f62 <__sfputc_r+0x1e>
 8010f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f5e:	f7fe ba01 	b.w	800f364 <__swbuf_r>
 8010f62:	6813      	ldr	r3, [r2, #0]
 8010f64:	1c58      	adds	r0, r3, #1
 8010f66:	6010      	str	r0, [r2, #0]
 8010f68:	7019      	strb	r1, [r3, #0]
 8010f6a:	4608      	mov	r0, r1
 8010f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <__sfputs_r>:
 8010f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f74:	4606      	mov	r6, r0
 8010f76:	460f      	mov	r7, r1
 8010f78:	4614      	mov	r4, r2
 8010f7a:	18d5      	adds	r5, r2, r3
 8010f7c:	42ac      	cmp	r4, r5
 8010f7e:	d101      	bne.n	8010f84 <__sfputs_r+0x12>
 8010f80:	2000      	movs	r0, #0
 8010f82:	e007      	b.n	8010f94 <__sfputs_r+0x22>
 8010f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f88:	463a      	mov	r2, r7
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7ff ffda 	bl	8010f44 <__sfputc_r>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d1f3      	bne.n	8010f7c <__sfputs_r+0xa>
 8010f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f98 <_vfiprintf_r>:
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	460d      	mov	r5, r1
 8010f9e:	b09d      	sub	sp, #116	; 0x74
 8010fa0:	4614      	mov	r4, r2
 8010fa2:	4698      	mov	r8, r3
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	b118      	cbz	r0, 8010fb0 <_vfiprintf_r+0x18>
 8010fa8:	6983      	ldr	r3, [r0, #24]
 8010faa:	b90b      	cbnz	r3, 8010fb0 <_vfiprintf_r+0x18>
 8010fac:	f7ff fa30 	bl	8010410 <__sinit>
 8010fb0:	4b89      	ldr	r3, [pc, #548]	; (80111d8 <_vfiprintf_r+0x240>)
 8010fb2:	429d      	cmp	r5, r3
 8010fb4:	d11b      	bne.n	8010fee <_vfiprintf_r+0x56>
 8010fb6:	6875      	ldr	r5, [r6, #4]
 8010fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fba:	07d9      	lsls	r1, r3, #31
 8010fbc:	d405      	bmi.n	8010fca <_vfiprintf_r+0x32>
 8010fbe:	89ab      	ldrh	r3, [r5, #12]
 8010fc0:	059a      	lsls	r2, r3, #22
 8010fc2:	d402      	bmi.n	8010fca <_vfiprintf_r+0x32>
 8010fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fc6:	f7ff fac6 	bl	8010556 <__retarget_lock_acquire_recursive>
 8010fca:	89ab      	ldrh	r3, [r5, #12]
 8010fcc:	071b      	lsls	r3, r3, #28
 8010fce:	d501      	bpl.n	8010fd4 <_vfiprintf_r+0x3c>
 8010fd0:	692b      	ldr	r3, [r5, #16]
 8010fd2:	b9eb      	cbnz	r3, 8011010 <_vfiprintf_r+0x78>
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7fe fa16 	bl	800f408 <__swsetup_r>
 8010fdc:	b1c0      	cbz	r0, 8011010 <_vfiprintf_r+0x78>
 8010fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fe0:	07dc      	lsls	r4, r3, #31
 8010fe2:	d50e      	bpl.n	8011002 <_vfiprintf_r+0x6a>
 8010fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe8:	b01d      	add	sp, #116	; 0x74
 8010fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fee:	4b7b      	ldr	r3, [pc, #492]	; (80111dc <_vfiprintf_r+0x244>)
 8010ff0:	429d      	cmp	r5, r3
 8010ff2:	d101      	bne.n	8010ff8 <_vfiprintf_r+0x60>
 8010ff4:	68b5      	ldr	r5, [r6, #8]
 8010ff6:	e7df      	b.n	8010fb8 <_vfiprintf_r+0x20>
 8010ff8:	4b79      	ldr	r3, [pc, #484]	; (80111e0 <_vfiprintf_r+0x248>)
 8010ffa:	429d      	cmp	r5, r3
 8010ffc:	bf08      	it	eq
 8010ffe:	68f5      	ldreq	r5, [r6, #12]
 8011000:	e7da      	b.n	8010fb8 <_vfiprintf_r+0x20>
 8011002:	89ab      	ldrh	r3, [r5, #12]
 8011004:	0598      	lsls	r0, r3, #22
 8011006:	d4ed      	bmi.n	8010fe4 <_vfiprintf_r+0x4c>
 8011008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801100a:	f7ff faa5 	bl	8010558 <__retarget_lock_release_recursive>
 801100e:	e7e9      	b.n	8010fe4 <_vfiprintf_r+0x4c>
 8011010:	2300      	movs	r3, #0
 8011012:	9309      	str	r3, [sp, #36]	; 0x24
 8011014:	2320      	movs	r3, #32
 8011016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801101a:	f8cd 800c 	str.w	r8, [sp, #12]
 801101e:	2330      	movs	r3, #48	; 0x30
 8011020:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80111e4 <_vfiprintf_r+0x24c>
 8011024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011028:	f04f 0901 	mov.w	r9, #1
 801102c:	4623      	mov	r3, r4
 801102e:	469a      	mov	sl, r3
 8011030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011034:	b10a      	cbz	r2, 801103a <_vfiprintf_r+0xa2>
 8011036:	2a25      	cmp	r2, #37	; 0x25
 8011038:	d1f9      	bne.n	801102e <_vfiprintf_r+0x96>
 801103a:	ebba 0b04 	subs.w	fp, sl, r4
 801103e:	d00b      	beq.n	8011058 <_vfiprintf_r+0xc0>
 8011040:	465b      	mov	r3, fp
 8011042:	4622      	mov	r2, r4
 8011044:	4629      	mov	r1, r5
 8011046:	4630      	mov	r0, r6
 8011048:	f7ff ff93 	bl	8010f72 <__sfputs_r>
 801104c:	3001      	adds	r0, #1
 801104e:	f000 80aa 	beq.w	80111a6 <_vfiprintf_r+0x20e>
 8011052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011054:	445a      	add	r2, fp
 8011056:	9209      	str	r2, [sp, #36]	; 0x24
 8011058:	f89a 3000 	ldrb.w	r3, [sl]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 80a2 	beq.w	80111a6 <_vfiprintf_r+0x20e>
 8011062:	2300      	movs	r3, #0
 8011064:	f04f 32ff 	mov.w	r2, #4294967295
 8011068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801106c:	f10a 0a01 	add.w	sl, sl, #1
 8011070:	9304      	str	r3, [sp, #16]
 8011072:	9307      	str	r3, [sp, #28]
 8011074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011078:	931a      	str	r3, [sp, #104]	; 0x68
 801107a:	4654      	mov	r4, sl
 801107c:	2205      	movs	r2, #5
 801107e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011082:	4858      	ldr	r0, [pc, #352]	; (80111e4 <_vfiprintf_r+0x24c>)
 8011084:	f7ef f8b4 	bl	80001f0 <memchr>
 8011088:	9a04      	ldr	r2, [sp, #16]
 801108a:	b9d8      	cbnz	r0, 80110c4 <_vfiprintf_r+0x12c>
 801108c:	06d1      	lsls	r1, r2, #27
 801108e:	bf44      	itt	mi
 8011090:	2320      	movmi	r3, #32
 8011092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011096:	0713      	lsls	r3, r2, #28
 8011098:	bf44      	itt	mi
 801109a:	232b      	movmi	r3, #43	; 0x2b
 801109c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110a0:	f89a 3000 	ldrb.w	r3, [sl]
 80110a4:	2b2a      	cmp	r3, #42	; 0x2a
 80110a6:	d015      	beq.n	80110d4 <_vfiprintf_r+0x13c>
 80110a8:	9a07      	ldr	r2, [sp, #28]
 80110aa:	4654      	mov	r4, sl
 80110ac:	2000      	movs	r0, #0
 80110ae:	f04f 0c0a 	mov.w	ip, #10
 80110b2:	4621      	mov	r1, r4
 80110b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110b8:	3b30      	subs	r3, #48	; 0x30
 80110ba:	2b09      	cmp	r3, #9
 80110bc:	d94e      	bls.n	801115c <_vfiprintf_r+0x1c4>
 80110be:	b1b0      	cbz	r0, 80110ee <_vfiprintf_r+0x156>
 80110c0:	9207      	str	r2, [sp, #28]
 80110c2:	e014      	b.n	80110ee <_vfiprintf_r+0x156>
 80110c4:	eba0 0308 	sub.w	r3, r0, r8
 80110c8:	fa09 f303 	lsl.w	r3, r9, r3
 80110cc:	4313      	orrs	r3, r2
 80110ce:	9304      	str	r3, [sp, #16]
 80110d0:	46a2      	mov	sl, r4
 80110d2:	e7d2      	b.n	801107a <_vfiprintf_r+0xe2>
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	1d19      	adds	r1, r3, #4
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	9103      	str	r1, [sp, #12]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	bfbb      	ittet	lt
 80110e0:	425b      	neglt	r3, r3
 80110e2:	f042 0202 	orrlt.w	r2, r2, #2
 80110e6:	9307      	strge	r3, [sp, #28]
 80110e8:	9307      	strlt	r3, [sp, #28]
 80110ea:	bfb8      	it	lt
 80110ec:	9204      	strlt	r2, [sp, #16]
 80110ee:	7823      	ldrb	r3, [r4, #0]
 80110f0:	2b2e      	cmp	r3, #46	; 0x2e
 80110f2:	d10c      	bne.n	801110e <_vfiprintf_r+0x176>
 80110f4:	7863      	ldrb	r3, [r4, #1]
 80110f6:	2b2a      	cmp	r3, #42	; 0x2a
 80110f8:	d135      	bne.n	8011166 <_vfiprintf_r+0x1ce>
 80110fa:	9b03      	ldr	r3, [sp, #12]
 80110fc:	1d1a      	adds	r2, r3, #4
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	9203      	str	r2, [sp, #12]
 8011102:	2b00      	cmp	r3, #0
 8011104:	bfb8      	it	lt
 8011106:	f04f 33ff 	movlt.w	r3, #4294967295
 801110a:	3402      	adds	r4, #2
 801110c:	9305      	str	r3, [sp, #20]
 801110e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80111f4 <_vfiprintf_r+0x25c>
 8011112:	7821      	ldrb	r1, [r4, #0]
 8011114:	2203      	movs	r2, #3
 8011116:	4650      	mov	r0, sl
 8011118:	f7ef f86a 	bl	80001f0 <memchr>
 801111c:	b140      	cbz	r0, 8011130 <_vfiprintf_r+0x198>
 801111e:	2340      	movs	r3, #64	; 0x40
 8011120:	eba0 000a 	sub.w	r0, r0, sl
 8011124:	fa03 f000 	lsl.w	r0, r3, r0
 8011128:	9b04      	ldr	r3, [sp, #16]
 801112a:	4303      	orrs	r3, r0
 801112c:	3401      	adds	r4, #1
 801112e:	9304      	str	r3, [sp, #16]
 8011130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011134:	482c      	ldr	r0, [pc, #176]	; (80111e8 <_vfiprintf_r+0x250>)
 8011136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801113a:	2206      	movs	r2, #6
 801113c:	f7ef f858 	bl	80001f0 <memchr>
 8011140:	2800      	cmp	r0, #0
 8011142:	d03f      	beq.n	80111c4 <_vfiprintf_r+0x22c>
 8011144:	4b29      	ldr	r3, [pc, #164]	; (80111ec <_vfiprintf_r+0x254>)
 8011146:	bb1b      	cbnz	r3, 8011190 <_vfiprintf_r+0x1f8>
 8011148:	9b03      	ldr	r3, [sp, #12]
 801114a:	3307      	adds	r3, #7
 801114c:	f023 0307 	bic.w	r3, r3, #7
 8011150:	3308      	adds	r3, #8
 8011152:	9303      	str	r3, [sp, #12]
 8011154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011156:	443b      	add	r3, r7
 8011158:	9309      	str	r3, [sp, #36]	; 0x24
 801115a:	e767      	b.n	801102c <_vfiprintf_r+0x94>
 801115c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011160:	460c      	mov	r4, r1
 8011162:	2001      	movs	r0, #1
 8011164:	e7a5      	b.n	80110b2 <_vfiprintf_r+0x11a>
 8011166:	2300      	movs	r3, #0
 8011168:	3401      	adds	r4, #1
 801116a:	9305      	str	r3, [sp, #20]
 801116c:	4619      	mov	r1, r3
 801116e:	f04f 0c0a 	mov.w	ip, #10
 8011172:	4620      	mov	r0, r4
 8011174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011178:	3a30      	subs	r2, #48	; 0x30
 801117a:	2a09      	cmp	r2, #9
 801117c:	d903      	bls.n	8011186 <_vfiprintf_r+0x1ee>
 801117e:	2b00      	cmp	r3, #0
 8011180:	d0c5      	beq.n	801110e <_vfiprintf_r+0x176>
 8011182:	9105      	str	r1, [sp, #20]
 8011184:	e7c3      	b.n	801110e <_vfiprintf_r+0x176>
 8011186:	fb0c 2101 	mla	r1, ip, r1, r2
 801118a:	4604      	mov	r4, r0
 801118c:	2301      	movs	r3, #1
 801118e:	e7f0      	b.n	8011172 <_vfiprintf_r+0x1da>
 8011190:	ab03      	add	r3, sp, #12
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	462a      	mov	r2, r5
 8011196:	4b16      	ldr	r3, [pc, #88]	; (80111f0 <_vfiprintf_r+0x258>)
 8011198:	a904      	add	r1, sp, #16
 801119a:	4630      	mov	r0, r6
 801119c:	f7fd fc8a 	bl	800eab4 <_printf_float>
 80111a0:	4607      	mov	r7, r0
 80111a2:	1c78      	adds	r0, r7, #1
 80111a4:	d1d6      	bne.n	8011154 <_vfiprintf_r+0x1bc>
 80111a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111a8:	07d9      	lsls	r1, r3, #31
 80111aa:	d405      	bmi.n	80111b8 <_vfiprintf_r+0x220>
 80111ac:	89ab      	ldrh	r3, [r5, #12]
 80111ae:	059a      	lsls	r2, r3, #22
 80111b0:	d402      	bmi.n	80111b8 <_vfiprintf_r+0x220>
 80111b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111b4:	f7ff f9d0 	bl	8010558 <__retarget_lock_release_recursive>
 80111b8:	89ab      	ldrh	r3, [r5, #12]
 80111ba:	065b      	lsls	r3, r3, #25
 80111bc:	f53f af12 	bmi.w	8010fe4 <_vfiprintf_r+0x4c>
 80111c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111c2:	e711      	b.n	8010fe8 <_vfiprintf_r+0x50>
 80111c4:	ab03      	add	r3, sp, #12
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	462a      	mov	r2, r5
 80111ca:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <_vfiprintf_r+0x258>)
 80111cc:	a904      	add	r1, sp, #16
 80111ce:	4630      	mov	r0, r6
 80111d0:	f7fd ff14 	bl	800effc <_printf_i>
 80111d4:	e7e4      	b.n	80111a0 <_vfiprintf_r+0x208>
 80111d6:	bf00      	nop
 80111d8:	080116c8 	.word	0x080116c8
 80111dc:	080116e8 	.word	0x080116e8
 80111e0:	080116a8 	.word	0x080116a8
 80111e4:	08011864 	.word	0x08011864
 80111e8:	0801186e 	.word	0x0801186e
 80111ec:	0800eab5 	.word	0x0800eab5
 80111f0:	08010f73 	.word	0x08010f73
 80111f4:	0801186a 	.word	0x0801186a

080111f8 <_sbrk_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4d06      	ldr	r5, [pc, #24]	; (8011214 <_sbrk_r+0x1c>)
 80111fc:	2300      	movs	r3, #0
 80111fe:	4604      	mov	r4, r0
 8011200:	4608      	mov	r0, r1
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	f7f1 fc24 	bl	8002a50 <_sbrk>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d102      	bne.n	8011212 <_sbrk_r+0x1a>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	b103      	cbz	r3, 8011212 <_sbrk_r+0x1a>
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	200021d0 	.word	0x200021d0

08011218 <__sread>:
 8011218:	b510      	push	{r4, lr}
 801121a:	460c      	mov	r4, r1
 801121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011220:	f000 f8e2 	bl	80113e8 <_read_r>
 8011224:	2800      	cmp	r0, #0
 8011226:	bfab      	itete	ge
 8011228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801122a:	89a3      	ldrhlt	r3, [r4, #12]
 801122c:	181b      	addge	r3, r3, r0
 801122e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011232:	bfac      	ite	ge
 8011234:	6563      	strge	r3, [r4, #84]	; 0x54
 8011236:	81a3      	strhlt	r3, [r4, #12]
 8011238:	bd10      	pop	{r4, pc}

0801123a <__swrite>:
 801123a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801123e:	461f      	mov	r7, r3
 8011240:	898b      	ldrh	r3, [r1, #12]
 8011242:	05db      	lsls	r3, r3, #23
 8011244:	4605      	mov	r5, r0
 8011246:	460c      	mov	r4, r1
 8011248:	4616      	mov	r6, r2
 801124a:	d505      	bpl.n	8011258 <__swrite+0x1e>
 801124c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011250:	2302      	movs	r3, #2
 8011252:	2200      	movs	r2, #0
 8011254:	f000 f898 	bl	8011388 <_lseek_r>
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801125e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	4632      	mov	r2, r6
 8011266:	463b      	mov	r3, r7
 8011268:	4628      	mov	r0, r5
 801126a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801126e:	f000 b817 	b.w	80112a0 <_write_r>

08011272 <__sseek>:
 8011272:	b510      	push	{r4, lr}
 8011274:	460c      	mov	r4, r1
 8011276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801127a:	f000 f885 	bl	8011388 <_lseek_r>
 801127e:	1c43      	adds	r3, r0, #1
 8011280:	89a3      	ldrh	r3, [r4, #12]
 8011282:	bf15      	itete	ne
 8011284:	6560      	strne	r0, [r4, #84]	; 0x54
 8011286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801128a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801128e:	81a3      	strheq	r3, [r4, #12]
 8011290:	bf18      	it	ne
 8011292:	81a3      	strhne	r3, [r4, #12]
 8011294:	bd10      	pop	{r4, pc}

08011296 <__sclose>:
 8011296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801129a:	f000 b831 	b.w	8011300 <_close_r>
	...

080112a0 <_write_r>:
 80112a0:	b538      	push	{r3, r4, r5, lr}
 80112a2:	4d07      	ldr	r5, [pc, #28]	; (80112c0 <_write_r+0x20>)
 80112a4:	4604      	mov	r4, r0
 80112a6:	4608      	mov	r0, r1
 80112a8:	4611      	mov	r1, r2
 80112aa:	2200      	movs	r2, #0
 80112ac:	602a      	str	r2, [r5, #0]
 80112ae:	461a      	mov	r2, r3
 80112b0:	f7f0 fe92 	bl	8001fd8 <_write>
 80112b4:	1c43      	adds	r3, r0, #1
 80112b6:	d102      	bne.n	80112be <_write_r+0x1e>
 80112b8:	682b      	ldr	r3, [r5, #0]
 80112ba:	b103      	cbz	r3, 80112be <_write_r+0x1e>
 80112bc:	6023      	str	r3, [r4, #0]
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	200021d0 	.word	0x200021d0

080112c4 <__assert_func>:
 80112c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112c6:	4614      	mov	r4, r2
 80112c8:	461a      	mov	r2, r3
 80112ca:	4b09      	ldr	r3, [pc, #36]	; (80112f0 <__assert_func+0x2c>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	4605      	mov	r5, r0
 80112d0:	68d8      	ldr	r0, [r3, #12]
 80112d2:	b14c      	cbz	r4, 80112e8 <__assert_func+0x24>
 80112d4:	4b07      	ldr	r3, [pc, #28]	; (80112f4 <__assert_func+0x30>)
 80112d6:	9100      	str	r1, [sp, #0]
 80112d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112dc:	4906      	ldr	r1, [pc, #24]	; (80112f8 <__assert_func+0x34>)
 80112de:	462b      	mov	r3, r5
 80112e0:	f000 f81e 	bl	8011320 <fiprintf>
 80112e4:	f000 f89f 	bl	8011426 <abort>
 80112e8:	4b04      	ldr	r3, [pc, #16]	; (80112fc <__assert_func+0x38>)
 80112ea:	461c      	mov	r4, r3
 80112ec:	e7f3      	b.n	80112d6 <__assert_func+0x12>
 80112ee:	bf00      	nop
 80112f0:	200000fc 	.word	0x200000fc
 80112f4:	08011875 	.word	0x08011875
 80112f8:	08011882 	.word	0x08011882
 80112fc:	080118b0 	.word	0x080118b0

08011300 <_close_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4d06      	ldr	r5, [pc, #24]	; (801131c <_close_r+0x1c>)
 8011304:	2300      	movs	r3, #0
 8011306:	4604      	mov	r4, r0
 8011308:	4608      	mov	r0, r1
 801130a:	602b      	str	r3, [r5, #0]
 801130c:	f7f1 fb6b 	bl	80029e6 <_close>
 8011310:	1c43      	adds	r3, r0, #1
 8011312:	d102      	bne.n	801131a <_close_r+0x1a>
 8011314:	682b      	ldr	r3, [r5, #0]
 8011316:	b103      	cbz	r3, 801131a <_close_r+0x1a>
 8011318:	6023      	str	r3, [r4, #0]
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	200021d0 	.word	0x200021d0

08011320 <fiprintf>:
 8011320:	b40e      	push	{r1, r2, r3}
 8011322:	b503      	push	{r0, r1, lr}
 8011324:	4601      	mov	r1, r0
 8011326:	ab03      	add	r3, sp, #12
 8011328:	4805      	ldr	r0, [pc, #20]	; (8011340 <fiprintf+0x20>)
 801132a:	f853 2b04 	ldr.w	r2, [r3], #4
 801132e:	6800      	ldr	r0, [r0, #0]
 8011330:	9301      	str	r3, [sp, #4]
 8011332:	f7ff fe31 	bl	8010f98 <_vfiprintf_r>
 8011336:	b002      	add	sp, #8
 8011338:	f85d eb04 	ldr.w	lr, [sp], #4
 801133c:	b003      	add	sp, #12
 801133e:	4770      	bx	lr
 8011340:	200000fc 	.word	0x200000fc

08011344 <_fstat_r>:
 8011344:	b538      	push	{r3, r4, r5, lr}
 8011346:	4d07      	ldr	r5, [pc, #28]	; (8011364 <_fstat_r+0x20>)
 8011348:	2300      	movs	r3, #0
 801134a:	4604      	mov	r4, r0
 801134c:	4608      	mov	r0, r1
 801134e:	4611      	mov	r1, r2
 8011350:	602b      	str	r3, [r5, #0]
 8011352:	f7f1 fb54 	bl	80029fe <_fstat>
 8011356:	1c43      	adds	r3, r0, #1
 8011358:	d102      	bne.n	8011360 <_fstat_r+0x1c>
 801135a:	682b      	ldr	r3, [r5, #0]
 801135c:	b103      	cbz	r3, 8011360 <_fstat_r+0x1c>
 801135e:	6023      	str	r3, [r4, #0]
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	bf00      	nop
 8011364:	200021d0 	.word	0x200021d0

08011368 <_isatty_r>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	4d06      	ldr	r5, [pc, #24]	; (8011384 <_isatty_r+0x1c>)
 801136c:	2300      	movs	r3, #0
 801136e:	4604      	mov	r4, r0
 8011370:	4608      	mov	r0, r1
 8011372:	602b      	str	r3, [r5, #0]
 8011374:	f7f1 fb53 	bl	8002a1e <_isatty>
 8011378:	1c43      	adds	r3, r0, #1
 801137a:	d102      	bne.n	8011382 <_isatty_r+0x1a>
 801137c:	682b      	ldr	r3, [r5, #0]
 801137e:	b103      	cbz	r3, 8011382 <_isatty_r+0x1a>
 8011380:	6023      	str	r3, [r4, #0]
 8011382:	bd38      	pop	{r3, r4, r5, pc}
 8011384:	200021d0 	.word	0x200021d0

08011388 <_lseek_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	4d07      	ldr	r5, [pc, #28]	; (80113a8 <_lseek_r+0x20>)
 801138c:	4604      	mov	r4, r0
 801138e:	4608      	mov	r0, r1
 8011390:	4611      	mov	r1, r2
 8011392:	2200      	movs	r2, #0
 8011394:	602a      	str	r2, [r5, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	f7f1 fb4c 	bl	8002a34 <_lseek>
 801139c:	1c43      	adds	r3, r0, #1
 801139e:	d102      	bne.n	80113a6 <_lseek_r+0x1e>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	b103      	cbz	r3, 80113a6 <_lseek_r+0x1e>
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	200021d0 	.word	0x200021d0

080113ac <__ascii_mbtowc>:
 80113ac:	b082      	sub	sp, #8
 80113ae:	b901      	cbnz	r1, 80113b2 <__ascii_mbtowc+0x6>
 80113b0:	a901      	add	r1, sp, #4
 80113b2:	b142      	cbz	r2, 80113c6 <__ascii_mbtowc+0x1a>
 80113b4:	b14b      	cbz	r3, 80113ca <__ascii_mbtowc+0x1e>
 80113b6:	7813      	ldrb	r3, [r2, #0]
 80113b8:	600b      	str	r3, [r1, #0]
 80113ba:	7812      	ldrb	r2, [r2, #0]
 80113bc:	1e10      	subs	r0, r2, #0
 80113be:	bf18      	it	ne
 80113c0:	2001      	movne	r0, #1
 80113c2:	b002      	add	sp, #8
 80113c4:	4770      	bx	lr
 80113c6:	4610      	mov	r0, r2
 80113c8:	e7fb      	b.n	80113c2 <__ascii_mbtowc+0x16>
 80113ca:	f06f 0001 	mvn.w	r0, #1
 80113ce:	e7f8      	b.n	80113c2 <__ascii_mbtowc+0x16>

080113d0 <__malloc_lock>:
 80113d0:	4801      	ldr	r0, [pc, #4]	; (80113d8 <__malloc_lock+0x8>)
 80113d2:	f7ff b8c0 	b.w	8010556 <__retarget_lock_acquire_recursive>
 80113d6:	bf00      	nop
 80113d8:	200021c4 	.word	0x200021c4

080113dc <__malloc_unlock>:
 80113dc:	4801      	ldr	r0, [pc, #4]	; (80113e4 <__malloc_unlock+0x8>)
 80113de:	f7ff b8bb 	b.w	8010558 <__retarget_lock_release_recursive>
 80113e2:	bf00      	nop
 80113e4:	200021c4 	.word	0x200021c4

080113e8 <_read_r>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4d07      	ldr	r5, [pc, #28]	; (8011408 <_read_r+0x20>)
 80113ec:	4604      	mov	r4, r0
 80113ee:	4608      	mov	r0, r1
 80113f0:	4611      	mov	r1, r2
 80113f2:	2200      	movs	r2, #0
 80113f4:	602a      	str	r2, [r5, #0]
 80113f6:	461a      	mov	r2, r3
 80113f8:	f7f1 fad8 	bl	80029ac <_read>
 80113fc:	1c43      	adds	r3, r0, #1
 80113fe:	d102      	bne.n	8011406 <_read_r+0x1e>
 8011400:	682b      	ldr	r3, [r5, #0]
 8011402:	b103      	cbz	r3, 8011406 <_read_r+0x1e>
 8011404:	6023      	str	r3, [r4, #0]
 8011406:	bd38      	pop	{r3, r4, r5, pc}
 8011408:	200021d0 	.word	0x200021d0

0801140c <__ascii_wctomb>:
 801140c:	b149      	cbz	r1, 8011422 <__ascii_wctomb+0x16>
 801140e:	2aff      	cmp	r2, #255	; 0xff
 8011410:	bf85      	ittet	hi
 8011412:	238a      	movhi	r3, #138	; 0x8a
 8011414:	6003      	strhi	r3, [r0, #0]
 8011416:	700a      	strbls	r2, [r1, #0]
 8011418:	f04f 30ff 	movhi.w	r0, #4294967295
 801141c:	bf98      	it	ls
 801141e:	2001      	movls	r0, #1
 8011420:	4770      	bx	lr
 8011422:	4608      	mov	r0, r1
 8011424:	4770      	bx	lr

08011426 <abort>:
 8011426:	b508      	push	{r3, lr}
 8011428:	2006      	movs	r0, #6
 801142a:	f000 f82b 	bl	8011484 <raise>
 801142e:	2001      	movs	r0, #1
 8011430:	f7f1 fab2 	bl	8002998 <_exit>

08011434 <_raise_r>:
 8011434:	291f      	cmp	r1, #31
 8011436:	b538      	push	{r3, r4, r5, lr}
 8011438:	4604      	mov	r4, r0
 801143a:	460d      	mov	r5, r1
 801143c:	d904      	bls.n	8011448 <_raise_r+0x14>
 801143e:	2316      	movs	r3, #22
 8011440:	6003      	str	r3, [r0, #0]
 8011442:	f04f 30ff 	mov.w	r0, #4294967295
 8011446:	bd38      	pop	{r3, r4, r5, pc}
 8011448:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801144a:	b112      	cbz	r2, 8011452 <_raise_r+0x1e>
 801144c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011450:	b94b      	cbnz	r3, 8011466 <_raise_r+0x32>
 8011452:	4620      	mov	r0, r4
 8011454:	f000 f830 	bl	80114b8 <_getpid_r>
 8011458:	462a      	mov	r2, r5
 801145a:	4601      	mov	r1, r0
 801145c:	4620      	mov	r0, r4
 801145e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011462:	f000 b817 	b.w	8011494 <_kill_r>
 8011466:	2b01      	cmp	r3, #1
 8011468:	d00a      	beq.n	8011480 <_raise_r+0x4c>
 801146a:	1c59      	adds	r1, r3, #1
 801146c:	d103      	bne.n	8011476 <_raise_r+0x42>
 801146e:	2316      	movs	r3, #22
 8011470:	6003      	str	r3, [r0, #0]
 8011472:	2001      	movs	r0, #1
 8011474:	e7e7      	b.n	8011446 <_raise_r+0x12>
 8011476:	2400      	movs	r4, #0
 8011478:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801147c:	4628      	mov	r0, r5
 801147e:	4798      	blx	r3
 8011480:	2000      	movs	r0, #0
 8011482:	e7e0      	b.n	8011446 <_raise_r+0x12>

08011484 <raise>:
 8011484:	4b02      	ldr	r3, [pc, #8]	; (8011490 <raise+0xc>)
 8011486:	4601      	mov	r1, r0
 8011488:	6818      	ldr	r0, [r3, #0]
 801148a:	f7ff bfd3 	b.w	8011434 <_raise_r>
 801148e:	bf00      	nop
 8011490:	200000fc 	.word	0x200000fc

08011494 <_kill_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d07      	ldr	r5, [pc, #28]	; (80114b4 <_kill_r+0x20>)
 8011498:	2300      	movs	r3, #0
 801149a:	4604      	mov	r4, r0
 801149c:	4608      	mov	r0, r1
 801149e:	4611      	mov	r1, r2
 80114a0:	602b      	str	r3, [r5, #0]
 80114a2:	f7f1 fa69 	bl	8002978 <_kill>
 80114a6:	1c43      	adds	r3, r0, #1
 80114a8:	d102      	bne.n	80114b0 <_kill_r+0x1c>
 80114aa:	682b      	ldr	r3, [r5, #0]
 80114ac:	b103      	cbz	r3, 80114b0 <_kill_r+0x1c>
 80114ae:	6023      	str	r3, [r4, #0]
 80114b0:	bd38      	pop	{r3, r4, r5, pc}
 80114b2:	bf00      	nop
 80114b4:	200021d0 	.word	0x200021d0

080114b8 <_getpid_r>:
 80114b8:	f7f1 ba56 	b.w	8002968 <_getpid>

080114bc <_init>:
 80114bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114be:	bf00      	nop
 80114c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114c2:	bc08      	pop	{r3}
 80114c4:	469e      	mov	lr, r3
 80114c6:	4770      	bx	lr

080114c8 <_fini>:
 80114c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ca:	bf00      	nop
 80114cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114ce:	bc08      	pop	{r3}
 80114d0:	469e      	mov	lr, r3
 80114d2:	4770      	bx	lr
